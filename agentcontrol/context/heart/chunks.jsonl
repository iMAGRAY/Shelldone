{"id": ".pytest_cache/README.md:1-9", "path": ".pytest_cache/README.md", "start": 0, "end": 302, "start_line": 1, "end_line": 9, "weights": {"cache": 0.5005220470077063, "pytest": 0.34062344881400614, "directory": 0.3145052782984874, "to": 0.20475829555508893, "contains": 0.1572526391492437, "provides": 0.1572526391492437, "ff": 0.1572526391492437, "options": 0.1572526391492437, "well": 0.1572526391492437, "fixture": 0.1572526391492437, "see": 0.1572526391492437, "en": 0.1572526391492437, "how": 0.1572526391492437, "html": 0.1572526391492437, "more": 0.1572526391492437, "as": 0.1537107031226336, "docs": 0.15260782080360982, "https": 0.14685609791570103, "org": 0.14685609791570103, "information": 0.14685609791570103, "lf": 0.13947963451950154, "commit": 0.13947963451950154, "stable": 0.13947963451950154, "do": 0.12513051175192658, "which": 0.11868655205241617, "control": 0.10091354742267399, "plugin": 0.0924903662182628, "version": 0.0924903662182628, "data": 0.07918796125889953, "not": 0.051845616990953684}, "norm": 1.0076575794475722, "snippet": "# pytest cache directory # This directory contains data from the pytest's cache plugin, which provides the `--lf` and `--ff` options, as well as the `cache` fixture. **Do not** commit this to version control. See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.", "text": "# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n"}
{"id": "config/heart.json:1-34", "path": "config/heart.json", "start": 0, "end": 662, "start_line": 1, "end_line": 34, "weights": {"heart": 0.21673420559359158, "context": 0.21014667175390706, "524288": 0.16139086649527642, "1200": 0.15072073207137737, "scripts": 0.14931663477979873, "include_globs": 0.14315015121738314, "tsx": 0.14315015121738314, "jsx": 0.14315015121738314, "exclude_globs": 0.14315015121738314, "__pycache__": 0.14315015121738314, "max_results": 0.14315015121738314, "index_dir": 0.13727795249858812, "chunk_chars": 0.1324800167934841, "chunk_overlap": 0.1324800167934841, "yml": 0.1324800167934841, "stop_words": 0.1324800167934841, "ts": 0.12842341995592463, "js": 0.12842341995592463, "node_modules": 0.12842341995592463, "200": 0.12490943593948983, "max_file_bytes": 0.12490943593948983, "rs": 0.12180988236958501, "vendor": 0.12180988236958501, "sbom": 0.11652907459426523, "top_k": 0.11423930151559078, "git": 0.10356916709169171, "venv": 0.10356916709169171, "10": 0.08842800538370325, "reports": 0.0876182248924729, "yaml": 0.08683262059906023, "sh": 0.0819060010704248, "py": 0.07775787095980419, "md": 0.06977928519696876, "bin": 0.06977928519696876, "json": 0.05431121506796563}, "norm": 0.7623091198297464, "snippet": "{ \"index_dir\": \"context/heart\", \"chunk_chars\": 1200, \"chunk_overlap\": 200, \"max_file_bytes\": 524288, \"include_globs\": [ \"**/*.py\", \"**/*.rs\", \"**/*.ts\", \"**/*.tsx\", \"**/*.js\", \"**/*.jsx\", \"**/*.sh\", \"**/*.md\", \"**/*.yaml\", \"**/*.yml\", \"**/*.json\" ], \"exclude_globs\": [ \"vendor/**\", \"scripts/bin/**\",…", "text": "{\n  \"index_dir\": \"context/heart\",\n  \"chunk_chars\": 1200,\n  \"chunk_overlap\": 200,\n  \"max_file_bytes\": 524288,\n  \"include_globs\": [\n    \"**/*.py\",\n    \"**/*.rs\",\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \"**/*.js\",\n    \"**/*.jsx\",\n    \"**/*.sh\",\n    \"**/*.md\",\n    \"**/*.yaml\",\n    \"**/*.yml\",\n    \"**/*.json\"\n  ],\n  \"exclude_globs\": [\n    \"vendor/**\",\n    \"scripts/bin/**\",\n    \"scripts/__pycache__/**\",\n    \"node_modules/**\",\n    \".git/**\",\n    \".venv/**\",\n    \"context/heart/**\",\n    \"reports/**\",\n    \"sbom/**\"\n  ],\n  \"stop_words\": [\"the\", \"and\", \"for\", \"from\", \"with\", \"this\", \"that\", \"into\", \"about\", \"shall\", \"should\", \"todo\"],\n  \"top_k\": 6,\n  \"max_results\": 10\n}\n"}
{"id": "config/commands.sh:1-28", "path": "config/commands.sh", "start": 0, "end": 768, "start_line": 1, "end_line": 28, "weights": {"sdk_capsule_root": 0.6012600908647553, "venv": 0.4630150999393277, "_ensure_venv_cmd": 0.3607560545188532, "_upgrade_cmd": 0.3607560545188532, "_requirements_cmd": 0.3607560545188532, "_pytest_cmd": 0.3607560545188532, "cd": 0.2587952613932776, "pip": 0.225309872578027, "upgrade": 0.20457106646848428, "bin": 0.15597722573440076, "install": 0.1356354618585873, "sdk": 0.10164288638365454, "sdk_fix_commands": 0.09568803839853209, "sdk_dev_commands": 0.09306977579805124, "sdk_verify_commands": 0.09306977579805124, "sdk_ship_commands": 0.09306977579805124, "agentcontrol": 0.09076030451067119, "sdk_test_command": 0.09076030451067119, "txt": 0.08682558499180547, "pytest": 0.08682558499180547, "requirements": 0.07947865461060136, "eq": 0.0782899365357693, "python": 0.07236286061669217, "python3": 0.05356187343447744}, "norm": 1.1816802482579665, "snippet": "# Команды SDK для конкретного проекта. # Обновите массивы, чтобы привязать SDK к стеку разрабатываемого решения. SDK_CAPSULE_ROOT=\"agentcontrol\" _ensure_venv_cmd='(cd \"$SDK_CAPSULE_ROOT\" && [ -d .venv ] || python3 -m venv .venv)' _upgrade_cmd='(cd \"$SDK_CAPSULE_ROOT\" && .venv/bin/pip install --upgrade pip)'…", "text": "# Команды SDK для конкретного проекта.\n# Обновите массивы, чтобы привязать SDK к стеку разрабатываемого решения.\n\nSDK_CAPSULE_ROOT=\"agentcontrol\"\n\n_ensure_venv_cmd='(cd \"$SDK_CAPSULE_ROOT\" && [ -d .venv ] || python3 -m venv .venv)'\n_upgrade_cmd='(cd \"$SDK_CAPSULE_ROOT\" && .venv/bin/pip install --upgrade pip)'\n_requirements_cmd='(cd \"$SDK_CAPSULE_ROOT\" && .venv/bin/pip install --upgrade -r requirements.txt)'\n_pytest_cmd='(cd \"$SDK_CAPSULE_ROOT\" && (.venv/bin/python -m pytest -q || [[ $? -eq 5 ]]))'\n\nSDK_DEV_COMMANDS=(\n  \"$_ensure_venv_cmd\"\n  \"$_upgrade_cmd\"\n  \"$_requirements_cmd\"\n)\n\nSDK_VERIFY_COMMANDS=(\n  \"$_ensure_venv_cmd\"\n  \"$_upgrade_cmd\"\n  \"$_requirements_cmd\"\n  \"$_pytest_cmd\"\n)\n\nSDK_FIX_COMMANDS=()\nSDK_SHIP_COMMANDS=()\n\nSDK_TEST_COMMAND=\"$_pytest_cmd\"\n"}
{"id": "config/agents.json:1-56", "path": "config/agents.json", "start": 0, "end": 1200, "start_line": 1, "end_line": 56, "weights": {"claude": 0.4066741631937614, "codex": 0.2909063832007649, "config": 0.16308584408182356, "sandbox": 0.15814660123507426, "bot": 0.14602030778144057, "agents": 0.13876081437868115, "auth_command": 0.13636637663600812, "scripts": 0.13509600289600837, "auto": 0.12951680348239428, "login": 0.12951680348239428, "bin": 0.12626727797546727, "stdin": 0.11986287233696179, "credentials_paths": 0.11986287233696179, "state": 0.07469334888729795, "cl": 0.07301015389072028, "owner": 0.07136568359265132, "principal": 0.06818318831800406, "engineer": 0.06818318831800406, "implementation": 0.06818318831800406, "lead": 0.06818318831800406, "default_role": 0.06475840174119714, "ask": 0.06475840174119714, "command": 0.06313363898773364, "top_k_chunks": 0.062101930892218445, "workspace": 0.062101930892218445, "approval": 0.062101930892218445, "delivery": 0.059931436168480894, "max_snippet_chars": 0.059931436168480894, "320": 0.059931436168480894, "anthropic": 0.059931436168480894, "request": 0.05809630902768019, "cache": 0.05809630902768019, "assign_agent": 0.05809630902768019, "assign_role": 0.05809630902768019, "review_agent": 0.05809630902768019, "home": 0.05650664959167397, "true": 0.055651517563055, "workflows": 0.051679684018957735, "on": 0.04984455687815703, "log_dir": 0.04902321316997905, "exec": 0.04902321316997905, "write": 0.04825489744215082, "context": 0.04753317575385993, "auth": 0.04685271844624149, "default": 0.04077146102045589, "reports": 0.039636816022785355}, "norm": 0.7571794799507521, "snippet": "{ \"default_role\": \"Principal Delivery Engineer\", \"log_dir\": \"reports/agents\", \"context\": { \"max_snippet_chars\": 320, \"top_k_chunks\": 6 }, \"agents\": { \"codex\": { \"command\": [ \"scripts/bin/codex\", \"exec\", \"--sandbox\", \"workspace-write\", \"--ask-for-approval\", \"on-request\" ], \"stdin\": true, \"owner\": \"codex-bot\",…", "text": "{\n  \"default_role\": \"Principal Delivery Engineer\",\n  \"log_dir\": \"reports/agents\",\n  \"context\": {\n    \"max_snippet_chars\": 320,\n    \"top_k_chunks\": 6\n  },\n  \"agents\": {\n    \"codex\": {\n      \"command\": [\n        \"scripts/bin/codex\",\n        \"exec\",\n        \"--sandbox\",\n        \"workspace-write\",\n        \"--ask-for-approval\",\n        \"on-request\"\n      ],\n      \"stdin\": true,\n      \"owner\": \"codex-bot\",\n      \"sandbox\": \"auto\",\n      \"auth_command\": [\n        \"scripts/bin/codex\",\n        \"auth\",\n        \"login\"\n      ],\n      \"credentials_paths\": [\n        \"state/agents/codex-home\",\n        \"~/.codex\",\n        \"~/.config/codex\",\n        \"~/.cache/codex\"\n      ]\n    },\n    \"claude\": {\n      \"command\": [\n        \"scripts/bin/claude\"\n      ],\n      \"stdin\": true,\n      \"owner\": \"claude-bot\",\n      \"sandbox\": \"auto\",\n      \"auth_command\": [\n        \"scripts/bin/claude\",\n        \"login\"\n      ],\n      \"credentials_paths\": [\n        \"state/agents/claude-config\",\n        \"~/.claude\",\n        \"~/.config/anthropic\",\n        \"~/.config/claude\"\n      ]\n    }\n  },\n  \"workflows\": {\n    \"default\": {\n      \"assign_agent\": \"codex\",\n      \"assign_role\": \"Implementation Lead\",\n      \"review_agent\": \"cl"}
{"id": "config/agents.json:47-66", "path": "config/agents.json", "start": 1000, "end": 1400, "start_line": 47, "end_line": 66, "weights": {"claude": 0.37539153525577973, "config": 0.2634463635167919, "staff": 0.23587895872386558, "reviewer": 0.23587895872386558, "assign_args": 0.23587895872386558, "implementation": 0.22028414687355158, "lead": 0.22028414687355158, "default_agent": 0.22028414687355158, "ask": 0.20921945177925233, "codex": 0.20885586486208763, "workspace": 0.20063700749793653, "approval": 0.20063700749793653, "anthropic": 0.1936246399289383, "review_role": 0.1936246399289383, "assign_agent": 0.18769576762788986, "assign_role": 0.18769576762788986, "review_agent": 0.18769576762788986, "request": 0.18769576762788986, "sandbox": 0.17031172440700307, "workflows": 0.166965132984325, "on": 0.1610362606832766, "write": 0.15590043789002575, "default": 0.13172318175839595}, "norm": 1.0154263105988746, "snippet": ".config/anthropic\", \"~/.config/claude\" ] } }, \"workflows\": { \"default\": { \"assign_agent\": \"codex\", \"assign_role\": \"Implementation Lead\", \"review_agent\": \"claude\", \"review_role\": \"Staff Reviewer\", \"assign_args\": { \"--sandbox\": \"workspace-write\", \"--ask-for-approval\": \"on-request\" } } }, \"default_agent\": \"codex\" }", "text": ".config/anthropic\",\n        \"~/.config/claude\"\n      ]\n    }\n  },\n  \"workflows\": {\n    \"default\": {\n      \"assign_agent\": \"codex\",\n      \"assign_role\": \"Implementation Lead\",\n      \"review_agent\": \"claude\",\n      \"review_role\": \"Staff Reviewer\",\n      \"assign_args\": {\n        \"--sandbox\": \"workspace-write\",\n        \"--ask-for-approval\": \"on-request\"\n      }\n    }\n  },\n  \"default_agent\": \"codex\"\n}\n"}
{"id": "scripts/sync-architecture.sh:1-9", "path": "scripts/sync-architecture.sh", "start": 0, "end": 179, "start_line": 1, "end_line": 9, "weights": {"script_dir": 0.3230488478947908, "architecture_tool": 0.25903360696478855, "lib": 0.16637121891453555, "lc_all": 0.16308584408182356, "sync": 0.16308584408182356, "eeuo": 0.16001258117051065, "pipefail": 0.16001258117051065, "dirname": 0.15854726409114142, "bash_source": 0.15854726409114142, "cd": 0.15712569441734708, "bash": 0.15574533551862077, "pwd": 0.15574533551862077, "ifs": 0.15440386518687332, "set": 0.14594285674699467, "py": 0.14070471887964567, "usr": 0.13781783212648213, "env": 0.13007883548373092, "python3": 0.13007883548373092, "bin": 0.12626727797546727, "utf": 0.1062323932021838}, "norm": 0.7563185557903481, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" python3 \"$SCRIPT_DIR/lib/architecture_tool.py\" sync", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\npython3 \"$SCRIPT_DIR/lib/architecture_tool.py\" sync\n"}
{"id": "scripts/sdk.py:1-51", "path": "scripts/sdk.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 51, "weights": {"args": 0.31306714734441904, "namespace": 0.23559054971224797, "run": 0.2225929510480556, "script": 0.21147768713174153, "argparse": 0.18895463314307834, "scripts": 0.15652502404503038, "int": 0.13623676031397838, "sh": 0.10732510485090146, "return": 0.10454502729586286, "import": 0.10411509026241829, "def": 0.10241030663748688, "str": 0.08894313379106757, "proc": 0.07503042408635255, "base": 0.05283128046657185, "subprocess": 0.0497534383794793, "report_summary": 0.042295537426348305, "cmd_verify": 0.03949922633594718, "cmd_review": 0.03949922633594718, "review_base_ref": 0.03949922633594718, "cmd_doctor": 0.03949922633594718, "cmd_task": 0.03949922633594718, "env": 0.03767800751942551, "python3": 0.03767800751942551, "cmd_status": 0.037515212043176274, "cmd_summary": 0.037515212043176274, "cmd_call": 0.037515212043176274, "root": 0.03745001714768468, "command": 0.03657397017220432, "doctor": 0.03192258986237401, "returncode": 0.030538654031600547, "path": 0.029959169065143818, "__file__": 0.02714226447920197, "__future__": 0.0267693870911311, "annotations": 0.0267693870911311, "target": 0.026415640233285926, "cli": 0.026079156342462256, "resolve": 0.025451764768629658, "review": 0.02487671918973965, "agentcall": 0.02460623151282047, "lib": 0.024095142049691355, "pathlib": 0.02275613505354682, "parents": 0.02275613505354682, "py": 0.020377924803259027, "usr": 0.019959823963145686, "gpt": 0.019694539267781575, "sys": 0.018839003759712755, "codex": 0.01872500857384234, "bin": 0.01828698508610216, "sdk": 0.017875128295056487, "verify": 0.017581613712857894, "list": 0.01643688862682851, "task": 0.01329765729261751, "status": 0.012031694775144739, "if": 0.009571867575567274}, "norm": 0.6495862287337926, "snippet": "#!/usr/bin/env python3 \"\"\"Единый CLI для управления GPT-5 Codex SDK.\"\"\" from __future__ import annotations import argparse import subprocess import sys from pathlib import Path ROOT = Path(__file__).resolve().parents[1] SCRIPTS = ROOT / \"scripts\" def run(command: list[str]) -> int: proc = subprocess.run(command)…", "text": "#!/usr/bin/env python3\n\"\"\"Единый CLI для управления GPT-5 Codex SDK.\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport subprocess\nimport sys\nfrom pathlib import Path\n\n\nROOT = Path(__file__).resolve().parents[1]\nSCRIPTS = ROOT / \"scripts\"\n\n\ndef run(command: list[str]) -> int:\n    proc = subprocess.run(command)\n    return proc.returncode\n\n\ndef cmd_verify(args: argparse.Namespace) -> int:\n    return run([str(SCRIPTS / \"verify.sh\")])\n\n\ndef cmd_review(args: argparse.Namespace) -> int:\n    script = str(SCRIPTS / \"review.sh\")\n    if args.base:\n        return run([\"env\", f\"REVIEW_BASE_REF={args.base}\", script])\n    return run([script])\n\n\ndef cmd_doctor(args: argparse.Namespace) -> int:\n    return run([str(SCRIPTS / \"doctor.sh\")])\n\n\ndef cmd_status(args: argparse.Namespace) -> int:\n    return run([str(SCRIPTS / \"status.sh\")])\n\n\ndef cmd_summary(args: argparse.Namespace) -> int:\n    script = [\"python3\", str(SCRIPTS / \"lib\" / \"report_summary.py\")]\n    return run(script)\n\n\ndef cmd_task(args: argparse.Namespace) -> int:\n    return run([str(SCRIPTS / \"task.sh\"), *args.args])\n\n\ndef cmd_call(args: argparse.Namespace) -> int:\n    return run([\"agentcall\", \"run\", args.target, *args.args])\n"}
{"id": "scripts/sdk.py:45-79", "path": "scripts/sdk.py", "start": 1000, "end": 2200, "start_line": 45, "end_line": 79, "weights": {"args": 0.2614904168487371, "sub": 0.24054318749542253, "func": 0.23094305720614278, "set_defaults": 0.2193429736395387, "add_parser": 0.17855261429766447, "help": 0.17651352953383087, "review": 0.17453827173446368, "doctor": 0.14931533967884614, "argparse": 0.13809688410154414, "namespace": 0.11806669254012427, "agentcall": 0.11509366352770865, "verify": 0.10279572533727398, "cmd_verify": 0.0923772228824571, "cmd_review": 0.0923772228824571, "summary": 0.0828581304609265, "run": 0.07098822119201187, "argumentparser": 0.06753133512524502, "parser": 0.06024125248422797, "int": 0.05974091808123044, "status": 0.05627728201277378, "return": 0.05433343712509001, "add_pa": 0.04945849134532665, "cmd_qa": 0.04618861144122855, "prog": 0.04618861144122855, "cmd_doctor": 0.04618861144122855, "def": 0.04490774535010765, "cmd_call": 0.04386859472790774, "helper": 0.04386859472790774, "cmd_status": 0.04386859472790774, "cmd_summary": 0.04386859472790774, "sdk": 0.04180473552876114, "build_parser": 0.03935556418004142, "add_subparsers": 0.03827869811048882, "dest": 0.03376566756262251, "required": 0.03376566756262251, "description": 0.032688801493069915, "diff": 0.032688801493069915, "task": 0.031099359797250627, "target": 0.030889256724406927, "add_argument": 0.030889256724406927, "base": 0.030889256724406927, "default": 0.02761937682030883, "sh": 0.02510022613448502, "gpt": 0.02302990478893813, "scripts": 0.02287916178077561, "codex": 0.021896179380702735, "command": 0.021383974495845268, "true": 0.01884970756167992, "none": 0.01790991872090612, "str": 0.014858011981226726, "if": 0.01119290966497786}, "norm": 0.6950753432389846, "snippet": "args: argparse.Namespace) -> int: return run([str(SCRIPTS / \"task.sh\"), *args.args]) def cmd_call(args: argparse.Namespace) -> int: return run([\"agentcall\", \"run\", args.target, *args.args]) def cmd_qa(args: argparse.Namespace) -> int: if cmd_verify(args) != 0: return 1 return cmd_review(args) def build_parser() ->…", "text": "args: argparse.Namespace) -> int:\n    return run([str(SCRIPTS / \"task.sh\"), *args.args])\n\n\ndef cmd_call(args: argparse.Namespace) -> int:\n    return run([\"agentcall\", \"run\", args.target, *args.args])\n\n\ndef cmd_qa(args: argparse.Namespace) -> int:\n    if cmd_verify(args) != 0:\n        return 1\n    return cmd_review(args)\n\n\ndef build_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(prog=\"sdk\", description=\"GPT-5 Codex SDK helper\")\n    sub = parser.add_subparsers(dest=\"command\", required=True)\n\n    verify = sub.add_parser(\"verify\", help=\"Запустить agentcall verify\")\n    verify.set_defaults(func=cmd_verify)\n\n    review = sub.add_parser(\"review\", help=\"Запустить agentcall review\")\n    review.add_argument(\"--base\", help=\"Базовый коммит для diff\", default=None)\n    review.set_defaults(func=cmd_review)\n\n    doctor = sub.add_parser(\"doctor\", help=\"Проверка окружения и зависимостей\")\n    doctor.set_defaults(func=cmd_doctor)\n\n    status = sub.add_parser(\"status\", help=\"agentcall status\")\n    status.set_defaults(func=cmd_status)\n\n    summary = sub.add_parser(\"summary\", help=\"Сводка verify/review/doctor\")\n    summary.set_defaults(func=cmd_summary)\n\n    task = sub.add_pa"}
{"id": "scripts/sdk.py:73-103", "path": "scripts/sdk.py", "start": 2000, "end": 2921, "start_line": 73, "end_line": 103, "weights": {"func": 0.3402408605175648, "set_defaults": 0.26929236367626536, "call": 0.24288526442853484, "help": 0.1805913998530943, "add_parser": 0.17537048849830017, "sub": 0.1687544851453035, "args": 0.1605188697487297, "add_argument": 0.1516937755970875, "qa": 0.13186109092728596, "nargs": 0.12144263221426742, "remainder": 0.12144263221426742, "parser": 0.1109393362580832, "review": 0.10714230542115592, "summary": 0.10172681363519688, "task": 0.09545348056581876, "argparse": 0.06781787575679792, "argv": 0.06653988523922226, "none": 0.06596524518987204, "main": 0.06420754789949189, "entcall": 0.06072131610713371, "run": 0.058102570480590573, "cmd_task": 0.0567068100862608, "cmd_qa": 0.0567068100862608, "cmd_status": 0.05385847273525307, "cmd_summary": 0.05385847273525307, "cmd_call": 0.05385847273525307, "verify": 0.050481861155730584, "build_parser": 0.04831772235965482, "doctor": 0.04582946069350723, "parse_args": 0.04077178125027961, "target": 0.03792344389927187, "base": 0.03792344389927187, "__name__": 0.0369797787526944, "__main__": 0.0369797787526944, "agentcall": 0.03532577791444523, "status": 0.034546450344474997, "default": 0.03390893787839896, "return": 0.03335319902728298, "exit": 0.03326994261961113, "sh": 0.030816119214615273, "scripts": 0.028089267928873028, "name": 0.028089267928873028, "sys": 0.027046094506518313, "int": 0.024448428521691667, "list": 0.02359751337514984, "def": 0.01837808720598465, "str": 0.018241519660119943, "if": 0.013741790083735196}, "norm": 0.7369312145820213, "snippet": "entcall status\") status.set_defaults(func=cmd_status) summary = sub.add_parser(\"summary\", help=\"Сводка verify/review/doctor\") summary.set_defaults(func=cmd_summary) task = sub.add_parser(\"task\", help=\"Прокси к scripts/task.sh\") task.add_argument(\"args\", nargs=argparse.REMAINDER) task.set_defaults(func=cmd_task) call =…", "text": "entcall status\")\n    status.set_defaults(func=cmd_status)\n\n    summary = sub.add_parser(\"summary\", help=\"Сводка verify/review/doctor\")\n    summary.set_defaults(func=cmd_summary)\n\n    task = sub.add_parser(\"task\", help=\"Прокси к scripts/task.sh\")\n    task.add_argument(\"args\", nargs=argparse.REMAINDER)\n    task.set_defaults(func=cmd_task)\n\n    call = sub.add_parser(\"run\", help=\"Проброс команды в agentcall run <name>\")\n    call.add_argument(\"target\")\n    call.add_argument(\"args\", nargs=argparse.REMAINDER)\n    call.set_defaults(func=cmd_call)\n\n    qa = sub.add_parser(\"qa\", help=\"verify -> review\")\n    qa.add_argument(\"--base\", help=\"Базовый коммит для review\", default=None)\n    qa.set_defaults(func=cmd_qa)\n\n    return parser\n\n\ndef main(argv: list[str] | None = None) -> int:\n    parser = build_parser()\n    args = parser.parse_args(argv)\n    return args.func(args)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n"}
{"id": "scripts/scan-sbom.sh:1-45", "path": "scripts/scan-sbom.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 45, "weights": {"pip": 0.16774895622597633, "sdk_root": 0.1458171917918527, "pip_audit": 0.1342960494924198, "cache_dir": 0.1342960494924198, "audit": 0.1312711844185995, "status_json": 0.11423128894043101, "lock_file": 0.11023884609092838, "report": 0.0969657992974178, "sarif_report": 0.0895306996616132, "lock": 0.08499768893899291, "scan": 0.07941176271913226, "sdk": 0.0756757256287063, "report_path": 0.07349256406061891, "reports": 0.07290859589592635, "cache": 0.07124218917262973, "set": 0.06711240857708514, "import": 0.06611688213744811, "fi": 0.06470362984976408, "sbom": 0.06464386619827853, "raw": 0.06464386619827853, "sys": 0.059817274711496705, "requirements": 0.05917388883417035, "die": 0.05917388883417035, "then": 0.05244926953001029, "agentcall": 0.052086183494291505, "script_dir": 0.04951843653861757, "argv": 0.049054951891689395, "mkdir": 0.048605730597284236, "path": 0.04756291439174293, "json": 0.04519327385217579, "requirement": 0.0447653498308066, "spinner": 0.0447653498308066, "off": 0.0447653498308066, "if": 0.040523234991452696, "sarif": 0.03970588135956613, "dir": 0.03970588135956613, "bin": 0.03870967645963231, "sarif_path": 0.038077096313477, "format": 0.034646412888325644, "ne": 0.034646412888325644, "setup": 0.03301762784223653, "utf": 0.03256759499628993, "sc1091": 0.029586944417085176, "common": 0.029586944417085176, "venv": 0.028727214229812302, "output": 0.028727214229812302, "disable": 0.02795815937099605, "wrn": 0.02726246462789879, "source": 0.026937999207673726, "shellcheck": 0.0266273450878285, "lib": 0.025502157643833914, "lc_all": 0.02499856004173938, "progress": 0.024759218269308787, "eeuo": 0.024527475945844698, "pipefail": 0.024527475945844698, "dirname": 0.024302865298642118, "bash_source": 0.024302865298642118, "cd": 0.024084960458133495, "pathlib": 0.024084960458133495, "bash": 0.02387337259774479, "pwd": 0.02387337259774479, "ifs": 0.023667745758571824, "read_text": 0.023667745758571824, "sh": 0.022718452851650674}, "norm": 0.5120959703293765, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" PIP_AUDIT=\"$SDK_ROOT/.venv/bin/pip-audit\" LOCK_FILE=\"$SDK_ROOT/requirements.lock\" REPORT=\"$SDK_ROOT/reports/pip-audit.json\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nPIP_AUDIT=\"$SDK_ROOT/.venv/bin/pip-audit\"\nLOCK_FILE=\"$SDK_ROOT/requirements.lock\"\nREPORT=\"$SDK_ROOT/reports/pip-audit.json\"\nSARIF_REPORT=\"$SDK_ROOT/reports/pip-audit.sarif\"\nCACHE_DIR=\"$SDK_ROOT/.sdk/pip-audit-cache\"\n\nif [[ ! -x \"$PIP_AUDIT\" ]]; then\n  sdk::die \"scan-sbom: отсутствует pip-audit — выполните agentcall setup\"\nfi\n\nif [[ ! -f \"$LOCK_FILE\" ]]; then\n  sdk::die \"scan-sbom: отсутствует requirements.lock — выполните agentcall lock\"\nfi\n\nmkdir -p \"$SDK_ROOT/reports\"\nmkdir -p \"$CACHE_DIR\"\n\nset +e\n\"$PIP_AUDIT\" --requirement \"$LOCK_FILE\" --format json --output \"$REPORT\" --cache-dir \"$CACHE_DIR\" --progress-spinner off\nstatus_json=$?\nset -e\n\nif [[ $status_json -ne 0 ]]; then\n  sdk::log \"WRN\" \"pip-audit вернул код $status_json — анализирую отчёт\"\nfi\n\npython3 - \"$REPORT\" \"$SARIF_REPORT\" <<'PY'\nimport json\nimport sys\nfrom pathlib import Path\n\nreport_path = Path(sys.argv[1])\nsarif_path = Path(sys.argv[2])\nraw = report_path.read_text(encoding=\"utf-8\")\nif not raw.strip():\n    data = {\"dependencies\": []"}
{"id": "scripts/scan-sbom.sh:37-71", "path": "scripts/scan-sbom.sh", "start": 1000, "end": 2200, "start_line": 37, "end_line": 71, "weights": {"vuln": 0.29204061556288113, "vuln_id": 0.18182183551467748, "references": 0.16560514904591583, "get": 0.15127136361526392, "entry": 0.1464486464861627, "vulns": 0.14602030778144057, "or": 0.14010750078757114, "description": 0.1286797265124022, "data": 0.12255279718639213, "raw": 0.1054310674900495, "dep_name": 0.09091091775733874, "help_uri": 0.09091091775733874, "rules": 0.08634453565492951, "report_path": 0.07990858155797452, "dependencies": 0.07798578587026757, "severity": 0.07746174537024025, "unknown": 0.07347262746101953, "sys": 0.06503941774186546, "else": 0.0578940703025717, "argv": 0.053337527056836885, "path": 0.05171523231483159, "text": 0.051467955062291106, "son": 0.04867343592714686, "vulnerabilities": 0.04867343592714686, "vulnerability": 0.04867343592714686, "reported": 0.04867343592714686, "import": 0.04792599393031952, "dep_version": 0.04545545887866937, "links": 0.04545545887866937, "rule": 0.04545545887866937, "shortdescription": 0.04545545887866937, "fulldescription": 0.04545545887866937, "helpuri": 0.04545545887866937, "properties": 0.04545545887866937, "problem": 0.04545545887866937, "name": 0.04503200096533612, "if": 0.044060977728801735, "error": 0.04317226782746476, "sarif_path": 0.04140128726147896, "in": 0.040383366487080394, "120": 0.03995429077898726, "lower": 0.03590011916179686, "by": 0.034453122679305156, "results": 0.03381786309459455, "id": 0.03303282506376508, "not": 0.03209490575630466, "loads": 0.03123514563082766, "pip": 0.03039895106211475, "isinstance": 0.02895195457962305, "version": 0.02862797049612896, "pathlib": 0.026187615736224513, "read_text": 0.025733977531145553, "strip": 0.024510559437278426, "audit": 0.023788561197550438, "encoding": 0.020015357255367305, "utf": 0.017705398867030635, "dict": 0.017625634296764753, "none": 0.017625634296764753, "json": 0.01637957279827535}, "norm": 0.6243735439212444, "snippet": "son import sys from pathlib import Path report_path = Path(sys.argv[1]) sarif_path = Path(sys.argv[2]) raw = report_path.read_text(encoding=\"utf-8\") if not raw.strip(): data = {\"dependencies\": []} else: data = json.loads(raw) dependencies = data.get(\"dependencies\", []) if isinstance(data, dict) else data results = []…", "text": "son\nimport sys\nfrom pathlib import Path\n\nreport_path = Path(sys.argv[1])\nsarif_path = Path(sys.argv[2])\nraw = report_path.read_text(encoding=\"utf-8\")\nif not raw.strip():\n    data = {\"dependencies\": []}\nelse:\n    data = json.loads(raw)\n\ndependencies = data.get(\"dependencies\", []) if isinstance(data, dict) else data\nresults = []\nrules = {}\n\nfor entry in dependencies:\n    vulns = entry.get(\"vulns\") or entry.get(\"vulnerabilities\") or []\n    dep_name = entry.get(\"name\", \"unknown\")\n    dep_version = entry.get(\"version\", \"\")\n    for vuln in vulns:\n        vuln_id = vuln.get(\"id\") or f\"{dep_name}-unknown\"\n        description = vuln.get(\"description\") or \"Vulnerability reported by pip-audit\"\n        severity = (vuln.get(\"severity\") or \"error\").lower()\n        references = vuln.get(\"references\") or vuln.get(\"links\") or []\n        help_uri = references[0] if references else None\n\n        if vuln_id not in rules:\n            rule = {\n                \"id\": vuln_id,\n                \"name\": vuln_id,\n                \"shortDescription\": {\"text\": description[:120]},\n                \"fullDescription\": {\"text\": description},\n                \"helpUri\": help_uri,\n                \"properties\": {\"problem."}
{"id": "scripts/scan-sbom.sh:68-106", "path": "scripts/scan-sbom.sh", "start": 2000, "end": 3200, "start_line": 68, "end_line": 106, "weights": {"rules": 0.2235495512161874, "sarif": 0.2235495512161874, "results": 0.1751116746542019, "description": 0.16657855007427408, "message": 0.16657855007427408, "vuln_id": 0.1569147347592422, "https": 0.1569147347592422, "severity": 0.13370109474863387, "text": 0.1332526507777126, "pip": 0.10493884476236874, "json": 0.08481477421572715, "locations": 0.08401168392904801, "physicallocation": 0.08401168392904801, "artifactlocation": 0.08401168392904801, "uri": 0.08401168392904801, "schema": 0.08401168392904801, "schemastore": 0.08401168392904801, "driver": 0.08401168392904801, "informationuri": 0.08401168392904801, "pypa": 0.08401168392904801, "audit": 0.08211941673674945, "shortdescription": 0.0784573673796211, "fulldescription": 0.0784573673796211, "helpuri": 0.0784573673796211, "help_uri": 0.0784573673796211, "properties": 0.0784573673796211, "problem": 0.0784573673796211, "rule": 0.0784573673796211, "dep_name": 0.0784573673796211, "dep_version": 0.0784573673796211, "ruleid": 0.0784573673796211, "org": 0.0784573673796211, "level": 0.07451651707206246, "error": 0.07451651707206246, "com": 0.07145975609515547, "sarif_path": 0.07145975609515547, "120": 0.06896220052263555, "tool": 0.06685054737431693, "github": 0.06685054737431693, "runs": 0.05837055821806731, "requirements": 0.055526183358091355, "lock": 0.05317207024950698, "values": 0.05246942238118437, "version": 0.049412661404277386, "write_text": 0.04835840056679618, "indent": 0.04737951064923255, "ensure_ascii": 0.04520054222964779, "dumps": 0.044417550259237534, "name": 0.038863233709810624, "false": 0.0347334337840008, "encoding": 0.03454705498871617, "append": 0.03418173653553587, "list": 0.032648614395755254, "utf": 0.030560003523915892}, "norm": 0.7016913967449955, "snippet": "\"shortDescription\": {\"text\": description[:120]}, \"fullDescription\": {\"text\": description}, \"helpUri\": help_uri, \"properties\": {\"problem.severity\": severity} } rules[vuln_id] = rule message = f\"{dep_name} {dep_version}: {description}\" results.append({ \"ruleId\": vuln_id, \"level\": \"error\", \"message\": {\"text\": message},…", "text": "                \"shortDescription\": {\"text\": description[:120]},\n                \"fullDescription\": {\"text\": description},\n                \"helpUri\": help_uri,\n                \"properties\": {\"problem.severity\": severity}\n            }\n            rules[vuln_id] = rule\n\n        message = f\"{dep_name} {dep_version}: {description}\"\n        results.append({\n            \"ruleId\": vuln_id,\n            \"level\": \"error\",\n            \"message\": {\"text\": message},\n            \"locations\": [\n                {\n                    \"physicalLocation\": {\n                        \"artifactLocation\": {\"uri\": \"requirements.lock\"}\n                    }\n                }\n            ]\n        })\n\nsarif = {\n    \"$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [\n        {\n            \"tool\": {\n                \"driver\": {\n                    \"name\": \"pip-audit\",\n                    \"informationUri\": \"https://github.com/pypa/pip-audit\",\n                    \"rules\": list(rules.values())\n                }\n            },\n            \"results\": results\n        }\n    ]\n}\n\nsarif_path.write_text(json.dumps(sarif, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\""}
{"id": "scripts/scan-sbom.sh:98-116", "path": "scripts/scan-sbom.sh", "start": 3000, "end": 3419, "start_line": 98, "end_line": 116, "weights": {"results": 0.4869772285621615, "result": 0.2880226461069192, "print": 0.21971316260049728, "pip": 0.21887244764722621, "audit": 0.17127764062236314, "ruleid": 0.16363965196320973, "rules": 0.15542016417887314, "sarif": 0.15542016417887314, "sarif_path": 0.14904463414132427, "message": 0.11581175386116198, "values": 0.10943622382361311, "write_text": 0.1008618068964606, "indent": 0.09882012221125647, "exit": 0.09600754870230639, "ensure_ascii": 0.09427541665040826, "dumps": 0.09264231911212399, "text": 0.09264231911212399, "py": 0.0844228313277874, "sys": 0.07804730129023855, "false": 0.07244401903520169, "encoding": 0.0720552861193223, "list": 0.06809568145400381, "utf": 0.06373943592131029, "json": 0.058966462073791255, "in": 0.04846003978449648, "if": 0.03965487995592156}, "norm": 0.8144176114752291, "snippet": ": list(rules.values()) } }, \"results\": results } ] } sarif_path.write_text(json.dumps(sarif, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\") if results: print(\"pip-audit обнаружил уязвимости:\") for result in results: print(f\" - {result['ruleId']}: {result['message']['text']}\") sys.exit(1) print(\"pip-audit:…", "text": ": list(rules.values())\n                }\n            },\n            \"results\": results\n        }\n    ]\n}\n\nsarif_path.write_text(json.dumps(sarif, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n\nif results:\n    print(\"pip-audit обнаружил уязвимости:\")\n    for result in results:\n        print(f\"  - {result['ruleId']}: {result['message']['text']}\")\n    sys.exit(1)\n\nprint(\"pip-audit: уязвимости не найдены\")\nPY\n"}
{"id": "scripts/ship.sh:1-42", "path": "scripts/ship.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 42, "weights": {"messages": 0.24722537346959747, "step": 0.18764612212037227, "findings": 0.16650271690806584, "exit_code": 0.1481276944704403, "failed": 0.1404342434050399, "verify_report": 0.13236373223353606, "verify": 0.11004319374234797, "ship": 0.09557060794062042, "data": 0.08887281983013186, "names": 0.08824248815569072, "get": 0.08227420927563994, "sys": 0.07860879266642733, "sdk": 0.07458686626714219, "report_path": 0.07243511709571793, "steps": 0.07243511709571793, "if": 0.059910250293118916, "json": 0.059390681225401275, "append": 0.053854678426491776, "script_dir": 0.0488059410488533, "exit": 0.04834912524576581, "sdk_root": 0.047906367567107484, "reports": 0.047906367567107484, "pathlib": 0.04747682852898258, "sh": 0.04478313727591572, "join": 0.04409784160700558, "py": 0.04251509491327424, "quality_guard": 0.03621755854785896, "run_command_group": 0.03621755854785896, "load_commands": 0.03414790335036413, "quality": 0.033300543381613174, "fail": 0.03254255406033385, "utf": 0.03209899650713468, "sc1091": 0.02916123298662352, "common": 0.02916123298662352, "die": 0.02916123298662352, "loads": 0.028313873017872557, "disable": 0.02755588369659323, "source": 0.02655040209677195, "shellcheck": 0.02624421782037773, "agentcall": 0.025668371002582506, "lib": 0.025135220123778754, "lc_all": 0.024638868530347448, "in": 0.024404336582120528, "eeuo": 0.024174562622882905, "pipefail": 0.024174562622882905, "argv": 0.024174562622882905, "dirname": 0.023953183783553742, "bash_source": 0.023953183783553742, "cd": 0.02373841426449129, "inf": 0.02373841426449129, "bash": 0.023529870833748464, "pwd": 0.023529870833748464, "ifs": 0.023327202654131945, "read_text": 0.023327202654131945, "len": 0.02256921333285262, "set": 0.02204892080350279, "import": 0.021721853364101658, "fi": 0.02125754745663712, "usr": 0.020821399098245503, "log": 0.020681700638841893, "scripts": 0.02041018748788616, "name": 0.02041018748788616, "env": 0.01965219816660683, "python3": 0.01965219816660683}, "norm": 0.549642257996003, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::log \"INF\" \"Запуск agentcall verify перед ship\" \"$SDK_ROOT/scripts/verify.sh\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\n\nsdk::log \"INF\" \"Запуск agentcall verify перед ship\"\n\"$SDK_ROOT/scripts/verify.sh\"\n\nVERIFY_REPORT=\"$SDK_ROOT/reports/verify.json\"\nif [[ ! -f \"$VERIFY_REPORT\" ]]; then\n  sdk::die \"ship: отсутствует reports/verify.json после verify\"\nfi\n\npython3 <<'PY' \"$VERIFY_REPORT\"\nimport json, sys, pathlib\n\nreport_path = pathlib.Path(sys.argv[1])\ndata = json.loads(report_path.read_text(encoding=\"utf-8\"))\nexit_code = int(data.get(\"exit_code\", 0))\nfindings = len(data.get(\"quality\", {}).get(\"findings\", []))\nfailed = [step for step in data.get(\"steps\", []) if step.get(\"status\") == \"fail\"]\nmessages: list[str] = []\nif exit_code != 0:\n    messages.append(f\"verify exit_code={exit_code}\")\nif failed:\n    names = \", \".join(step.get(\"name\", \"?\") for step in failed)\n    messages.append(f\"failed steps: {names}\")\nif findings:\n    messages.append(f\"quality_guard findings: {findings}\")\nif messages:\n    print(\"ship: блокировано — \" + \"; \".join(messages))\n    sys.exit(1)\nsys.exit(0)\nPY\n\nsdk::run_command_group "}
{"id": "scripts/ship.sh:33-43", "path": "scripts/ship.sh", "start": 1000, "end": 1225, "start_line": 33, "end_line": 43, "weights": {"messages": 0.7810074298244101, "findings": 0.6311966631878496, "ship": 0.4025549849620072, "exit": 0.3054785640527931, "sys": 0.24833232228712268, "quality_guard": 0.22882911991601798, "run_command_group": 0.22882911991601798, "sdk_ship_commands": 0.21575266207730062, "join": 0.13930909053122217, "py": 0.1343090498396618, "if": 0.12617461804156863, "sdk": 0.11781334558105412, "print": 0.11651455592450613, "append": 0.11342121668609631}, "norm": 1.2531477024470044, "snippet": "}\") if findings: messages.append(f\"quality_guard findings: {findings}\") if messages: print(\"ship: блокировано — \" + \"; \".join(messages)) sys.exit(1) sys.exit(0) PY sdk::run_command_group \"ship\" SDK_SHIP_COMMANDS", "text": "}\")\nif findings:\n    messages.append(f\"quality_guard findings: {findings}\")\nif messages:\n    print(\"ship: блокировано — \" + \"; \".join(messages))\n    sys.exit(1)\nsys.exit(0)\nPY\n\nsdk::run_command_group \"ship\" SDK_SHIP_COMMANDS\n"}
{"id": "scripts/verify.sh:1-52", "path": "scripts/verify.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 52, "weights": {"time": 0.23415072735592538, "start_ts": 0.21084130799459536, "severity": 0.18915077357849366, "duration": 0.17940990426528025, "local": 0.17588268230962917, "exit_code": 0.1596104614836527, "log_file": 0.14718011056436012, "name": 0.13195423538679887, "report_dir": 0.1134904641470962, "py": 0.09162167741000184, "verify_steps": 0.08433652319783815, "sdk": 0.0803687938847501, "record_step": 0.07805024245197512, "overall_exit": 0.07566030943139747, "set": 0.07127441841132298, "log": 0.06685479973951215, "log_path": 0.0649138415157394, "cmd": 0.061903670749212936, "script_dir": 0.05258934733171014, "os": 0.04788109285421832, "import": 0.04681143593194, "python3": 0.04235124876214495, "verify_json": 0.04216826159891907, "6f": 0.04216826159891907, "status": 0.04057199400920901, "critical": 0.04043846662749108, "run_step": 0.04043846662749108, "eval": 0.04043846662749108, "print": 0.039741398919986584, "declare": 0.03902512122598756, "then": 0.037134624938560255, "load_commands": 0.03679502764109003, "fail": 0.03506523266966205, "mktemp": 0.03506523266966205, "success": 0.034326394066527745, "ok": 0.03192209229673054, "sc1091": 0.031421793683261, "common": 0.031421793683261, "eq": 0.030951835374606468, "float": 0.030508746895227017, "disable": 0.029691998711833017, "source": 0.028608572801948066, "shellcheck": 0.028278653310329492, "lib": 0.027083686800040672, "lc_all": 0.02654885833890151, "eeuo": 0.026048559725431967, "pipefail": 0.026048559725431967, "dirname": 0.02581001973576721, "bash_source": 0.02581001973576721, "sdk_root": 0.02581001973576721, "reports": 0.02581001973576721, "mkdir": 0.02581001973576721, "environ": 0.02581001973576721, "cd": 0.02557860141677743, "inf": 0.02557860141677743, "bash": 0.025353891828612685, "pwd": 0.025353891828612685, "ifs": 0.025135512937397984, "sh": 0.024127349152528236, "fi": 0.02290541935250046, "run": 0.02274557991682034, "usr": 0.022435461043845927, "if": 0.021518151914065965, "env": 0.021175624381072476}, "norm": 0.6132311195867924, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" VERIFY_JSON=\"$REPORT_DIR/verify.json\" declare -a…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\n\nREPORT_DIR=\"$SDK_ROOT/reports\"\nmkdir -p \"$REPORT_DIR\"\nVERIFY_JSON=\"$REPORT_DIR/verify.json\"\n\ndeclare -a VERIFY_STEPS\nOVERALL_EXIT=0\n\nrecord_step() {\n  local name=\"$1\" status=\"$2\" exit_code=\"$3\" log_path=\"$4\" severity=\"$5\" duration=\"$6\"\n  VERIFY_STEPS+=(\"$name|$status|$exit_code|$log_path|$severity|$duration\")\n  if [[ $status == \"fail\" && $severity == \"critical\" ]]; then\n    OVERALL_EXIT=1\n  fi\n}\n\nrun_step() {\n  local name=\"$1\" severity=\"$2\" cmd=\"$3\"\n  local log_file\n  log_file=\"$(mktemp)\"\n  sdk::log \"RUN\" \"$name\"\n  local start_ts\n  start_ts=$(python3 - <<'PY'\nimport time\nprint(time.time())\nPY\n)\n  set +e\n  eval \"$cmd\" >\"$log_file\" 2>&1\n  local exit_code=$?\n  set -e\n  local duration\n  duration=$(START_TS=\"$start_ts\" python3 - <<'PY'\nimport os, time\nprint(f\"{time.time()-float(os.environ['START_TS']):.6f}\")\nPY\n)\n  if [[ $exit_code -eq 0 ]]; then\n    sdk::log \"INF\" \"$name: success\"\n    record_step \"$name\" \"ok\" \"$exit_code\" \"$log_file\" \"$severity\" \"$duration\"\n  else\n    sdk::log \"W"}
{"id": "scripts/verify.sh:45-76", "path": "scripts/verify.sh", "start": 1000, "end": 2200, "start_line": 45, "end_line": 76, "weights": {"run_step": 0.3696776358623397, "critical": 0.3286023429887464, "ensure": 0.2053764643679665, "sdk": 0.14286027731875853, "exit_code": 0.12969920964655876, "ensure_file": 0.12849698613213922, "sync": 0.10786780238482818, "sdk_root": 0.10486590695792032, "md": 0.1043942062001895, "machine": 0.09727440723491906, "name": 0.08935483656113939, "architecture": 0.0882093989494583, "integrity": 0.08566465742142614, "file": 0.08170167584395219, "record_step": 0.07927938012838417, "severity": 0.07685181036732498, "log_file": 0.07474895379056085, "duration": 0.07289410283534221, "scripts": 0.06701612742085454, "roadmap": 0.056805106811216526, "check": 0.05446778389596813, "board": 0.05196282807502817, "sh": 0.04901461481379752, "data": 0.04863512581255247, "iron": 0.048290180526145705, "py": 0.046532269235788334, "fi": 0.046532269235788334, "agents": 0.04588940318035125, "log": 0.04527175415431532, "codexignore": 0.04509754187962473, "ensure_codexignore": 0.04509754187962473, "todo_sections": 0.04509754187962473, "start_ts": 0.04283232871071307, "6f": 0.04283232871071307, "warning": 0.04283232871071307, "editorconfig": 0.04283232871071307, "ensure_editorconfig": 0.04283232871071307, "grep": 0.04283232871071307, "tasks": 0.04250182239898203, "120": 0.03963969006419209, "else": 0.03829214098752774, "then": 0.03771942218168719, "collect_log_tail": 0.03737447689528042, "tail": 0.03737447689528042, "fail": 0.03561744105816067, "success": 0.034866967201433695, "json": 0.0325011995682314, "ok": 0.03242480241163969, "eq": 0.03143926585294673, "local": 0.029775414721708877, "printf": 0.029775414721708877, "wrn": 0.029409115386001057, "exit": 0.026458773264415147, "inf": 0.025981414037514083, "program": 0.024701737427295388, "if": 0.021857020448145744}, "norm": 0.7086948146021604, "snippet": "iron['START_TS']):.6f}\") PY ) if [[ $exit_code -eq 0 ]]; then sdk::log \"INF\" \"$name: success\" record_step \"$name\" \"ok\" \"$exit_code\" \"$log_file\" \"$severity\" \"$duration\" else sdk::log \"WRN\" \"$name: exit $exit_code\" record_step \"$name\" \"fail\" \"$exit_code\" \"$log_file\" \"$severity\" \"$duration\" fi } collect_log_tail() {…", "text": "iron['START_TS']):.6f}\")\nPY\n)\n  if [[ $exit_code -eq 0 ]]; then\n    sdk::log \"INF\" \"$name: success\"\n    record_step \"$name\" \"ok\" \"$exit_code\" \"$log_file\" \"$severity\" \"$duration\"\n  else\n    sdk::log \"WRN\" \"$name: exit $exit_code\"\n    record_step \"$name\" \"fail\" \"$exit_code\" \"$log_file\" \"$severity\" \"$duration\"\n  fi\n}\n\ncollect_log_tail() {\n  local file=\"$1\"\n  if [[ -f \"$file\" ]]; then\n    tail -n 120 \"$file\"\n  else\n    printf \"\"\n  fi\n}\n\nrun_step \"sync-architecture\" \"critical\" \"\\\"$SDK_ROOT/scripts/sync-architecture.sh\\\"\"\nrun_step \"architecture-integrity\" \"critical\" \"\\\"$SDK_ROOT/scripts/check-architecture-integrity.py\\\"\"\nrun_step \"sync-roadmap\" \"warning\" \"\\\"$SDK_ROOT/scripts/sync-roadmap.sh\\\"\"\n\nrun_step \"ensure:AGENTS.md\" \"critical\" \"( sdk::ensure_file 'AGENTS.md' )\"\nrun_step \"ensure:todo.machine.md\" \"critical\" \"( sdk::ensure_file 'todo.machine.md' )\"\nrun_step \"ensure:.editorconfig\" \"critical\" \"( sdk::ensure_editorconfig )\"\nrun_step \"ensure:.codexignore\" \"critical\" \"( sdk::ensure_codexignore )\"\nrun_step \"ensure:data/tasks.board.json\" \"critical\" \"( sdk::ensure_file 'data/tasks.board.json' )\"\n\nrun_step \"check:todo_sections\" \"critical\" \"grep -q '^## Program' \\\"$SDK_ROOT/todo.machine.md\\\" &&"}
{"id": "scripts/verify.sh:73-103", "path": "scripts/verify.sh", "start": 2000, "end": 3200, "start_line": 73, "end_line": 103, "weights": {"run_step": 0.24263079976494648, "rev": 0.21084130799459536, "parse": 0.2021923331374554, "head": 0.19512560612993782, "git": 0.1830524813713621, "warning": 0.1686730463956763, "sdk_root": 0.15486011841460326, "base_ref": 0.13319506555144978, "grep": 0.1265047847967572, "machine": 0.09576627689019164, "base_ref_default": 0.08433652319783815, "determine_base_commit": 0.08433652319783815, "critical": 0.08087693325498216, "validate": 0.08087693325498216, "dev": 0.07354508049420473, "sh": 0.07238204745758471, "fi": 0.06871625805750138, "null": 0.06730638313153778, "scripts": 0.06597711769339944, "tasks": 0.06276431912407811, "md": 0.061665414825228214, "verify": 0.05928683693870685, "roadmap": 0.05592440748081007, "then": 0.055701937407840386, "check": 0.053623322130139164, "board": 0.05115720283355486, "data": 0.04788109285421832, "heart_check": 0.047541495556748095, "guard": 0.047541495556748095, "verify_base_ref": 0.047541495556748095, "qual": 0.047541495556748095, "todo_sections": 0.044398355183816594, "run_shellcheck_if_available": 0.044398355183816594, "verify_base_commit": 0.044398355183816594, "ensure_file": 0.04216826159891907, "merge": 0.04216826159891907, "ensure": 0.04043846662749108, "origin": 0.04043846662749108, "sdk": 0.04018439694237505, "return": 0.039170617462274196, "quality": 0.03588198085305605, "base_commit": 0.03588198085305605, "compact": 0.034326394066527745, "if": 0.03227722787109895, "json": 0.031997305001282075, "heart": 0.03192209229673054, "diff": 0.031421793683261, "task": 0.02989395825472153, "base": 0.029691998711833017, "local": 0.029313780384938197, "printf": 0.029313780384938197, "shellcheck": 0.028278653310329492, "status": 0.027047996006139337, "epics": 0.025353891828612685, "big": 0.025135512937397984, "main": 0.025135512937397984, "program": 0.024318764754003984, "agents": 0.022588969782576004, "true": 0.01811909874145977}, "norm": 0.6550462587343097, "snippet": ")\" run_step \"ensure:data/tasks.board.json\" \"critical\" \"( sdk::ensure_file 'data/tasks.board.json' )\" run_step \"check:todo_sections\" \"critical\" \"grep -q '^## Program' \\\"$SDK_ROOT/todo.machine.md\\\" && grep -q '^## Epics' \\\"$SDK_ROOT/todo.machine.md\\\" && grep -q '^## Big Tasks' \\\"$SDK_ROOT/todo.machine.md\\\"\" run_step…", "text": " )\"\nrun_step \"ensure:data/tasks.board.json\" \"critical\" \"( sdk::ensure_file 'data/tasks.board.json' )\"\n\nrun_step \"check:todo_sections\" \"critical\" \"grep -q '^## Program' \\\"$SDK_ROOT/todo.machine.md\\\" && grep -q '^## Epics' \\\"$SDK_ROOT/todo.machine.md\\\" && grep -q '^## Big Tasks' \\\"$SDK_ROOT/todo.machine.md\\\"\"\n\nrun_step \"shellcheck\" \"warning\" \"sdk::run_shellcheck_if_available\"\nrun_step \"roadmap-status\" \"warning\" \"\\\"$SDK_ROOT/scripts/roadmap-status.sh\\\" compact\"\nrun_step \"task-validate\" \"warning\" \"\\\"$SDK_ROOT/scripts/task.sh\\\" validate\"\nrun_step \"heart-check\" \"warning\" \"\\\"$SDK_ROOT/scripts/agents/heart_check.sh\\\"\"\n\n# quality guard (diff против базового коммита)\nBASE_REF_DEFAULT=\"${VERIFY_BASE_REF:-origin/main}\"\ndetermine_base_commit() {\n  local base_ref=\"$1\"\n  if git rev-parse --verify HEAD >/dev/null 2>&1; then\n    if git rev-parse --verify \"$base_ref\" >/dev/null 2>&1; then\n      git merge-base HEAD \"$base_ref\"\n      return 0\n    fi\n    if git rev-parse --verify HEAD^ >/dev/null 2>&1; then\n      git rev-parse HEAD^\n      return 0\n    fi\n    git rev-parse HEAD\n    return 0\n  fi\n  printf \"\"\n}\n\nBASE_COMMIT=\"${VERIFY_BASE_COMMIT:-$(determine_base_commit \"$BASE_REF_DEFAULT\")}\" || true\nQUAL"}
{"id": "scripts/verify.sh:92-129", "path": "scripts/verify.sh", "start": 3000, "end": 4200, "start_line": 92, "end_line": 129, "weights": {"run_step": 0.1879842232413099, "idx": 0.1564358002736018, "quality_guard": 0.13606055778790258, "sdk_verify_commands": 0.12828536664055715, "base_commit": 0.1251020413525468, "fi": 0.10647924671973186, "rev": 0.09801271614883891, "warning": 0.09801271614883891, "scan": 0.09801271614883891, "parse": 0.09399211162065495, "critical": 0.09399211162065495, "exit_on_fail": 0.09399211162065495, "head": 0.09070703852526839, "quality_json": 0.08792954879865111, "do": 0.08792954879865111, "sbom": 0.0797856726951726, "scripts": 0.07667610975178854, "log_path": 0.07544041041018362, "cmd": 0.0719421038436799, "git": 0.07091222251323037, "lock": 0.06993803834619837, "entry": 0.06649560164777119, "check": 0.06231899598908065, "sdk_root": 0.0599908566831346, "sh": 0.05607978451668725, "json": 0.05577908574547822, "verify_quality": 0.055250927268653195, "log": 0.051797412410793206, "verify_base_commit": 0.05159808845686793, "python3": 0.04921901883168197, "determine_base_commit": 0.04900635807441946, "base_ref_default": 0.04900635807441946, "verify_cmd": 0.04900635807441946, "verify_steps": 0.04900635807441946, "untracked": 0.046996055810327474, "steps_json": 0.046996055810327474, "log_content": 0.046996055810327474, "sdk": 0.04670078563573316, "declare": 0.045353519262634194, "read": 0.045353519262634194, "report_dir": 0.04396477439932556, "include": 0.04396477439932556, "severity": 0.04396477439932556, "else": 0.04381172887762183, "then": 0.043156456009678136, "collect_log_tail": 0.04276178888018571, "duration": 0.041700680450848925, "exit_code": 0.03709864780430847, "eq": 0.03597105192183995, "output": 0.035456111256615186, "base": 0.03450691742185999, "printf": 0.034067366393306556, "wrn": 0.03364826715335256, "done": 0.03249661515776801, "lib": 0.03147563601085808, "in": 0.030560385449682464, "return": 0.03034840632212235, "inf": 0.029726482727606206, "ifs": 0.02921154206238144, "import": 0.02720123979828946, "name": 0.025558703250596178, "if": 0.02500758195418477, "sys": 0.024609509415840985, "print": 0.023092975048100314}, "norm": 0.5609611086457353, "snippet": "n git rev-parse HEAD^ return 0 fi git rev-parse HEAD return 0 fi printf \"\" } BASE_COMMIT=\"${VERIFY_BASE_COMMIT:-$(determine_base_commit \"$BASE_REF_DEFAULT\")}\" || true QUALITY_JSON=\"$REPORT_DIR/verify_quality.json\" if [[ -n \"$BASE_COMMIT\" ]]; then run_step \"quality_guard\" \"warning\" \"python3 -m scripts.lib.quality_guard…", "text": "n\n      git rev-parse HEAD^\n      return 0\n    fi\n    git rev-parse HEAD\n    return 0\n  fi\n  printf \"\"\n}\n\nBASE_COMMIT=\"${VERIFY_BASE_COMMIT:-$(determine_base_commit \"$BASE_REF_DEFAULT\")}\" || true\nQUALITY_JSON=\"$REPORT_DIR/verify_quality.json\"\nif [[ -n \"$BASE_COMMIT\" ]]; then\nrun_step \"quality_guard\" \"warning\" \"python3 -m scripts.lib.quality_guard --base \\\"$BASE_COMMIT\\\" --include-untracked --output \\\"$QUALITY_JSON\\\"\"\n\nrun_step \"check-lock\" \"critical\" \"\\\"$SDK_ROOT/scripts/check-lock.sh\\\"\"\nrun_step \"scan-sbom\" \"critical\" \"\\\"$SDK_ROOT/scripts/scan-sbom.sh\\\"\"\nelse\n  sdk::log \"WRN\" \"Не удалось определить базовый коммит для quality_guard\"\nfi\n\n# кастомные команды верификации (не прерывают скрипт)\nif [[ ${#SDK_VERIFY_COMMANDS[@]} -eq 0 ]]; then\n  sdk::log \"INF\" \"SDK_VERIFY_COMMANDS пуст — пропуск\"\nelse\n  idx=0\n  for cmd in \"${SDK_VERIFY_COMMANDS[@]}\"; do\n    idx=$((idx + 1))\n    run_step \"verify_cmd[$idx]\" \"warning\" \"$cmd\"\n  done\nfi\n\nEXIT_ON_FAIL=${EXIT_ON_FAIL:-0}\n\ndeclare -a steps_json\nfor entry in \"${VERIFY_STEPS[@]}\"; do\n  IFS='|' read -r name status exit_code log_path severity duration <<<\"$entry\"\n  LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json."}
{"id": "scripts/verify.sh:127-155", "path": "scripts/verify.sh", "start": 4000, "end": 5200, "start_line": 127, "end_line": 155, "weights": {"quality_json": 0.16684068233590213, "json": 0.158755859429438, "quality_report": 0.14685609791570103, "exit_code": 0.14078461218045268, "sys": 0.14008489975171023, "printf": 0.12928128785152232, "severity": 0.12513051175192658, "verify_output": 0.10483509276616249, "verify_json": 0.09298642301300103, "log_content": 0.08917200333241623, "steps_json": 0.08917200333241623, "findings_count": 0.08917200333241623, "read": 0.08605539552397258, "duration": 0.07912436803494412, "import": 0.07741891327205462, "name": 0.07274400155938912, "log_path": 0.0715716714147896, "python3": 0.07004244987585512, "load": 0.06825276518502965, "print": 0.0657261597522855, "open": 0.060989804604426816, "argv": 0.057440413753516655, "ifs": 0.055427028528621206, "dumps": 0.055427028528621206, "dev": 0.05405877711539836, "data": 0.0527919741725997, "ntry": 0.05241754638308124, "null": 0.04947306794283974, "duration_sec": 0.04895203263856702, "log_tail": 0.04895203263856702, "verify_steps": 0.046493211506500515, "status": 0.04473322416399967, "has_findings": 0.04458600166620812, "encoding": 0.04311000024232959, "stdin": 0.04302769776198629, "steps": 0.04302769776198629, "do": 0.04171017058397553, "overall_exit": 0.04171017058397553, "then": 0.040943304419438234, "collect_log_tail": 0.04056887662991978, "base_commit": 0.03956218401747206, "quality": 0.03956218401747206, "findings": 0.03956218401747206, "sz": 0.038661666789627396, "utf": 0.03813470525206599, "cat": 0.03641923717879414, "if": 0.03558771278095525, "dt": 0.034126382592514826, "base": 0.03273733191304666, "entry": 0.031542785397019664, "date": 0.031542785397019664, "generated_at": 0.031179028008824827, "done": 0.030830122072754273, "inf": 0.028202047715934094, "len": 0.026812997036465936, "fi": 0.0252546931322441, "log": 0.024570567425632676, "sdk": 0.022152936775924708, "get": 0.01629076223548996, "in": 0.014496593097926298}, "norm": 0.5489571160912676, "snippet": "ntry in \"${VERIFY_STEPS[@]}\"; do IFS='|' read -r name status exit_code log_path severity duration <<<\"$entry\" LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')\"…", "text": "ntry in \"${VERIFY_STEPS[@]}\"; do\n  IFS='|' read -r name status exit_code log_path severity duration <<<\"$entry\"\n  LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')\"\n  steps_json+=(\"{\\\"name\\\":\\\"$name\\\",\\\"status\\\":\\\"$status\\\",\\\"severity\\\":\\\"$severity\\\",\\\"exit_code\\\":$exit_code,\\\"duration_sec\\\":$duration,\\\"log_tail\\\":$LOG_CONTENT}\")\ndone\n\nQUALITY_REPORT=\"{}\"\nif [[ -f \"$QUALITY_JSON\" ]]; then\n  QUALITY_REPORT=$(python3 -c 'import json,sys; print(json.dumps(json.load(open(sys.argv[1],encoding=\"utf-8\"))))' \"$QUALITY_JSON\" 2>/dev/null || printf '{}')\nfi\n\nVERIFY_OUTPUT=$(cat <<JSON\n{\n  \"generated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"base\": \"$BASE_COMMIT\",\n  \"steps\": [$(IFS=,; printf '%s' \"${steps_json[*]}\")],\n  \"quality\": $QUALITY_REPORT,\n  \"exit_code\": $OVERALL_EXIT\n}\nJSON\n)\n\nprintf '%s\\n' \"$VERIFY_OUTPUT\" >\"$VERIFY_JSON\"\nsdk::log \"INF\" \"Отчёт сохранён: $VERIFY_JSON\"\n\nHAS_FINDINGS=0\nif [[ -f \"$QUALITY_JSON\" ]]; then\n  FINDINGS_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0)\n  if [[ ${FINDINGS_COUNT:-0} -g"}
{"id": "scripts/verify.sh:154-179", "path": "scripts/verify.sh", "start": 5000, "end": 5798, "start_line": 154, "end_line": 179, "weights": {"fi": 0.24286019971007336, "has_findings": 0.2143792682854664, "overall_exit": 0.2005516421229508, "sdk": 0.1775269590947391, "then": 0.16405365126966687, "log": 0.1575208980163848, "findings_count": 0.14291951219031093, "exit": 0.1380930495033174, "ne": 0.13004270043015378, "eq": 0.10939141817326668, "wrn": 0.10232760695951053, "if": 0.0950630683874832, "data": 0.08461179422183786, "s_count": 0.08401168392904801, "gt": 0.0784573673796211, "sys": 0.07483987794954382, "verify_json": 0.07451651707206246, "exit_on_fail": 0.07145975609515547, "quality_guard": 0.06896220052263555, "err": 0.06896220052263555, "quality_json": 0.06685054737431693, "findings": 0.06340788397320864, "json": 0.05654318281048477, "die": 0.055526183358091355, "load": 0.05469570908663334, "printf": 0.05180106396790448, "open": 0.04887539136108175, "argv": 0.046031016501105804, "inf": 0.04520054222964779, "dev": 0.04332107481165484, "len": 0.04297425552419882, "import": 0.04136078928233055, "null": 0.03964622568022089, "python3": 0.03741993897477191, "print": 0.03511397575807034, "verify": 0.034922383402251976, "encoding": 0.03454705498871617, "else": 0.03330891716038372, "utf": 0.030560003523915892, "get": 0.026109851802086647}, "norm": 0.6357683977594936, "snippet": "S_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0) if [[ ${FINDINGS_COUNT:-0} -gt 0 ]]; then sdk::log \"WRN\" \"quality_guard: обнаружено $FINDINGS_COUNT потенциальных проблем\" HAS_FINDINGS=1 fi fi if [[…", "text": "S_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0)\n  if [[ ${FINDINGS_COUNT:-0} -gt 0 ]]; then\n    sdk::log \"WRN\" \"quality_guard: обнаружено $FINDINGS_COUNT потенциальных проблем\"\n    HAS_FINDINGS=1\n  fi\nfi\n\nif [[ $EXIT_ON_FAIL == 1 ]]; then\n  if [[ $OVERALL_EXIT -ne 0 || $HAS_FINDINGS -eq 1 ]]; then\n    sdk::die \"verify: обнаружены критичные ошибки — см. $VERIFY_JSON\"\n  fi\nelse\n  if [[ $OVERALL_EXIT -ne 0 ]]; then\n    sdk::log \"ERR\" \"Верификация завершена с ошибками\"\n    exit $OVERALL_EXIT\n  fi\nfi\n\nif [[ $HAS_FINDINGS -eq 1 ]]; then\n  sdk::log \"WRN\" \"Верификация завершена с предупреждениями\"\n  exit 0\nfi\n\nsdk::log \"INF\" \"Верификация завершена без критичных ошибок\"\nexit 0\n"}
{"id": "scripts/review.sh:1-47", "path": "scripts/review.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 47, "weights": {"head": 0.24758560515503583, "git": 0.22581474136385243, "rev": 0.22293876009264588, "parse": 0.2137935325797684, "report_dir": 0.16000294945328317, "base_ref": 0.14083740537817233, "base_commit": 0.1138223490994483, "fi": 0.09687865890073966, "base_ref_default": 0.08917550403705836, "determine_base_commit": 0.08917550403705836, "target_commit": 0.08917550403705836, "sdk": 0.08498011812403905, "then": 0.07853060027990612, "dev": 0.0777648801946919, "null": 0.07116822478662602, "diff": 0.06644936696951917, "base": 0.06279127596436819, "verify": 0.06268854069748511, "script_dir": 0.05560676889992302, "inf": 0.05409245217646375, "review_base_commit": 0.050269286285413974, "review_target_commit": 0.050269286285413974, "log": 0.04712715391473808, "review_changed_files_file": 0.04694580179272411, "review_changed_files": 0.04694580179272411, "review_base_ref": 0.04694580179272411, "mapfile": 0.04694580179272411, "if": 0.04550559994941819, "merge": 0.04458775201852918, "review_json": 0.04275870651595368, "origin": 0.04275870651595368, "return": 0.041418111906830916, "changed_files": 0.04126426752583931, "only": 0.04126426752583931, "load_commands": 0.03890621775164438, "txt": 0.03629594126706623, "sc1091": 0.033224683484759585, "common": 0.033224683484759585, "die": 0.033224683484759585, "disable": 0.031395637982184095, "local": 0.030995718603746128, "printf": 0.030995718603746128, "source": 0.030250048290584433, "shellcheck": 0.02990119899206971, "review": 0.029566592479608602, "lib": 0.028637668829551204, "lc_all": 0.028072153489494222, "eeuo": 0.027543149217874787, "pipefail": 0.027543149217874787, "dirname": 0.02729092250749156, "bash_source": 0.02729092250749156, "sdk_root": 0.02729092250749156, "reports": 0.02729092250749156, "mkdir": 0.02729092250749156, "cd": 0.027046226088231876, "bash": 0.02680862332697571, "pwd": 0.02680862332697571, "ifs": 0.02657771449937984, "main": 0.02657771449937984, "sh": 0.025511705251443792, "set": 0.025121311407269576, "usr": 0.023722741595542007, "name": 0.02325423000668997, "env": 0.022390619222609424}, "norm": 0.6293802089239403, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" REVIEW_JSON=\"$REPORT_DIR/review.json\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\n\nREPORT_DIR=\"$SDK_ROOT/reports\"\nmkdir -p \"$REPORT_DIR\"\nREVIEW_JSON=\"$REPORT_DIR/review.json\"\nREVIEW_CHANGED_FILES_FILE=\"$REPORT_DIR/review_changed_files.txt\"\n\nBASE_REF_DEFAULT=\"${REVIEW_BASE_REF:-origin/main}\"\n\ndetermine_base_commit() {\n  local base_ref=\"$1\"\n  if git rev-parse --verify HEAD >/dev/null 2>&1; then\n    if git rev-parse --verify \"$base_ref\" >/dev/null 2>&1; then\n      git merge-base HEAD \"$base_ref\"\n      return 0\n    fi\n    if git rev-parse --verify HEAD^ >/dev/null 2>&1; then\n      git rev-parse HEAD^\n      return 0\n    fi\n    git rev-parse HEAD\n    return 0\n  fi\n  printf \"\"\n}\n\nBASE_COMMIT=\"${REVIEW_BASE_COMMIT:-$(determine_base_commit \"$BASE_REF_DEFAULT\")}\" || true\nTARGET_COMMIT=\"${REVIEW_TARGET_COMMIT:-HEAD}\"\n\nif [[ -z \"$BASE_COMMIT\" ]]; then\n  sdk::die \"Не удалось определить базовый коммит для diff\"\nfi\n\nsdk::log \"INF\" \"Базовый коммит: $BASE_COMMIT\"\nsdk::log \"INF\" \"Целевой коммит: $TARGET_COMMIT\"\n\nmapfile -t CHANGED_FILES < <( \\\n  { git diff --name-only \"$BASE"}
{"id": "scripts/review.sh:40-76", "path": "scripts/review.sh", "start": 1000, "end": 2200, "start_line": 40, "end_line": 76, "weights": {"changed_files": 0.3020544382891437, "review_changed_files_file": 0.17182163456137023, "printf": 0.1512591067862811, "base_commit": 0.13886326590132692, "inf": 0.13198558331057156, "line": 0.11644683384642028, "log": 0.11499025555196092, "awk": 0.11454775637424681, "review_changed_files": 0.11454775637424681, "target_commit": 0.1087941149252112, "sdk": 0.10367574411132763, "export": 0.09493117131401228, "import": 0.09058012852830391, "path": 0.08688159028891708, "diff": 0.08106822770281338, "files": 0.08106822770281338, "git": 0.0787125669896857, "strip": 0.061766609781941643, "substr": 0.06132852926820505, "nf": 0.06132852926820505, "review_changed_files_path": 0.06132852926820505, "record_st": 0.06132852926820505, "fi": 0.05909598192945119, "py": 0.05909598192945119, "mapfile": 0.05727387818712341, "porcelain": 0.05727387818712341, "changed_json": 0.05727387818712341, "sys": 0.05463311090316699, "review_json": 0.052165621949463496, "print": 0.0512664046067827, "only": 0.05034240638152396, "steps": 0.05034240638152396, "quality": 0.04628775530044231, "sort": 0.04523415014386405, "sz": 0.04523415014386405, "json": 0.04127652345165388, "exit_code": 0.041179499062782406, "splitlines": 0.04053411385140669, "eq": 0.039927867633242346, "dt": 0.039927867633242346, "base": 0.03830267833826459, "target": 0.03830267833826459, "date": 0.036905058914513005, "generated_at": 0.036479462770325044, "exit": 0.03360264204580724, "argv": 0.03360264204580724, "pathlib": 0.03299639582764289, "read_text": 0.0324248116892434, "dumps": 0.0324248116892434, "name": 0.02837016060816176, "if": 0.027758415969145096, "python3": 0.027316555451583496, "encoding": 0.025219350141762808, "then": 0.023951833085371365, "true": 0.023373637376483104, "utf": 0.0223088025724586, "status": 0.017445957423959872, "in": 0.01696101392457377}, "norm": 0.6163238083780611, "snippet": "ь определить базовый коммит для diff\" fi sdk::log \"INF\" \"Базовый коммит: $BASE_COMMIT\" sdk::log \"INF\" \"Целевой коммит: $TARGET_COMMIT\" mapfile -t CHANGED_FILES < <( \\ { git diff --name-only \"$BASE_COMMIT\" || true; \\ git status --porcelain | awk '$1 == \"??\" {print substr($0,4)}'; \\ } | awk 'NF' | sort -u ) if [[…", "text": "ь определить базовый коммит для diff\"\nfi\n\nsdk::log \"INF\" \"Базовый коммит: $BASE_COMMIT\"\nsdk::log \"INF\" \"Целевой коммит: $TARGET_COMMIT\"\n\nmapfile -t CHANGED_FILES < <( \\\n  { git diff --name-only \"$BASE_COMMIT\" || true; \\\n    git status --porcelain | awk '$1 == \"??\" {print substr($0,4)}'; \\\n  } | awk 'NF' | sort -u\n)\n\nif [[ ${#CHANGED_FILES[@]} -eq 0 ]]; then\n  sdk::log \"INF\" \"Изменённых файлов нет — ревью пропущено\"\n  printf '%s\\n' >\"$REVIEW_JSON\" \"$(printf '{\"generated_at\":\"%s\",\"base\":\"%s\",\"target\":\"%s\",\"changed_files\":[],\"steps\":[],\"quality\":{},\"exit_code\":0}\\n' \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\" \"$BASE_COMMIT\" \"$TARGET_COMMIT\")\"\n  exit 0\nfi\n\nprintf \"%s\\n\" \"${CHANGED_FILES[@]}\" >\"$REVIEW_CHANGED_FILES_FILE\"\nREVIEW_CHANGED_FILES=\"$(printf '%s\\n' \"${CHANGED_FILES[@]}\")\"\nexport REVIEW_CHANGED_FILES\nexport REVIEW_CHANGED_FILES_PATH=\"$REVIEW_CHANGED_FILES_FILE\"\n\nsdk::log \"INF\" \"Изменённые файлы: ${#CHANGED_FILES[@]}\"\n\nCHANGED_JSON=$(\n  python3 - \"$REVIEW_CHANGED_FILES_FILE\" <<'PY'\nimport json\nimport sys\nfrom pathlib import Path\npath = Path(sys.argv[1])\nfiles = [line.strip() for line in path.read_text(encoding=\"utf-8\").splitlines() if line.strip()]\nprint(json.dumps(files))\nPY\n)\n\nrecord_st"}
{"id": "scripts/review.sh:67-121", "path": "scripts/review.sh", "start": 2000, "end": 3200, "start_line": 67, "end_line": 121, "weights": {"local": 0.3288241451875676, "exit_code": 0.2387217336972893, "time": 0.21888002774575632, "tmp_log": 0.20751405140262105, "duration": 0.20125111000192308, "start_ts": 0.1970907879079913, "name": 0.16446469917774934, "record_step": 0.10944001387287816, "py": 0.10705793827799127, "import": 0.08751703239449653, "cmd": 0.08679971224617901, "line": 0.0843817636568263, "file": 0.07518922342160818, "shift": 0.07296000924858544, "log_file": 0.06879070385073353, "path": 0.06295767412240368, "log": 0.06249470410432658, "files": 0.05874509253827057, "sdk": 0.056345513103982406, "print": 0.05572435283345945, "strip": 0.044758412885464956, "os": 0.044758412885464956, "set": 0.04441739118386794, "el": 0.04150281028052421, "sys": 0.03958921079939637, "python3": 0.03958921079939637, "review_steps": 0.039418157581598265, "run_command_capture": 0.039418157581598265, "6f": 0.039418157581598265, "eval": 0.03780117532569818, "120": 0.03648000462429272, "then": 0.03471280157300198, "collect_log_tail": 0.03439535192536677, "tail": 0.03439535192536677, "mktemp": 0.032778369669466706, "fail": 0.032778369669466706, "success": 0.032087716192623766, "if": 0.030172191270809886, "ok": 0.029840216712161163, "splitlines": 0.029372546269135286, "eq": 0.028933237415393002, "float": 0.02851904601075569, "wrn": 0.02706491053639228, "status": 0.025283996266608513, "argv": 0.024349740612903795, "exit": 0.024349740612903795, "environ": 0.02412675757908674, "pathlib": 0.023910431759161514, "inf": 0.023910431759161514, "read_text": 0.023496240354524203, "dumps": 0.023496240354524203, "fi": 0.021411587655598256, "run": 0.021262172530940752, "encoding": 0.018274891407074497, "else": 0.017619934439913127, "true": 0.01693741838875587, "utf": 0.01616579896554971, "json": 0.01495526212016445, "in": 0.012290589800415773}, "norm": 0.6919010180206673, "snippet": "n import sys from pathlib import Path path = Path(sys.argv[1]) files = [line.strip() for line in path.read_text(encoding=\"utf-8\").splitlines() if line.strip()] print(json.dumps(files)) PY ) record_step() { local name=\"$1\" local status=\"$2\" local exit_code=\"$3\" local log_file=\"$4\" local duration=\"$5\"…", "text": "n\nimport sys\nfrom pathlib import Path\npath = Path(sys.argv[1])\nfiles = [line.strip() for line in path.read_text(encoding=\"utf-8\").splitlines() if line.strip()]\nprint(json.dumps(files))\nPY\n)\n\nrecord_step() {\n  local name=\"$1\"\n  local status=\"$2\"\n  local exit_code=\"$3\"\n  local log_file=\"$4\"\n  local duration=\"$5\"\n  REVIEW_STEPS+=(\"$name|$status|$exit_code|$log_file|$duration\")\n}\n\nrun_command_capture() {\n  local name=\"$1\"; shift\n  local cmd=\"$1\"; shift || true\n  local tmp_log\n  tmp_log=\"$(mktemp)\"\n  local exit_code=0\n  sdk::log \"RUN\" \"$name: $cmd\"\n  local start_ts\n  start_ts=$(python3 - <<'PY'\nimport time\nprint(time.time())\nPY\n)\n  set +e\n  eval \"$cmd\" >\"$tmp_log\" 2>&1\n  exit_code=$?\n  set -e\n  local duration\n  duration=$(START_TS=\"$start_ts\" python3 - <<'PY'\nimport os, time\nprint(f\"{time.time()-float(os.environ['START_TS']):.6f}\")\nPY\n)\n  if [[ $exit_code -eq 0 ]]; then\n    sdk::log \"INF\" \"$name: success\"\n    record_step \"$name\" \"ok\" \"$exit_code\" \"$tmp_log\" \"$duration\"\n  else\n    sdk::log \"WRN\" \"$name: exit $exit_code\"\n    record_step \"$name\" \"fail\" \"$exit_code\" \"$tmp_log\" \"$duration\"\n  fi\n}\n\ncollect_log_tail() {\n  local file=\"$1\"\n  if [[ -f \"$file\" ]]; then\n    tail -n 120 \"$file\"\n  el"}
{"id": "scripts/review.sh:112-155", "path": "scripts/review.sh", "start": 3000, "end": 4200, "start_line": 112, "end_line": 155, "weights": {"local_index": 0.2756338394076631, "run_command_capture": 0.18336086785147954, "sdk_review_linters": 0.1644974143255664, "sdk_test_command": 0.1560261414621651, "fi": 0.13279995939202513, "file": 0.11658553744024638, "quality_guard": 0.11312900310454821, "inf": 0.111223806160594, "quality_json": 0.10966494288371093, "log": 0.09690190074603447, "exit_code": 0.09253820014108405, "cmd": 0.08972554524324122, "sdk": 0.08736720009381542, "else": 0.081962391664315, "then": 0.08073651601810572, "review_quality": 0.06890845985191578, "linters": 0.06890845985191578, "review_linter": 0.06890845985191578, "diff_": 0.06890845985191578, "tmp_log": 0.06435267212036337, "name": 0.06375316990598148, "review_steps": 0.06112028928382651, "scan": 0.06112028928382651, "realness": 0.0586130583701837, "untracked": 0.0586130583701837, "record_step": 0.056564501552274105, "120": 0.056564501552274105, "declare": 0.056564501552274105, "tests": 0.056564501552274105, "report_dir": 0.05483247144185546, "include": 0.05483247144185546, "do": 0.05483247144185546, "collect_log_tail": 0.05333211871573723, "tail": 0.05333211871573723, "duration": 0.05200871382072169, "quality": 0.05200871382072169, "base_commit": 0.05200871382072169, "fail": 0.05082488780209444, "coverage": 0.05082488780209444, "cover": 0.04877633098418483, "if": 0.046783847139008586, "secrets": 0.04554394814764797, "diff": 0.04554394814764797, "eq": 0.04486277262162061, "output": 0.044220543252632416, "base": 0.04303671723400516, "local": 0.04248851314221379, "printf": 0.04248851314221379, "wrn": 0.04196581633732735, "review": 0.04052948632036235, "done": 0.04052948632036235, "lib": 0.03925613030567693, "test": 0.03848092950245275, "exit": 0.0377557775795587, "scripts": 0.03187658495299074, "python3": 0.030692758934363476, "json": 0.023189058118906675, "in": 0.01905731901637502}, "norm": 0.6237985040135885, "snippet": "WRN\" \"$name: exit $exit_code\" record_step \"$name\" \"fail\" \"$exit_code\" \"$tmp_log\" \"$duration\" fi } collect_log_tail() { local file=\"$1\" if [[ -f \"$file\" ]]; then tail -n 120 \"$file\" else printf \"\" fi } declare -a REVIEW_STEPS # --- Quality scan ----------------------------------------------------------…", "text": "WRN\" \"$name: exit $exit_code\"\n    record_step \"$name\" \"fail\" \"$exit_code\" \"$tmp_log\" \"$duration\"\n  fi\n}\n\ncollect_log_tail() {\n  local file=\"$1\"\n  if [[ -f \"$file\" ]]; then\n    tail -n 120 \"$file\"\n  else\n    printf \"\"\n  fi\n}\n\ndeclare -a REVIEW_STEPS\n\n# --- Quality scan ----------------------------------------------------------\n\nQUALITY_JSON=\"$REPORT_DIR/review_quality.json\"\nsdk::log \"INF\" \"Сканирование realness/secrets\"\nrun_command_capture \"quality_guard\" \"python3 -m scripts.lib.quality_guard --base \\\"$BASE_COMMIT\\\" --include-untracked --output \\\"$QUALITY_JSON\\\"\"\n\n# --- Review linters -------------------------------------------------------\n\nif [[ ${#SDK_REVIEW_LINTERS[@]} -eq 0 ]]; then\n  sdk::log \"INF\" \"SDK_REVIEW_LINTERS пуст — шаг пропущен\"\nelse\n  local_index=0\n  for cmd in \"${SDK_REVIEW_LINTERS[@]}\"; do\n    local_index=$((local_index + 1))\n    run_command_capture \"review_linter[$local_index]\" \"$cmd\"\n  done\nfi\n\n# --- Tests / coverage -----------------------------------------------------\n\nif [[ -n \"${SDK_TEST_COMMAND:-}\" ]]; then\n  run_command_capture \"test\" \"$SDK_TEST_COMMAND\"\nelse\n  sdk::log \"INF\" \"SDK_TEST_COMMAND не задан — тесты пропущены\"\nfi\n\n# diff-cover (опционально)\nDIFF_"}
{"id": "scripts/review.sh:146-183", "path": "scripts/review.sh", "start": 4000, "end": 5200, "start_line": 146, "end_line": 183, "weights": {"diff_cover_status": 0.2503205276253267, "cover": 0.22148436008124744, "diff": 0.20680670332350354, "diff_cover_log": 0.18774039571899503, "exit_code": 0.16807958801135672, "sdk_coverage_file": 0.1493905089283205, "sdk_test_command": 0.1416972101033948, "fi": 0.120604044753982, "exit_on_fail": 0.10646045295808876, "steps_json": 0.10646045295808876, "read": 0.10273960486025296, "then": 0.09776258402192393, "name": 0.08684743043314824, "log_path": 0.08544781179112634, "entry": 0.07531644676431225, "else": 0.07443523324616362, "compare": 0.06258013190633167, "branch": 0.06258013190633167, "set": 0.06254693860585485, "log": 0.058668497730592295, "if": 0.05664982850845938, "sys": 0.055748072350170395, "run_command_capture": 0.05550720149245469, "review_steps": 0.05550720149245469, "status": 0.05340599211416287, "log_content": 0.05323022647904438, "sdk": 0.052895787811901844, "record_step": 0.05136980243012648, "declare": 0.05136980243012648, "stdin": 0.05136980243012648, "skipped": 0.049796836309440165, "overall_exit": 0.049796836309440165, "do": 0.049796836309440165, "collect_log_tail": 0.04843427107857769, "base_commit": 0.04723240336779827, "duration": 0.04723240336779827, "mktemp": 0.04615729606516739, "fail": 0.04615729606516739, "json": 0.04211890148127947, "ok": 0.04201989700283918, "eq": 0.04074272207473708, "wrn": 0.03811181279614422, "test": 0.03494696658896219, "inf": 0.033669791660860086, "ifs": 0.033086542540044284, "dumps": 0.033086542540044284, "dev": 0.032269780216844936, "import": 0.03080956752663398, "null": 0.02953239259853188, "python3": 0.027874036175085198, "command": 0.027057273851885846, "print": 0.02615632888101158, "in": 0.017307157065891598}, "norm": 0.6502970903909945, "snippet": "--- if [[ -n \"${SDK_TEST_COMMAND:-}\" ]]; then run_command_capture \"test\" \"$SDK_TEST_COMMAND\" else sdk::log \"INF\" \"SDK_TEST_COMMAND не задан — тесты пропущены\" fi # diff-cover (опционально) DIFF_COVER_STATUS=\"skipped\" if [[ -n \"${SDK_COVERAGE_FILE:-}\" && -f \"$SDK_COVERAGE_FILE\" ]]; then if command -v diff-cover…", "text": "---\n\nif [[ -n \"${SDK_TEST_COMMAND:-}\" ]]; then\n  run_command_capture \"test\" \"$SDK_TEST_COMMAND\"\nelse\n  sdk::log \"INF\" \"SDK_TEST_COMMAND не задан — тесты пропущены\"\nfi\n\n# diff-cover (опционально)\nDIFF_COVER_STATUS=\"skipped\"\nif [[ -n \"${SDK_COVERAGE_FILE:-}\" && -f \"$SDK_COVERAGE_FILE\" ]]; then\n  if command -v diff-cover >/dev/null 2>&1; then\n    DIFF_COVER_LOG=\"$(mktemp)\"\n    set +e\n    diff-cover \"$SDK_COVERAGE_FILE\" --compare-branch \"$BASE_COMMIT\" >\"$DIFF_COVER_LOG\" 2>&1\n    EXIT_CODE=$?\n    set -e\n    if [[ $EXIT_CODE -eq 0 ]]; then\n      DIFF_COVER_STATUS=\"ok\"\n    else\n      DIFF_COVER_STATUS=\"fail\"\n    fi\n    record_step \"diff-cover\" \"$DIFF_COVER_STATUS\" \"$EXIT_CODE\" \"$DIFF_COVER_LOG\"\n  else\n    sdk::log \"WRN\" \"diff-cover не найден — шаг пропущен\"\n  fi\nfi\n\n# --- Итоговый отчёт -------------------------------------------------------\n\nEXIT_ON_FAIL=${EXIT_ON_FAIL:-0}\nOVERALL_EXIT=0\n\ndeclare -a steps_json\nfor entry in \"${REVIEW_STEPS[@]}\"; do\n  IFS='|' read -r name status exit_code log_path duration <<<\"$entry\"\n  LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')\"\n  steps_json+=(\"{\\\"name\\\":\\\"$name\\\",\\\"status\\\":\\\"$status\\\""}
{"id": "scripts/review.sh:181-213", "path": "scripts/review.sh", "start": 5000, "end": 6200, "start_line": 181, "end_line": 213, "weights": {"quality_json": 0.16974225942000476, "json": 0.16151683089777608, "quality_report": 0.14941011700988716, "sys": 0.14252115887782693, "printf": 0.13152965807502703, "exit_code": 0.10742478016378018, "review_output": 0.10665831177079138, "log_content": 0.09072282078167564, "steps_json": 0.09072282078167564, "review_json": 0.09072282078167564, "overall_exit": 0.08487112971000238, "duration": 0.08050044400076924, "import": 0.07876532915504687, "python3": 0.07126057943891347, "load": 0.0694397697969432, "print": 0.06686922340015135, "then": 0.06248304283140356, "open": 0.06205049685841684, "argv": 0.05843937747096911, "dumps": 0.05639097685085809, "dev": 0.05499892976088354, "data": 0.05371009546255795, "findings_co": 0.05332915588539569, "fi": 0.051387810373435816, "null": 0.05033346912445434, "duration_sec": 0.04980337233662905, "log_tail": 0.04980337233662905, "changed_json": 0.04980337233662905, "name": 0.0493394097533248, "if": 0.04827550603329582, "target_commit": 0.047301789097917914, "status": 0.045511193279895314, "has_findings": 0.04536141039083782, "findings_count": 0.04536141039083782, "encoding": 0.0438597393769788, "stdin": 0.043776005549151266, "read": 0.043776005549151266, "changed_files": 0.043776005549151266, "steps": 0.043776005549151266, "collect_log_tail": 0.04127442231044012, "base_commit": 0.04025022200038462, "quality": 0.04025022200038462, "findings": 0.04025022200038462, "fail": 0.03933404360336004, "sz": 0.03933404360336004, "utf": 0.03879791751731931, "cat": 0.03705261521668621, "log_path": 0.0364081980675234, "dt": 0.0347198848984716, "base": 0.03330667681588225, "target": 0.03330667681588225, "entry": 0.0320913555778374, "date": 0.0320913555778374, "generated_at": 0.03172127197419569, "done": 0.03136629810880217, "inf": 0.028692518110993815, "ifs": 0.028195488425429044, "len": 0.02727931002840447, "log": 0.024997881641730633, "sdk": 0.022538205241592963, "path": 0.018887302236721103, "get": 0.016574079839585438}, "norm": 0.5297750471558128, "snippet": "path duration <<<\"$entry\" LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')\" steps_json+=(\"{\\\"name\\\":\\\"$name\\\",\\\"status\\\":\\\"$status\\\",\\\"exit_code\\\":$exit_code,\\\"duration_sec\\\":$duration,\\\"log_tail\\\":$LOG_CONTENT}\") if [[ $status == \"fail\" ]]; then…", "text": "path duration <<<\"$entry\"\n  LOG_CONTENT=\"$(collect_log_tail \"$log_path\" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')\"\n  steps_json+=(\"{\\\"name\\\":\\\"$name\\\",\\\"status\\\":\\\"$status\\\",\\\"exit_code\\\":$exit_code,\\\"duration_sec\\\":$duration,\\\"log_tail\\\":$LOG_CONTENT}\")\n  if [[ $status == \"fail\" ]]; then\n    OVERALL_EXIT=1\n  fi\ndone\n\nQUALITY_REPORT=\"{}\"\nif [[ -f \"$QUALITY_JSON\" ]]; then\n  QUALITY_REPORT=$(python3 -c 'import json,sys; print(json.dumps(json.load(open(sys.argv[1],encoding=\"utf-8\"))))' \"$QUALITY_JSON\" 2>/dev/null || printf '{}')\nfi\n\nREVIEW_OUTPUT=$(cat <<JSON\n{\n  \"generated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"base\": \"$BASE_COMMIT\",\n  \"target\": \"$TARGET_COMMIT\",\n  \"changed_files\": $CHANGED_JSON,\n  \"steps\": [$(IFS=,; printf '%s' \"${steps_json[*]}\")],\n  \"quality\": $QUALITY_REPORT,\n  \"exit_code\": $OVERALL_EXIT\n}\nJSON\n)\n\nprintf '%s\\n' \"$REVIEW_OUTPUT\" >\"$REVIEW_JSON\"\nsdk::log \"INF\" \"Отчёт сохранён: $REVIEW_JSON\"\n\nHAS_FINDINGS=0\nif [[ -f \"$QUALITY_JSON\" ]]; then\n  FINDINGS_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0)\n  if [[ ${FINDINGS_CO"}
{"id": "scripts/review.sh:211-232", "path": "scripts/review.sh", "start": 6000, "end": 6692, "start_line": 211, "end_line": 232, "weights": {"findings_count": 0.24452635288811014, "has_findings": 0.24452635288811014, "fi": 0.2308436794119187, "review_json": 0.16301756859207342, "sdk": 0.16199335017394942, "overall_exit": 0.15250281119766051, "then": 0.14969895678357104, "ne": 0.14832995517814418, "log": 0.1347542057249542, "eq": 0.12477458635388232, "wrn": 0.1167174266881917, "exit": 0.10500825639314762, "data": 0.09651032778428381, "gt": 0.08949043466738033, "if": 0.08674504990357843, "sys": 0.08536423578619842, "exit_on_fail": 0.08150878429603671, "quality_json": 0.07625140559883026, "findings": 0.0723246176569411, "json": 0.06449456789320919, "die": 0.06333455289282296, "load": 0.06238729317694116, "printf": 0.05908558858839105, "review": 0.056361316914253896, "open": 0.05574849327123388, "argv": 0.05250412819657381, "inf": 0.05155686848069201, "dev": 0.04941310095704381, "len": 0.04901751020728928, "import": 0.047177150275158286, "null": 0.04522147616650195, "python3": 0.04268211789309921, "print": 0.04005187859904898, "encoding": 0.039405234596504385, "utf": 0.034857504019466565, "get": 0.029781549711755083}, "norm": 0.6670905773652516, "snippet": "FINDINGS_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0) if [[ ${FINDINGS_COUNT:-0} -gt 0 ]]; then sdk::log \"WRN\" \"Найдены потенциальные заглушки/секреты: $FINDINGS_COUNT\" HAS_FINDINGS=1 fi fi if [[…", "text": "\n  FINDINGS_COUNT=$(python3 -c 'import json,sys; data=json.load(open(sys.argv[1],encoding=\"utf-8\")); print(len(data.get(\"findings\",[])))' \"$QUALITY_JSON\" 2>/dev/null || printf 0)\n  if [[ ${FINDINGS_COUNT:-0} -gt 0 ]]; then\n    sdk::log \"WRN\" \"Найдены потенциальные заглушки/секреты: $FINDINGS_COUNT\"\n    HAS_FINDINGS=1\n  fi\nfi\n\nif [[ $EXIT_ON_FAIL == 1 ]]; then\n  if [[ $OVERALL_EXIT -ne 0 || $HAS_FINDINGS -eq 1 ]]; then\n    sdk::die \"review: есть проблемы — см. $REVIEW_JSON\"\n  fi\nfi\n\nif [[ $OVERALL_EXIT -ne 0 || $HAS_FINDINGS -eq 1 ]]; then\n  sdk::log \"WRN\" \"Ревью завершено с предупреждениями; см. $REVIEW_JSON\"\n  exit 0\nfi\n\nsdk::log \"INF\" \"Ревью завершено без критичных проблем\"\nexit 0\n"}
{"id": "scripts/status.sh:1-39", "path": "scripts/status.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 39, "weights": {"roadmap": 0.24226954136276302, "sdk_root": 0.1987756743829236, "sh": 0.13936244958251384, "log": 0.12872043531935923, "roadmap_json": 0.128225100418933, "task_json": 0.128225100418933, "scripts": 0.12703056988729144, "sdk": 0.11605493743805331, "summary": 0.10223291718562075, "inf": 0.0984967039631131, "import": 0.09012948112269045, "roadmap_skip_progress": 0.08118963800388895, "json": 0.07700843927547366, "export": 0.07084415769702408, "datetime": 0.07080086107277918, "os": 0.06914172736784512, "loads": 0.05874072163409381, "printf": 0.0564399652187616, "wrn": 0.05574563662719603, "sync": 0.051116458592810374, "script_dir": 0.05062705825216872, "progress": 0.05062705825216872, "environ": 0.0496939185957309, "timezone": 0.04881570217747815, "py": 0.04410147905182924, "task": 0.043167768076780716, "compact": 0.033045558467030445, "report": 0.033045558467030445, "sc1091": 0.03024933869507962, "common": 0.03024933869507962, "disable": 0.028584088312137754, "get": 0.0284480474858556, "isoformat": 0.027872818313598016, "source": 0.027541088742173887, "shellcheck": 0.02722347967934705, "generated_at": 0.02722347967934705, "utc": 0.0266261460399923, "lib": 0.026073101471680946, "status": 0.026038742423820704, "now": 0.025811225950701313, "lc_all": 0.025558229296405187, "eeuo": 0.02507659854164719, "pipefail": 0.02507659854164719, "dirname": 0.02484695929786545, "bash_source": 0.02484695929786545, "mkdir": 0.02484695929786545, "reports": 0.02484695929786545, "cd": 0.024624175990778274, "board": 0.024624175990778274, "pathlib": 0.024624175990778274, "bash": 0.024407851088739076, "pwd": 0.024407851088739076, "ifs": 0.02419762066361448, "dev": 0.023600287024259727, "set": 0.022871641729006627, "usr": 0.021598316975045707, "null": 0.021598316975045707, "env": 0.02038548914297276, "python3": 0.02038548914297276, "tasks": 0.02014078897265193, "bin": 0.019788155503618007, "utf": 0.016648360128700447, "path": 0.01620925191957408}, "norm": 0.5495353180505452, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" export SDK_ROOT sdk::log \"INF\" \"Синхронизация прогресса\" \"$SDK_ROOT/scripts/progress.py\" || sdk::log \"WRN\" \"progress завершился с…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\nexport SDK_ROOT\n\nsdk::log \"INF\" \"Синхронизация прогресса\"\n\"$SDK_ROOT/scripts/progress.py\" || sdk::log \"WRN\" \"progress завершился с предупреждением\"\nprintf '\\n'\nsdk::log \"INF\" \"Синхронизация roadmap\"\n\"$SDK_ROOT/scripts/sync-roadmap.sh\" >/dev/null || sdk::log \"WRN\" \"sync-roadmap завершился с предупреждением\"\n\nsdk::log \"INF\" \"Roadmap summary\"\nROADMAP_SKIP_PROGRESS=1 \"$SDK_ROOT/scripts/roadmap-status.sh\" compact\nprintf '\\n'\n\nsdk::log \"INF\" \"Task board summary\"\n\"$SDK_ROOT/scripts/task.sh\" summary\n\nmkdir -p \"$SDK_ROOT/reports\"\nROADMAP_JSON=\"$(ROADMAP_SKIP_PROGRESS=1 \"$SDK_ROOT/scripts/roadmap-status.sh\" json)\"\nTASK_JSON=\"$(\"$SDK_ROOT/scripts/task.sh\" summary --json)\"\nexport ROADMAP_JSON TASK_JSON\npython3 <<'PY'\nimport json\nimport os\nfrom datetime import datetime, timezone\nfrom pathlib import Path\n\nroadmap = json.loads(os.environ.get(\"ROADMAP_JSON\", \"{}\"))\ntasks = json.loads(os.environ.get(\"TASK_JSON\", \"{}\"))\nreport = {\n    \"generated_at\": datetime.now(timezone.utc).isoformat(),\n    \"roadmap\": roadmap,\n"}
{"id": "scripts/status.sh:34-45", "path": "scripts/status.sh", "start": 1000, "end": 1409, "start_line": 34, "end_line": 45, "weights": {"roadmap_json": 0.24901686168314524, "task_json": 0.24901686168314524, "environ": 0.21714081821178066, "os": 0.2014128579845923, "report": 0.19252629715574257, "json": 0.1794631454419734, "tasks": 0.17601298189143644, "loads": 0.17111427606453414, "roadmap": 0.15683149054401083, "path": 0.14165476677540828, "unset": 0.1333228897134892, "get": 0.08287039919792719, "isoformat": 0.08119473160917683, "generated_at": 0.07930317993548923, "utc": 0.07756312107302105, "write_text": 0.07674267916035046, "now": 0.07518922342160818, "indent": 0.07518922342160818, "sdk_root": 0.07238027273726022, "reports": 0.07238027273726022, "ensure_ascii": 0.07173129527748454, "timezone": 0.07110113143241384, "dumps": 0.07048872106357261, "datetime": 0.06874866220110443, "py": 0.06423476296679477, "false": 0.05512044926591433, "encoding": 0.05482467422122349, "utf": 0.048497396896649135, "status": 0.03792599439991277}, "norm": 0.7007159176642077, "snippet": "= json.loads(os.environ.get(\"ROADMAP_JSON\", \"{}\")) tasks = json.loads(os.environ.get(\"TASK_JSON\", \"{}\")) report = { \"generated_at\": datetime.now(timezone.utc).isoformat(), \"roadmap\": roadmap, \"tasks\": tasks, } path = Path(os.environ[\"SDK_ROOT\"]) / \"reports\" / \"status.json\" path.write_text(json.dumps(report,…", "text": "= json.loads(os.environ.get(\"ROADMAP_JSON\", \"{}\"))\ntasks = json.loads(os.environ.get(\"TASK_JSON\", \"{}\"))\nreport = {\n    \"generated_at\": datetime.now(timezone.utc).isoformat(),\n    \"roadmap\": roadmap,\n    \"tasks\": tasks,\n}\npath = Path(os.environ[\"SDK_ROOT\"]) / \"reports\" / \"status.json\"\npath.write_text(json.dumps(report, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\nPY\nunset ROADMAP_JSON TASK_JSON\n"}
{"id": "scripts/progress.py:1-44", "path": "scripts/progress.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 44, "weights": {"import": 0.2283532651974048, "manifest_path": 0.15954818708237356, "todo_path": 0.15954818708237356, "dict": 0.13063705419955052, "tuple": 0.12405061820004372, "root": 0.11408093458853526, "yaml": 0.11091225488283324, "section": 0.09142362598757243, "path": 0.07300973973858578, "sys": 0.06886526584432814, "fh": 0.06355424654885759, "str": 0.06192919279570131, "list": 0.06008442481235631, "systemexit": 0.05595785791452051, "raise": 0.051904714102471966, "not": 0.0509742620835427, "exists": 0.04831523342519366, "deepcopy": 0.04812930940094404, "progress_utils": 0.04812930940094404, "load_todo_sections": 0.04812930940094404, "extract": 0.04812930940094404, "def": 0.046794625406834864, "sta": 0.04383665710038949, "encoding": 0.042385462423130765, "int": 0.04150069379312367, "textwrap": 0.041009159313656604, "weighted_numeric_average": 0.041009159313656604, "safe_load": 0.041009159313656604, "marker": 0.041009159313656604, "compute_phase_progress": 0.03988704677059339, "status_score": 0.03988704677059339, "status_from_progress": 0.03889727336171622, "weighted_status_average": 0.03889727336171622, "copy": 0.038011890877196676, "load_manifest": 0.038011890877196676, "utf": 0.03749378583606487, "utc_now_iso": 0.03721096499648806, "if": 0.034989599961107266, "machine": 0.03460462106116168, "typing": 0.0330725071385234, "__file__": 0.0330725071385234, "__future__": 0.0326181607412942, "annotations": 0.0326181607412942, "resolve": 0.03101265455001093, "open": 0.02998238293578965, "lib": 0.029359626867270977, "argparse": 0.028779854837968865, "pathlib": 0.02772806372070831, "parents": 0.02772806372070831, "big": 0.02724774091533059, "text": 0.02724774091533059, "read_text": 0.02724774091533059, "as": 0.02518788832681811, "usr": 0.024320793904673316, "manifest": 0.02415761671259683, "scripts": 0.023840471099295595, "architecture": 0.02353486064407816, "env": 0.022955088614776045, "python3": 0.022955088614776045, "tasks": 0.022679543885171082, "bin": 0.02228246081920011, "md": 0.02228246081920011, "append": 0.020968628294908562, "in": 0.01425295287779308}, "norm": 0.507149907470697, "snippet": "#!/usr/bin/env python3 \"\"\"Пересчёт прогресса программы/эпиков/Big Tasks.\"\"\" from __future__ import annotations import argparse import sys import textwrap from copy import deepcopy from pathlib import Path from typing import Dict, Tuple ROOT = Path(__file__).resolve().parents[1] if str(ROOT) not in sys.path:…", "text": "#!/usr/bin/env python3\n\"\"\"Пересчёт прогресса программы/эпиков/Big Tasks.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport sys\nimport textwrap\nfrom copy import deepcopy\nfrom pathlib import Path\nfrom typing import Dict, Tuple\n\nROOT = Path(__file__).resolve().parents[1]\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))\n\nimport yaml\n\nfrom scripts.lib.progress_utils import (\n    compute_phase_progress,\n    status_from_progress,\n    status_score,\n    utc_now_iso,\n    weighted_numeric_average,\n    weighted_status_average,\n)\nMANIFEST_PATH = ROOT / \"architecture\" / \"manifest.yaml\"\nTODO_PATH = ROOT / \"todo.machine.md\"\n\n\ndef load_manifest() -> dict:\n    if not MANIFEST_PATH.exists():\n        raise SystemExit(f\"Файл не найден: {MANIFEST_PATH}\")\n    with MANIFEST_PATH.open(\"r\", encoding=\"utf-8\") as fh:\n        return yaml.safe_load(fh)\n\n\ndef load_todo_sections() -> tuple[str, dict, list[dict], list[dict]]:\n    if not TODO_PATH.exists():\n        raise SystemExit(f\"Файл не найден: {TODO_PATH}\")\n    text = TODO_PATH.read_text(encoding=\"utf-8\")\n\n    def extract(section: str) -> tuple[dict | list[dict], tuple[int, int]]:\n        marker = f\"## {section}\\n```yaml\\n\"\n        sta"}
{"id": "scripts/progress.py:39-71", "path": "scripts/progress.py", "start": 1000, "end": 2200, "start_line": 39, "end_line": 71, "weights": {"section": 0.33111252368542543, "marker": 0.21217782427500592, "start": 0.20533713127744097, "extract": 0.1992134893465162, "block_end": 0.1992134893465162, "text": 0.1973684189780033, "find": 0.14941011700988716, "block_start": 0.14941011700988716, "end_marker": 0.14941011700988716, "yaml": 0.11477007244397526, "obj": 0.10665831177079138, "str": 0.09612487751332768, "body": 0.09460357819583583, "systemexit": 0.08685632728471226, "epics": 0.0853213577188966, "todo_path": 0.08254884462088025, "program": 0.08183793008521341, "raise": 0.08056514319383691, "tuple": 0.0641827111556748, "big_tasks": 0.06139414332828037, "len": 0.05455862005680894, "data": 0.05371009546255795, "program_span": 0.05332915588539569, "epics_span": 0.05332915588539569, "big_span": 0.05332915588539569, "1000": 0.04980337233662905, "new_yaml": 0.04980337233662905, "def": 0.04842226455142042, "format_yaml": 0.047301789097917914, "width": 0.04536141039083782, "replace_block": 0.04536141039083782, "return": 0.04393921437072497, "int": 0.04294419618592797, "safe_load": 0.04243556485500119, "sort_keys": 0.04127442231044012, "allow_unicode": 0.04127442231044012, "dump": 0.04025022200038462, "dict": 0.0386231290676932, "if": 0.03620662952497186, "machine": 0.035808260054593394, "object": 0.03136629810880217, "read_text": 0.028195488425429044, "big": 0.028195488425429044, "strip": 0.026855047731278975, "tasks": 0.02346839758552486, "md": 0.02305750293465055, "false": 0.02204817970636573, "encoding": 0.0219298696884894, "list": 0.020724772616435946, "true": 0.020324902066507045, "utf": 0.019398958758659653}, "norm": 0.7189370488627379, "snippet": "ден: {TODO_PATH}\") text = TODO_PATH.read_text(encoding=\"utf-8\") def extract(section: str) -> tuple[dict | list[dict], tuple[int, int]]: marker = f\"## {section}\\n```yaml\\n\" start = text.find(marker) if start == -1: raise SystemExit(f\"Секция '{section}' не найдена в todo.machine.md\") block_start = start + len(marker)…", "text": "ден: {TODO_PATH}\")\n    text = TODO_PATH.read_text(encoding=\"utf-8\")\n\n    def extract(section: str) -> tuple[dict | list[dict], tuple[int, int]]:\n        marker = f\"## {section}\\n```yaml\\n\"\n        start = text.find(marker)\n        if start == -1:\n            raise SystemExit(f\"Секция '{section}' не найдена в todo.machine.md\")\n        block_start = start + len(marker)\n        end_marker = \"\\n```\"\n        block_end = text.find(end_marker, block_start)\n        if block_end == -1:\n            raise SystemExit(f\"Секция '{section}' оформлена некорректно\")\n        body = text[block_start:block_end]\n        data = yaml.safe_load(body)\n        return data, (start, block_end + len(end_marker))\n\n    program, program_span = extract(\"Program\")\n    epics, epics_span = extract(\"Epics\")\n    big_tasks, big_span = extract(\"Big Tasks\")\n\n    return text, program, epics, big_tasks\n\n\ndef format_yaml(obj: object) -> str:\n    return yaml.dump(obj, sort_keys=False, allow_unicode=True, width=1000).strip()\n\n\ndef replace_block(text: str, section: str, new_yaml: str) -> str:\n    marker = f\"## {section}\\n```yaml\\n\"\n    start = text.find(marker)\n    if start == -1:\n        raise SystemExit(f\"Секция '{section}' н"}
{"id": "scripts/progress.py:67-95", "path": "scripts/progress.py", "start": 2000, "end": 3200, "start_line": 67, "end_line": 95, "weights": {"end_marker": 0.1974961316797359, "section": 0.18757606021588139, "big": 0.16771454322022447, "block_start": 0.14812209875980192, "block_end": 0.14812209875980192, "related_tasks": 0.14812209875980192, "text": 0.1397621193501871, "int": 0.12772196279435474, "str": 0.1270616197015251, "marker": 0.12620922306013282, "big_progress": 0.10482960478812076, "start": 0.10178349179700738, "manifest": 0.09912953064824216, "new_yaml": 0.09874806583986795, "find": 0.09874806583986795, "dict": 0.09572542764622238, "big_tasks": 0.09129732520800314, "get": 0.08215599920484161, "tasks": 0.06979825143970755, "task": 0.06648828646308755, "progress": 0.058482981084401794, "systemexit": 0.05740504389506845, "epics": 0.056390552515362694, "len": 0.054088287125284726, "id": 0.053820723595272416, "raise": 0.053247077398225554, "epic_pr": 0.05286942178293538, "if": 0.047859337877836375, "replace_block": 0.044970363749537494, "calculate_progress": 0.044970363749537494, "status_score": 0.04091860832500529, "weighted_status_average": 0.03990323732796751, "round": 0.03494320159604025, "100": 0.03301955029160741, "tuple": 0.031814705960787074, "status": 0.03007923693786185, "in": 0.029243127456161668, "yaml": 0.028445168816933524, "big_task": 0.028445168816933524, "planned": 0.02414352083314915, "size_points": 0.020961646144034583, "else": 0.020961646144034583, "epic": 0.02024709735260555, "def": 0.016001610412107323, "return": 0.014520142679980953}, "norm": 0.600222312114525, "snippet": "replace_block(text: str, section: str, new_yaml: str) -> str: marker = f\"## {section}\\n```yaml\\n\" start = text.find(marker) if start == -1: raise SystemExit(f\"Секция '{section}' не найдена при перезаписи\") block_start = start + len(marker) end_marker = \"\\n```\" block_end = text.find(end_marker, block_start) if…", "text": " replace_block(text: str, section: str, new_yaml: str) -> str:\n    marker = f\"## {section}\\n```yaml\\n\"\n    start = text.find(marker)\n    if start == -1:\n        raise SystemExit(f\"Секция '{section}' не найдена при перезаписи\")\n    block_start = start + len(marker)\n    end_marker = \"\\n```\"\n    block_end = text.find(end_marker, block_start)\n    if block_end == -1:\n        raise SystemExit(f\"Секция '{section}' оформлена некорректно\")\n    return text[:block_start] + new_yaml + end_marker + text[block_end + len(end_marker):]\n\n\ndef calculate_progress(manifest: dict) -> Tuple[int, Dict[str, int], Dict[str, int], Dict[str, int]]:\n    tasks = manifest.get(\"tasks\", [])\n    big_tasks = manifest.get(\"big_tasks\", [])\n    epics = manifest.get(\"epics\", [])\n\n    # Big task progress\n    big_progress: Dict[str, int] = {}\n    for big in big_tasks:\n        related_tasks = [task for task in tasks if task.get(\"big_task\") == big[\"id\"]]\n        if related_tasks:\n            big_progress[big[\"id\"]] = weighted_status_average(related_tasks, \"status\", \"size_points\")\n        else:\n            big_progress[big[\"id\"]] = int(round(status_score(big.get(\"status\", \"planned\")) * 100))\n\n    # Epic progress\n    epic_pr"}
{"id": "scripts/progress.py:90-124", "path": "scripts/progress.py", "start": 3000, "end": 4200, "start_line": 90, "end_line": 124, "weights": {"big": 0.30517469825170257, "epic": 0.24868199571906113, "related_big": 0.21645363271131193, "epic_progress": 0.1878958476858463, "size_points": 0.17163889077938907, "value": 0.16276255423030475, "id": 0.14689891616592002, "epics": 0.11543477809027188, "weighted_numeric_average": 0.1148256460782385, "get": 0.1121187753854309, "status_score": 0.1116837309576615, "big_progress": 0.09537438553272162, "round": 0.09537438553272162, "100": 0.0901239490312108, "int": 0.0871514569655597, "in": 0.07981653611564125, "progress": 0.07981206830341891, "status_average": 0.07215121090377064, "related_tasks": 0.06738103316132166, "planned": 0.06589760980341886, "status": 0.0615739673786819, "else": 0.05721296359312968, "if": 0.04898543994555017, "program_progress": 0.04768719276636081, "big_tasks": 0.041531332251483775, "program": 0.03690730180313546, "parent_epic": 0.03552161903070741, "dict": 0.026127410839910107, "str": 0.02167521747849546}, "norm": 0.6664796696349823, "snippet": "status_average(related_tasks, \"status\", \"size_points\") else: big_progress[big[\"id\"]] = int(round(status_score(big.get(\"status\", \"planned\")) * 100)) # Epic progress epic_progress: Dict[str, int] = {} for epic in epics: related_big = [big for big in big_tasks if big.get(\"parent_epic\") == epic[\"id\"]] if related_big:…", "text": "status_average(related_tasks, \"status\", \"size_points\")\n        else:\n            big_progress[big[\"id\"]] = int(round(status_score(big.get(\"status\", \"planned\")) * 100))\n\n    # Epic progress\n    epic_progress: Dict[str, int] = {}\n    for epic in epics:\n        related_big = [big for big in big_tasks if big.get(\"parent_epic\") == epic[\"id\"]]\n        if related_big:\n            epic_progress[epic[\"id\"]] = weighted_numeric_average(\n                (\n                    {\n                        \"value\": big_progress[big[\"id\"]],\n                        \"size_points\": big.get(\"size_points\", 1),\n                    }\n                    for big in related_big\n                ),\n                \"value\",\n                \"size_points\",\n            )\n        else:\n            epic_progress[epic[\"id\"]] = int(round(status_score(epic.get(\"status\", \"planned\")) * 100))\n\n    # Program progress\n    if epics:\n        program_progress = weighted_numeric_average(\n            (\n                {\n                    \"value\": epic_progress[epic[\"id\"]],\n                    \"size_points\": epic.get(\"size_points\", 1),\n                }\n                for epic in epics\n            ),\n            \"value\",\n      "}
{"id": "scripts/progress.py:118-151", "path": "scripts/progress.py", "start": 4000, "end": 5200, "start_line": 118, "end_line": 151, "weights": {"progress_block": 0.40127401499587306, "phase_progress": 0.28388506857317697, "program_progress": 0.2672578935257584, "changed": 0.22929943714049889, "program": 0.13789541333039623, "epic_progress": 0.1316303328568429, "epic": 0.12904743367594748, "manifest": 0.12636291818896805, "get": 0.1256715943880654, "dict": 0.09761889764362018, "big_progress": 0.08908596450858615, "setdefault": 0.08775355523789527, "size_points": 0.08016102041894545, "true": 0.07705594739499924, "value": 0.07601547862404344, "epics": 0.07188246254705576, "update_manifest": 0.0629383276781576, "me": 0.0629383276781576, "in": 0.05591543052057286, "health": 0.05572616848861669, "epic_id": 0.053627362179397106, "compute_phase_progress": 0.052159984238468286, "progress_pct": 0.05137063159666616, "if": 0.04575563071837104, "id": 0.04573775778059781, "green": 0.04525219677228836, "milestones": 0.041554699666560745, "progress": 0.037274867064783564, "bool": 0.035037515908286423, "tasks": 0.02965786508060834, "false": 0.027863084244308344, "int": 0.02713506901858086, "else": 0.026720340139648482, "not": 0.02221955013898015, "def": 0.020397657228620327, "return": 0.01850919286678891}, "norm": 0.7322385939987257, "snippet": "\"value\": epic_progress[epic[\"id\"]], \"size_points\": epic.get(\"size_points\", 1), } for epic in epics ), \"value\", \"size_points\", ) else: program_progress = 0 phase_progress = compute_phase_progress(tasks, manifest.get(\"program\", {}).get(\"milestones\", []), program_progress) return program_progress, epic_progress,…", "text": "       \"value\": epic_progress[epic[\"id\"]],\n                    \"size_points\": epic.get(\"size_points\", 1),\n                }\n                for epic in epics\n            ),\n            \"value\",\n            \"size_points\",\n        )\n    else:\n        program_progress = 0\n\n    phase_progress = compute_phase_progress(tasks, manifest.get(\"program\", {}).get(\"milestones\", []), program_progress)\n    return program_progress, epic_progress, big_progress, phase_progress\n\n\ndef update_manifest(manifest: dict, epic_progress: dict, big_progress: dict, program_progress: int, phase_progress: dict) -> bool:\n    changed = False\n\n    program = manifest.setdefault(\"program\", {})\n    progress_block = program.setdefault(\"progress\", {})\n\n    if progress_block.get(\"progress_pct\") != program_progress:\n        progress_block[\"progress_pct\"] = program_progress\n        changed = True\n    if \"health\" not in progress_block:\n        progress_block[\"health\"] = \"green\"\n        changed = True\n    if progress_block.get(\"phase_progress\") != phase_progress:\n        progress_block[\"phase_progress\"] = phase_progress\n        changed = True\n\n    for epic in manifest.get(\"epics\", []):\n        epic_id = epic[\"id\"]\n        me"}
{"id": "scripts/progress.py:145-176", "path": "scripts/progress.py", "start": 5000, "end": 6200, "start_line": 145, "end_line": 176, "weights": {"new_value": 0.4395721815160049, "new_status": 0.3471144132552934, "changed": 0.2634627371185025, "metrics": 0.2106256486629773, "phase_progress": 0.18638918643693436, "get": 0.1732744710502114, "big": 0.16376167519819898, "epic": 0.11861935822738606, "true": 0.11804867361860152, "milestones": 0.11459023241384932, "big_id": 0.10538509484740101, "epic_id": 0.09858767592576034, "milestone": 0.09858767592576034, "progress_pct": 0.09443893889488124, "status_from_progress": 0.09351061676857032, "setdefault": 0.08066235885503505, "status": 0.07048871686448434, "title": 0.06669779679079331, "pro": 0.061948009361823285, "manifest": 0.058075886642404505, "if": 0.056077608018474945, "phase_value": 0.054946522689500614, "progress_block": 0.052692547423700505, "in": 0.05139701189264778, "id": 0.042041777353882835, "big_progress": 0.04094354934485525, "epic_progress": 0.04033117942751752, "big_tasks": 0.035658214559354764, "epics": 0.03303688935243471, "program": 0.03168808740673247}, "norm": 0.8071984411881814, "snippet": "phase_progress\") != phase_progress: progress_block[\"phase_progress\"] = phase_progress changed = True for epic in manifest.get(\"epics\", []): epic_id = epic[\"id\"] metrics = epic.setdefault(\"metrics\", {}) new_value = epic_progress[epic_id] if metrics.get(\"progress_pct\") != new_value: metrics[\"progress_pct\"] = new_value…", "text": "phase_progress\") != phase_progress:\n        progress_block[\"phase_progress\"] = phase_progress\n        changed = True\n\n    for epic in manifest.get(\"epics\", []):\n        epic_id = epic[\"id\"]\n        metrics = epic.setdefault(\"metrics\", {})\n        new_value = epic_progress[epic_id]\n        if metrics.get(\"progress_pct\") != new_value:\n            metrics[\"progress_pct\"] = new_value\n            changed = True\n        new_status = status_from_progress(new_value)\n        if epic.get(\"status\") != new_status:\n            epic[\"status\"] = new_status\n            changed = True\n\n    for big in manifest.get(\"big_tasks\", []):\n        big_id = big[\"id\"]\n        metrics = big.setdefault(\"metrics\", {})\n        new_value = big_progress[big_id]\n        if metrics.get(\"progress_pct\") != new_value:\n            metrics[\"progress_pct\"] = new_value\n            changed = True\n        new_status = status_from_progress(new_value)\n        if big.get(\"status\") != new_status:\n            big[\"status\"] = new_status\n            changed = True\n\n    milestones = program.get(\"milestones\", [])\n    for milestone in milestones:\n        title = milestone.get(\"title\")\n        phase_value = phase_progress.get(title, pro"}
{"id": "scripts/progress.py:170-203", "path": "scripts/progress.py", "start": 6000, "end": 7200, "start_line": 170, "end_line": 203, "weights": {"milestones": 0.2497202234679169, "manifest": 0.21696274632445456, "get": 0.21577575640215005, "milestone": 0.18415433805000514, "new_status": 0.16209588166167002, "changed": 0.14763855268716083, "title": 0.14535085904408732, "phase_progress": 0.10444827994673493, "phase_value": 0.10263595747661433, "program_progress": 0.07647946009699376, "fh": 0.07134863527654768, "big_tasks": 0.06660685361087021, "true": 0.06615180389570689, "epics": 0.06171041596020823, "program": 0.0591909557220097, "ph": 0.057857103083212305, "persist_manifest": 0.05403196055389001, "1000": 0.05403196055389001, "load_todo_sections": 0.05403196055389001, "title_map": 0.05403196055389001, "todo_text": 0.051317978738307166, "big_tasks_block": 0.051317978738307166, "tasks": 0.0509219947610445, "width": 0.04921285089572028, "epics_block": 0.04921285089572028, "calculate_progress": 0.04921285089572028, "false": 0.04784038992890677, "manifest_path": 0.04477885439340201, "sort_keys": 0.04477885439340201, "allow_unicode": 0.04477885439340201, "program_block": 0.04477885439340201, "status_from_progress": 0.043667693679662556, "dump": 0.043667693679662556, "dry_run": 0.043667693679662556, "load_manifest": 0.04267372655081514, "none": 0.04190245134702564, "if": 0.039280777314827965, "big_progress": 0.03823973004849688, "epic_progress": 0.03766779965400221, "def": 0.035022392600083954, "open": 0.033659467635461966, "status": 0.032916900799924285, "in": 0.03200191306523352, "yaml": 0.031128675309097062, "bool": 0.030079376864660983, "as": 0.028276968970673163, "run": 0.02768094159688513, "encoding": 0.023791839756380006, "utf": 0.021046040162696792, "dict": 0.02095122567351282, "return": 0.01588996746111123}, "norm": 0.6094266619791474, "snippet": "s changed = True milestones = program.get(\"milestones\", []) for milestone in milestones: title = milestone.get(\"title\") phase_value = phase_progress.get(title, program_progress) new_status = status_from_progress(phase_value) if milestone.get(\"status\") != new_status: milestone[\"status\"] = new_status changed = True…", "text": "s\n            changed = True\n\n    milestones = program.get(\"milestones\", [])\n    for milestone in milestones:\n        title = milestone.get(\"title\")\n        phase_value = phase_progress.get(title, program_progress)\n        new_status = status_from_progress(phase_value)\n        if milestone.get(\"status\") != new_status:\n            milestone[\"status\"] = new_status\n            changed = True\n\n    return changed\n\n\ndef persist_manifest(manifest: dict) -> None:\n    with MANIFEST_PATH.open(\"w\", encoding=\"utf-8\") as fh:\n        yaml.dump(manifest, fh, sort_keys=False, allow_unicode=True, width=1000)\n\n\ndef run(dry_run: bool = False) -> None:\n    manifest = load_manifest()\n    todo_text, program_block, epics_block, big_tasks_block = load_todo_sections()\n\n    tasks = manifest.get(\"tasks\", [])\n    big_tasks = manifest.get(\"big_tasks\", [])\n    epics = manifest.get(\"epics\", [])\n\n    program_progress, epic_progress, big_progress, phase_progress = calculate_progress(manifest)\n    milestones = manifest.get(\"program\", {}).get(\"milestones\", [])\n    if milestones:\n        title_map = {m.get(\"title\"): m.get(\"title\") for m in milestones if m.get(\"title\")}\n        phase_progress = {\n            title: ph"}
{"id": "scripts/progress.py:199-225", "path": "scripts/progress.py", "start": 7000, "end": 8200, "start_line": 199, "end_line": 225, "weights": {"program_block": 0.23041546435439872, "milestones": 0.18356687716781686, "phase_progress": 0.17915077142967478, "get": 0.14804032478076312, "title": 0.12821518218035996, "program": 0.12182992828219472, "program_progress": 0.11806052578079619, "epic": 0.1140127812088468, "manifest": 0.11164102480772903, "title_map": 0.11121141395557943, "epics_block": 0.10129246980478347, "in": 0.09880202286159476, "systemexit": 0.09697551104603797, "epic_id": 0.09475902831699293, "big": 0.09444119909488369, "raise": 0.08995137346884705, "epic_progress": 0.07752984006454823, "update": 0.0716603085718699, "isinstance": 0.07083390829189329, "if": 0.06737479604161431, "yaml": 0.06407067150998619, "epics": 0.0635078067163308, "id": 0.06061363045681166, "not": 0.05889259405768525, "big_task_index": 0.055605706977789715, "epic_index": 0.055605706977789715, "manifest_changed": 0.055605706977789715, "update_manifest": 0.055605706977789715, "updated_at": 0.053368207057761755, "blocks": 0.050646234902391736, "meta": 0.04299130907361241, "utc_now_iso": 0.04299130907361241, "machine": 0.03998009617745864, "big_progress": 0.03935350859359873, "big_tasks": 0.034273429527923505, "md": 0.025743813956163233, "list": 0.023139309231943045, "progress_pct": 0.022692851821828255, "dict": 0.02156145554749863}, "norm": 0.5858553783558611, "snippet": ".get(\"program\", {}).get(\"milestones\", []) if milestones: title_map = {m.get(\"title\"): m.get(\"title\") for m in milestones if m.get(\"title\")} phase_progress = { title: phase_progress.get(title, program_progress) for title in title_map } big_task_index = {big[\"id\"]: big for big in big_tasks} epic_index = {epic[\"id\"]:…", "text": ".get(\"program\", {}).get(\"milestones\", [])\n    if milestones:\n        title_map = {m.get(\"title\"): m.get(\"title\") for m in milestones if m.get(\"title\")}\n        phase_progress = {\n            title: phase_progress.get(title, program_progress)\n            for title in title_map\n        }\n    big_task_index = {big[\"id\"]: big for big in big_tasks}\n    epic_index = {epic[\"id\"]: epic for epic in epics}\n\n    # Update manifest\n    manifest_changed = update_manifest(manifest, epic_progress, big_progress, program_progress, phase_progress)\n\n    # Update todo.machine.md blocks\n    if not isinstance(program_block, dict):\n        raise SystemExit(\"Секция Program должна быть YAML-объектом\")\n    program_block[\"progress_pct\"] = program_progress\n    program_block[\"phase_progress\"] = phase_progress\n    program_block[\"updated_at\"] = manifest[\"program\"][\"meta\"].get(\"updated_at\", utc_now_iso())\n    program_block[\"milestones\"] = manifest[\"program\"].get(\"milestones\", [])\n\n    if not isinstance(epics_block, list):\n        raise SystemExit(\"Секция Epics должна быть YAML-списком\")\n    for epic in epics_block:\n        epic_id = epic[\"id\"]\n        if epic_id not in epic_progress:\n            raise SystemExit(f"}
{"id": "scripts/progress.py:220-244", "path": "scripts/progress.py", "start": 8000, "end": 9200, "start_line": 220, "end_line": 244, "weights": {"new_todo_text": 0.37822372387723, "big_id": 0.24606425447860142, "big": 0.2447155599188181, "epic_id": 0.23019292256250645, "big_tasks_block": 0.1539539362149215, "format_yaml": 0.1539539362149215, "replace_block": 0.14763855268716083, "systemexit": 0.125641228147697, "yaml": 0.12451470123638825, "raise": 0.11654077317347479, "epic": 0.11078600438218132, "get": 0.10788787820107502, "status": 0.09875070239977286, "epics_block": 0.09842570179144056, "program": 0.08878643358301455, "big_progress": 0.07647946009699376, "epic_progress": 0.07533559930800442, "in": 0.06400382613046704, "epics": 0.06171041596020823, "not": 0.05722582252775076, "manifest": 0.05424068658111364, "epic_index": 0.05403196055389001, "big_task_index": 0.05403196055389001, "planned": 0.05284242295557172, "if": 0.05237436975310395, "st": 0.051317978738307166, "todo_text": 0.051317978738307166, "tasks": 0.0509219947610445, "program_block": 0.04477885439340201, "progress_pct": 0.04410120259713793, "dry_run": 0.043667693679662556, "id": 0.039265433566362265, "isinstance": 0.03441458751917457, "progress": 0.0320001217254274, "print": 0.0241822663239541, "list": 0.022484423121605035, "task": 0.01819019157952395}, "norm": 0.7332747838025436, "snippet": "st): raise SystemExit(\"Секция Epics должна быть YAML-списком\") for epic in epics_block: epic_id = epic[\"id\"] if epic_id not in epic_progress: raise SystemExit(f\"Эпик '{epic_id}' отсутствует в manifest.yaml\") epic[\"progress_pct\"] = epic_progress[epic_id] epic[\"status\"] = epic_index.get(epic_id, {}).get(\"status\",…", "text": "st):\n        raise SystemExit(\"Секция Epics должна быть YAML-списком\")\n    for epic in epics_block:\n        epic_id = epic[\"id\"]\n        if epic_id not in epic_progress:\n            raise SystemExit(f\"Эпик '{epic_id}' отсутствует в manifest.yaml\")\n        epic[\"progress_pct\"] = epic_progress[epic_id]\n        epic[\"status\"] = epic_index.get(epic_id, {}).get(\"status\", epic.get(\"status\", \"planned\"))\n\n    if not isinstance(big_tasks_block, list):\n        raise SystemExit(\"Секция Big Tasks должна быть YAML-списком\")\n    for big in big_tasks_block:\n        big_id = big[\"id\"]\n        if big_id not in big_progress:\n            raise SystemExit(f\"Big Task '{big_id}' отсутствует в manifest.yaml\")\n        big[\"progress_pct\"] = big_progress[big_id]\n        big[\"status\"] = big_task_index.get(big_id, {}).get(\"status\", big.get(\"status\", \"planned\"))\n\n    new_todo_text = todo_text\n    new_todo_text = replace_block(new_todo_text, \"Program\", format_yaml(program_block))\n    new_todo_text = replace_block(new_todo_text, \"Epics\", format_yaml(epics_block))\n    new_todo_text = replace_block(new_todo_text, \"Big Tasks\", format_yaml(big_tasks_block))\n\n    if dry_run:\n        print(\"Program progress:\", program"}
{"id": "scripts/progress.py:240-269", "path": "scripts/progress.py", "start": 9000, "end": 10200, "start_line": 240, "end_line": 269, "weights": {"manifest": 0.23709331041641424, "new_todo_text": 0.2361809409778285, "print": 0.21140785404858844, "value": 0.1426269805110918, "program_progress": 0.1253632387156908, "big_progress": 0.1253632387156908, "epic_progress": 0.12348825041208972, "program_meta": 0.11809047048891425, "format_yaml": 0.11215888136619712, "render_progress_tables": 0.11215888136619712, "big_id": 0.10755798340095565, "epic_id": 0.10062041151185848, "updated_at": 0.08500399990128034, "machine": 0.0849061836346029, "setdefault": 0.08232550027472647, "int": 0.07636983342342861, "items": 0.0713134902555459, "dict": 0.06868546148636162, "yaml": 0.06803380583019152, "big": 0.06685528183349154, "program": 0.06468290006735081, "ew_todo_text": 0.06322528790536602, "manifest_changed": 0.05904523524445712, "persist_manifest": 0.05904523524445712, "big_tasks_block": 0.05607944068309856, "todo_text": 0.05607944068309856, "md": 0.054672429638862124, "epics_block": 0.05377899170047783, "replace_block": 0.05377899170047783, "else": 0.05013507118985591, "todo_path": 0.048933593460831065, "dry_run": 0.04771933536128073, "utc_now_iso": 0.04565056530496989, "meta": 0.04565056530496989, "if": 0.04292538551929654, "str": 0.03798749454994049, "write_text": 0.03639343547810434, "in": 0.03497116273107993, "progress": 0.03496920518448767, "epics": 0.03371806232877357, "architecture": 0.028872664089126816, "tasks": 0.027823357962220192, "encoding": 0.02599933004305444, "epic": 0.024213023638167464, "utf": 0.022998765538617114, "task": 0.019877941313706585, "def": 0.01913594647221082, "return": 0.017364294338946294}, "norm": 0.6202261787886184, "snippet": "ew_todo_text, \"Epics\", format_yaml(epics_block)) new_todo_text = replace_block(new_todo_text, \"Big Tasks\", format_yaml(big_tasks_block)) if dry_run: print(\"Program progress:\", program_progress) for epic_id, value in epic_progress.items(): print(f\"Epic {epic_id}: {value}\") for big_id, value in big_progress.items():…", "text": "ew_todo_text, \"Epics\", format_yaml(epics_block))\n    new_todo_text = replace_block(new_todo_text, \"Big Tasks\", format_yaml(big_tasks_block))\n\n    if dry_run:\n        print(\"Program progress:\", program_progress)\n        for epic_id, value in epic_progress.items():\n            print(f\"Epic {epic_id}: {value}\")\n        for big_id, value in big_progress.items():\n            print(f\"Big Task {big_id}: {value}\")\n        return\n\n    if new_todo_text != todo_text:\n        TODO_PATH.write_text(new_todo_text, encoding=\"utf-8\")\n        print(\"Обновлён todo.machine.md\")\n    else:\n        print(\"todo.machine.md уже актуален\")\n\n    if manifest_changed:\n        manifest[\"updated_at\"] = utc_now_iso()\n        program_meta = manifest.setdefault(\"program\", {}).setdefault(\"meta\", {})\n        program_meta[\"updated_at\"] = manifest[\"updated_at\"]\n        persist_manifest(manifest)\n        print(\"Обновлён architecture/manifest.yaml\")\n    else:\n        print(\"manifest.yaml без изменений\")\n\n    print(render_progress_tables(program_progress, epic_progress, big_progress, manifest))\n\n\ndef render_progress_tables(program_progress: int, epic_progress: Dict[str, int], big_progress: Dict[str, int], manifest: dict) -"}
{"id": "scripts/progress.py:266-293", "path": "scripts/progress.py", "start": 10000, "end": 11200, "start_line": 266, "end_line": 293, "weights": {"str": 0.23620429303488638, "widths": 0.1978109200873603, "build_border": 0.19580813055426807, "table_lines": 0.19580813055426807, "idx": 0.18551681442702778, "cell": 0.16227550651967912, "build_row": 0.14685609791570103, "row": 0.14567694871517656, "headers": 0.12513051175192658, "left": 0.10483509276616249, "right": 0.10483509276616249, "segments": 0.10483509276616249, "list": 0.10185251499530486, "rows": 0.09952720841574383, "mid": 0.09790406527713404, "fill": 0.09790406527713404, "cells": 0.09298642301300103, "in": 0.08697955858755778, "parts": 0.08605539552397258, "join": 0.07858461517145866, "enumerate": 0.07569409973644581, "manifest": 0.07371170227689802, "header": 0.07283847435758828, "program_progress": 0.06928908350667812, "big_progress": 0.06928908350667812, "epic_progress": 0.06825276518502965, "def": 0.06345937804459657, "int": 0.06331516104335534, "dict": 0.05694435695877843, "len": 0.05362599407293187, "ress_tables": 0.05241754638308124, "program_rows": 0.04895203263856702, "render_progress_tables": 0.046493211506500515, "return": 0.04318811668917411, "ljust": 0.04302769776198629, "append": 0.042654132770839646, "render_table": 0.04056887662991978, "max": 0.037847049868222904, "title": 0.03762439818967828, "lines": 0.02747933499774552}, "norm": 0.675268110561701, "snippet": "ress_tables(program_progress, epic_progress, big_progress, manifest)) def render_progress_tables(program_progress: int, epic_progress: Dict[str, int], big_progress: Dict[str, int], manifest: dict) -> str: lines: list[str] = [] def render_table(title: str, headers: list[str], rows: list[list[str]]) -> str: widths =…", "text": "ress_tables(program_progress, epic_progress, big_progress, manifest))\n\n\ndef render_progress_tables(program_progress: int, epic_progress: Dict[str, int], big_progress: Dict[str, int], manifest: dict) -> str:\n    lines: list[str] = []\n\n    def render_table(title: str, headers: list[str], rows: list[list[str]]) -> str:\n        widths = [len(header) for header in headers]\n        for row in rows:\n            for idx, cell in enumerate(row):\n                widths[idx] = max(widths[idx], len(cell))\n\n        def build_border(left: str, mid: str, right: str, fill: str) -> str:\n            segments = [fill * (w + 2) for w in widths]\n            return left + mid.join(segments) + right\n\n        def build_row(cells: list[str]) -> str:\n            parts = [f\" {cell.ljust(widths[idx])} \" for idx, cell in enumerate(cells)]\n            return \"|\" + \"|\".join(parts) + \"|\"\n\n        table_lines = [title, build_border(\"+\", \"+\", \"+\", \"-\"), build_row(headers), build_border(\"+\", \"+\", \"+\", \"=\")]\n        for row in rows:\n            table_lines.append(build_row(row))\n        table_lines.append(build_border(\"+\", \"+\", \"+\", \"-\"))\n        return \"\\n\".join(table_lines)\n\n    program_rows = [[\n        manifest[\""}
{"id": "scripts/progress.py:287-318", "path": "scripts/progress.py", "start": 11000, "end": 12200, "start_line": 287, "end_line": 318, "weights": {"get": 0.272288454507475, "epic_rows": 0.2695759528272749, "table_lines": 0.18881498303447278, "append": 0.1645230835446672, "manifest": 0.15795364773621004, "epic": 0.15485692041113697, "big": 0.1425266447878831, "program_rows": 0.1258766553563152, "big_rows": 0.1258766553563152, "list": 0.10476258685231357, "render_table": 0.10431996847693657, "program": 0.10342155999779717, "meta": 0.09732098537543032, "row": 0.09364946703118492, "id": 0.09147551556119562, "lines": 0.07066114713705991, "bi": 0.06739398820681873, "build_row": 0.0629383276781576, "build_border": 0.0629383276781576, "str": 0.060738246780399366, "in": 0.05591543052057286, "title": 0.048374226243872075, "program_progress": 0.044542982254293075, "big_progress": 0.044542982254293075, "epic_progress": 0.043876777618947635, "rows": 0.04265451789246165, "big_tasks": 0.03879300265248485, "status": 0.03834276356914258, "progress": 0.037274867064783564, "epics": 0.03594123127352788, "join": 0.033679120787768003, "name": 0.03117600066830963, "updated_at": 0.03020288641181023, "health": 0.027863084244308344, "size_points": 0.026720340139648482, "return": 0.01850919286678891, "if": 0.01525187690612368}, "norm": 0.6439675652403639, "snippet": "row in rows: table_lines.append(build_row(row)) table_lines.append(build_border(\"+\", \"+\", \"+\", \"-\")) return \"\\n\".join(table_lines) program_rows = [[ manifest[\"program\"][\"meta\"].get(\"name\", \"Программа\"), manifest[\"program\"].get(\"progress\", {}).get(\"health\", \"n/a\"), f\"{program_progress}%\",…", "text": "row in rows:\n            table_lines.append(build_row(row))\n        table_lines.append(build_border(\"+\", \"+\", \"+\", \"-\"))\n        return \"\\n\".join(table_lines)\n\n    program_rows = [[\n        manifest[\"program\"][\"meta\"].get(\"name\", \"Программа\"),\n        manifest[\"program\"].get(\"progress\", {}).get(\"health\", \"n/a\"),\n        f\"{program_progress}%\",\n        manifest[\"program\"][\"meta\"].get(\"updated_at\", \"n/a\"),\n    ]]\n    lines.append(render_table(\"Программа\", [\"Название\", \"Состояние\", \"Прогресс\", \"Обновлено\"], program_rows))\n\n    epic_rows: list[list[str]] = []\n    for epic in manifest.get(\"epics\", []):\n        epic_rows.append([\n            epic[\"id\"],\n            epic.get(\"title\", \"\"),\n            epic.get(\"status\", \"n/a\"),\n            f\"{epic_progress.get(epic['id'], 0)}%\",\n            str(epic.get(\"size_points\", 0)),\n        ])\n    if epic_rows:\n        lines.append(render_table(\"Эпики\", [\"ID\", \"Название\", \"Статус\", \"Прогресс\", \"Размер\"], epic_rows))\n\n    big_rows: list[list[str]] = []\n    for big in manifest.get(\"big_tasks\", []):\n        big_rows.append([\n            big[\"id\"],\n            big.get(\"title\", \"\"),\n            big.get(\"status\", \"n/a\"),\n            f\"{big_progress.get(bi"}
{"id": "scripts/progress.py:313-347", "path": "scripts/progress.py", "start": 12000, "end": 13200, "start_line": 313, "end_line": 347, "weights": {"big": 0.29145898147634514, "milestone": 0.27416235720927734, "get": 0.2569913503216618, "big_rows": 0.19305801636109013, "program": 0.17624273332957943, "manifest": 0.16150316791005745, "deepcopy": 0.12870534424072674, "milestones": 0.12746553942664138, "meta": 0.09950797381083323, "title": 0.09892257501555861, "big_progress": 0.09108789629529594, "program_progress": 0.09108789629529594, "phase_progress": 0.08293271666182699, "lines": 0.07224903808396012, "id": 0.07014835884327641, "collect_progress_state": 0.06435267212036337, "calculate_progress": 0.0586130583701837, "progress_block": 0.0586130583701837, "in": 0.057171957049125054, "epics_data": 0.056564501552274105, "append": 0.05607341049649705, "render_table": 0.05333211871573723, "progress_pct": 0.05252502781232158, "status_from_progress": 0.05200871382072169, "load_manifest": 0.05082488780209444, "epic_progress": 0.04486277262162061, "big_tasks": 0.039664755521080015, "status": 0.039204398705527804, "progress": 0.038112504526913525, "join": 0.03443595496277402, "parent_epic": 0.03392514177090034, "tasks": 0.030324333958824255, "size_points": 0.027320797221438334, "epic": 0.02638947520114881, "dict": 0.02495314518418381, "def": 0.0208560315483646, "str": 0.02070105040081027, "return": 0.018925129785143713, "if": 0.015594615713002863}, "norm": 0.6719856836926322, "snippet": "for big in manifest.get(\"big_tasks\", []): big_rows.append([ big[\"id\"], big.get(\"title\", \"\"), big.get(\"status\", \"n/a\"), f\"{big_progress.get(big['id'], 0)}%\", big.get(\"parent_epic\", \"\"), str(big.get(\"size_points\", 0)), ]) if big_rows: lines.append( render_table( \"Big Tasks\", [\"ID\", \"Название\", \"Статус\", \"Прогресс\",…", "text": "   for big in manifest.get(\"big_tasks\", []):\n        big_rows.append([\n            big[\"id\"],\n            big.get(\"title\", \"\"),\n            big.get(\"status\", \"n/a\"),\n            f\"{big_progress.get(big['id'], 0)}%\",\n            big.get(\"parent_epic\", \"\"),\n            str(big.get(\"size_points\", 0)),\n        ])\n    if big_rows:\n        lines.append(\n            render_table(\n                \"Big Tasks\",\n                [\"ID\", \"Название\", \"Статус\", \"Прогресс\", \"Эпик\", \"Размер\"],\n                big_rows,\n            )\n        )\n\n    return \"\\n\\n\".join(lines)\n\n\ndef collect_progress_state() -> dict:\n    manifest = load_manifest()\n    program_progress, epic_progress, big_progress, phase_progress = calculate_progress(manifest)\n    program = manifest.get(\"program\", {})\n    meta = deepcopy(program.get(\"meta\", {}))\n    progress_block = program.get(\"progress\", {})\n    milestones = deepcopy(program.get(\"milestones\", []))\n    for milestone in milestones:\n        title = milestone.get(\"title\")\n        milestone[\"progress_pct\"] = phase_progress.get(title, program_progress)\n        milestone[\"status\"] = status_from_progress(milestone[\"progress_pct\"])\n\n    epics_data = []\n    for epic in manifest.g"}
{"id": "scripts/progress.py:343-377", "path": "scripts/progress.py", "start": 13000, "end": 14200, "start_line": 343, "end_line": 377, "weights": {"pct": 0.43290726542262387, "get": 0.26908506092503415, "big": 0.2670278609702398, "milestone": 0.17223846911735777, "epic": 0.16578799714604076, "status_from_progress": 0.16336854811920815, "id": 0.14689891616592002, "big_data": 0.13476206632264331, "title": 0.12947219377036348, "epics_data": 0.11845272089770342, "priority": 0.11620194262074626, "size_points": 0.11442592718625937, "progress_pct": 0.10999358765403813, "parent_epic": 0.07104323806141483, "manifest": 0.06764132679527113, "status": 0.0615739673786819, "append": 0.05871215922574397, "utc_now_iso": 0.052095350995083285, "program_progress": 0.04768719276636081, "big_progress": 0.04768719276636081, "epic_progress": 0.046973961921461575, "phase_progress": 0.043417716370015305, "generated_at": 0.04291701502391182, "big_tasks": 0.041531332251483775, "in": 0.03990826805782063, "epics": 0.03847825936342396, "program": 0.03690730180313546, "return": 0.019815724127974006}, "norm": 0.748865016377421, "snippet": "milestone[\"progress_pct\"] = phase_progress.get(title, program_progress) milestone[\"status\"] = status_from_progress(milestone[\"progress_pct\"]) epics_data = [] for epic in manifest.get(\"epics\", []): pct = epic_progress.get(epic[\"id\"], 0) epics_data.append( { \"id\": epic[\"id\"], \"title\": epic.get(\"title\", \"\"), \"status\":…", "text": "   milestone[\"progress_pct\"] = phase_progress.get(title, program_progress)\n        milestone[\"status\"] = status_from_progress(milestone[\"progress_pct\"])\n\n    epics_data = []\n    for epic in manifest.get(\"epics\", []):\n        pct = epic_progress.get(epic[\"id\"], 0)\n        epics_data.append(\n            {\n                \"id\": epic[\"id\"],\n                \"title\": epic.get(\"title\", \"\"),\n                \"status\": status_from_progress(pct),\n                \"progress_pct\": pct,\n                \"size_points\": epic.get(\"size_points\", 0),\n                \"priority\": epic.get(\"priority\", \"\"),\n            }\n        )\n\n    big_data = []\n    for big in manifest.get(\"big_tasks\", []):\n        pct = big_progress.get(big[\"id\"], 0)\n        big_data.append(\n            {\n                \"id\": big[\"id\"],\n                \"title\": big.get(\"title\", \"\"),\n                \"status\": status_from_progress(pct),\n                \"progress_pct\": pct,\n                \"size_points\": big.get(\"size_points\", 0),\n                \"parent_epic\": big.get(\"parent_epic\", \"\"),\n                \"priority\": big.get(\"priority\", \"\"),\n            }\n        )\n\n    return {\n        \"generated_at\": utc_now_iso(),\n        \"program\": {"}
{"id": "scripts/progress.py:370-400", "path": "scripts/progress.py", "start": 14000, "end": 14921, "start_line": 370, "end_line": 400, "weights": {"parser": 0.16238946321835365, "get": 0.13811733199654533, "dry_run": 0.1341674066679487, "meta": 0.12835086477049507, "milestones": 0.10960804839585586, "phase_progress": 0.106971185259458, "argv": 0.09739896245161518, "big": 0.09398496141809681, "main": 0.09398496141809681, "args": 0.09398496141809681, "parent_epic": 0.08751703239449653, "run": 0.08504869012376301, "big_data": 0.08300562056104842, "name": 0.08223234958887467, "updated_at": 0.07966558444854292, "progress_block": 0.07560235065139637, "health": 0.07349393235455244, "epics_data": 0.07296000924858544, "priority": 0.07157366030987995, "dry": 0.07072594142500198, "none": 0.06437188177948867, "utc_now_iso": 0.06417543238524753, "argumentparser": 0.060680330112539003, "store_true": 0.060680330112539003, "green": 0.059680433424322325, "parse_args": 0.059680433424322325, "program_progress": 0.05874509253827057, "description": 0.05874509253827057, "add_argument": 0.05551112802647042, "__name__": 0.05412982107278456, "__main__": 0.05412982107278456, "generated_at": 0.052868786623659486, "help": 0.052868786623659486, "action": 0.05170874738201403, "big_tasks": 0.05116178610690031, "argparse": 0.04963482211185935, "return": 0.048821349300805526, "exit": 0.04869948122580759, "epics": 0.04740075428827589, "program": 0.045465516714007455, "sys": 0.03958921079939637, "int": 0.035786830154939976, "list": 0.03454128769405991, "progress_pct": 0.03387483677751174, "def": 0.02690125808412246, "str": 0.026701354864813245, "if": 0.020114794180539925}, "norm": 0.5185155622472875, "snippet": "\"parent_epic\": big.get(\"parent_epic\", \"\"), \"priority\": big.get(\"priority\", \"\"), } ) return { \"generated_at\": utc_now_iso(), \"program\": { \"name\": meta.get(\"name\"), \"progress_pct\": program_progress, \"health\": progress_block.get(\"health\", \"green\"), \"updated_at\": meta.get(\"updated_at\"), }, \"phase_progress\":…", "text": "       \"parent_epic\": big.get(\"parent_epic\", \"\"),\n                \"priority\": big.get(\"priority\", \"\"),\n            }\n        )\n\n    return {\n        \"generated_at\": utc_now_iso(),\n        \"program\": {\n            \"name\": meta.get(\"name\"),\n            \"progress_pct\": program_progress,\n            \"health\": progress_block.get(\"health\", \"green\"),\n            \"updated_at\": meta.get(\"updated_at\"),\n        },\n        \"phase_progress\": phase_progress,\n        \"milestones\": milestones,\n        \"epics\": epics_data,\n        \"big_tasks\": big_data,\n    }\n\n\ndef main(argv: list[str] | None = None) -> int:\n    parser = argparse.ArgumentParser(description=\"Пересчитать прогресс программы и задач\")\n    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Только показать вычисленные значения\")\n    args = parser.parse_args(argv)\n    run(dry_run=args.dry_run)\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n"}
{"id": "scripts/check-architecture-integrity.py:1-13", "path": "scripts/check-architecture-integrity.py", "start": 0, "end": 315, "start_line": 1, "end_line": 13, "weights": {"architecture_main": 0.3066426463410252, "import": 0.22645032132075976, "path": 0.2172039757222927, "sys": 0.2048741658868762, "root": 0.2036344682405354, "insert": 0.14318469546780851, "architecture_tool": 0.135992643656514, "__file__": 0.09839070873710715, "__name__": 0.09337394135055337, "__main__": 0.09337394135055337, "resolve": 0.09226264728628253, "str": 0.09211967428360571, "lib": 0.08734488993013118, "check": 0.08646760693484941, "systemexit": 0.08323731364784925, "pathlib": 0.08249098956910722, "parents": 0.08249098956910722, "main": 0.08106202922310851, "raise": 0.07720826222742705, "as": 0.07493396777228388, "usr": 0.07235436186640312, "scripts": 0.0709254015204044, "if": 0.06939603992286274, "env": 0.06829138862895874, "python3": 0.06829138862895874, "bin": 0.06629032093712033, "not": 0.05054947656617984, "in": 0.04240253481143442}, "norm": 0.6678228128251495, "snippet": "#!/usr/bin/env python3 import sys from pathlib import Path ROOT = Path(__file__).resolve().parents[1] if str(ROOT) not in sys.path: sys.path.insert(0, str(ROOT)) from scripts.lib.architecture_tool import main as architecture_main if __name__ == \"__main__\": raise SystemExit(architecture_main([\"check\"]))", "text": "#!/usr/bin/env python3\nimport sys\nfrom pathlib import Path\n\nROOT = Path(__file__).resolve().parents[1]\nif str(ROOT) not in sys.path:\n    sys.path.insert(0, str(ROOT))\n\nfrom scripts.lib.architecture_tool import main as architecture_main\n\nif __name__ == \"__main__\":\n    raise SystemExit(architecture_main([\"check\"]))\n"}
{"id": "scripts/setup.sh:1-49", "path": "scripts/setup.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 49, "weights": {"manager": 0.16090029036273268, "printf": 0.1602321046464842, "packages": 0.15333610218259, "apt": 0.13829760371848882, "dnf": 0.13829760371848882, "pacman": 0.13829760371848882, "brew": 0.13829760371848882, "shellcheck": 0.12365919583161032, "dev": 0.10720130377121369, "detect_pkg_manager": 0.10394665977661872, "then": 0.10149081815835324, "null": 0.09810760931037711, "pip": 0.0973796906905032, "setup_state_dir": 0.09707436980868374, "virtualenv": 0.09707436980868374, "elif": 0.09495655052598648, "python3": 0.09259849305621523, "command": 0.08988518093168858, "venv_dir": 0.08841630838892117, "golang": 0.08532611251105755, "go": 0.07222119915116802, "venv": 0.06670556524549637, "sdk": 0.06589560007075909, "python": 0.0625509473127339, "script_dir": 0.05749174411686956, "sdk_root": 0.05643207704938932, "fi": 0.05008134061817897, "log": 0.048724684555915644, "venv_bin": 0.04609920123949627, "install_system_packages": 0.04609920123949627, "bin": 0.04494259046584429, "case": 0.042663056255528777, "setup": 0.0383340255456475, "sc1091": 0.03435094394187008, "common": 0.03435094394187008, "disable": 0.0324598968968344, "local": 0.03204642092929684, "wrn": 0.031652183508662154, "source": 0.03127547365636695, "lib": 0.029608437264451243, "lc_all": 0.029023751912866907, "eeuo": 0.02847681529305698, "pipefail": 0.02847681529305698, "dirname": 0.02821603852469466, "bash_source": 0.02821603852469466, "mkdir": 0.02821603852469466, "cd": 0.02796304731156177, "inf": 0.02796304731156177, "bash": 0.027717390219415564, "pwd": 0.027717390219415564, "ifs": 0.027478653973935084, "sh": 0.02637650881928934, "set": 0.025972881285482103, "usr": 0.024526902327594278, "if": 0.02352408132978398, "env": 0.023149623264053808, "else": 0.0206063640060001, "utf": 0.01890576489191407, "get": 0.016152704928409537, "in": 0.014373740614045566, "return": 0.014274038566760936}, "norm": 0.5810030607425647, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" VENV_DIR=\"$SDK_ROOT/.venv\" VENV_BIN=\"$VENV_DIR/bin\" SETUP_STATE_DIR=\"$SDK_ROOT/.sdk/setup\" mkdir -p \"$SETUP_STATE_DIR\" sdk::log…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\nVENV_DIR=\"$SDK_ROOT/.venv\"\nVENV_BIN=\"$VENV_DIR/bin\"\nSETUP_STATE_DIR=\"$SDK_ROOT/.sdk/setup\"\nmkdir -p \"$SETUP_STATE_DIR\"\n\nsdk::log \"INF\" \"Старт полной установки зависимостей\"\n\ndetect_pkg_manager() {\n  if command -v apt-get >/dev/null 2>&1; then\n    printf 'apt\\n'\n  elif command -v dnf >/dev/null 2>&1; then\n    printf 'dnf\\n'\n  elif command -v pacman >/dev/null 2>&1; then\n    printf 'pacman\\n'\n  elif command -v brew >/dev/null 2>&1; then\n    printf 'brew\\n'\n  else\n    printf ''\n  fi\n}\n\ninstall_system_packages() {\n  local manager packages=()\n  manager=\"$(detect_pkg_manager)\"\n  if [[ -z \"$manager\" ]]; then\n    sdk::log \"WRN\" \"Не удалось определить пакетный менеджер. Пропускаю установку системных пакетов.\"\n    return 0\n  fi\n\n  case \"$manager\" in\n    apt)\n      packages=(shellcheck python3-venv python3-pip golang-go)\n      ;;\n    dnf)\n      packages=(ShellCheck python3-virtualenv python3-pip golang)\n      ;;\n    pacman)\n      packages=(shellcheck python-virtualenv python-pip go)\n      ;;\n    brew)\n     "}
{"id": "scripts/setup.sh:40-78", "path": "scripts/setup.sh", "start": 1000, "end": 2200, "start_line": 40, "end_line": 78, "weights": {"fingerprint": 0.32278173299055285, "hash_input": 0.32278173299055285, "awk": 0.20096097609516983, "packages": 0.19839539536782477, "printf": 0.16585428375688716, "then": 0.14707265929613997, "manager": 0.12490943593948983, "go": 0.11213291447155035, "dev": 0.11096275302634398, "sha256sum": 0.10759391099685095, "shasum": 0.10759391099685095, "md5sum": 0.10759391099685095, "null": 0.10154998156688157, "virtualenv": 0.10048048804758491, "sentinel": 0.10048048804758491, "local": 0.0995125702541323, "python": 0.0971185760908237, "shellcheck": 0.09599858623769748, "command": 0.09303904692929169, "print": 0.08994106071365385, "golang": 0.08832001119565605, "fi": 0.07775787095980419, "pip": 0.06719768129520104, "elif": 0.0655255728775813, "if": 0.060873719230581345, "cksum": 0.053796955498425475, "log": 0.05043432261050917, "setup_state_dir": 0.05024024402379246, "sudo_cmd": 0.05024024402379246, "euid": 0.05024024402379246, "sudo": 0.05024024402379246, "python3": 0.047923781494006126, "dnf": 0.04771671707246105, "pacman": 0.04771671707246105, "brew": 0.04771671707246105, "hit": 0.04771671707246105, "sdk": 0.045471817592687556, "esac": 0.044160005597828025, "cache": 0.04280780665197488, "ne": 0.04163647864649661, "256": 0.03884302486475508, "eq": 0.035024445292317845, "wrn": 0.03276278643879065, "return": 0.02954976405048755, "system": 0.02894420686635341, "inf": 0.02894420686635341, "else": 0.0213293943220001}, "norm": 0.7456378472864448, "snippet": "golang-go) ;; dnf) packages=(ShellCheck python3-virtualenv python3-pip golang) ;; pacman) packages=(shellcheck python-virtualenv python-pip go) ;; brew) packages=(shellcheck go python) ;; esac if [[ ${#packages[@]} -eq 0 ]]; then sdk::log \"WRN\" \"Нет пакетов для установки для $manager\" return 0 fi local fingerprint…", "text": "golang-go)\n      ;;\n    dnf)\n      packages=(ShellCheck python3-virtualenv python3-pip golang)\n      ;;\n    pacman)\n      packages=(shellcheck python-virtualenv python-pip go)\n      ;;\n    brew)\n      packages=(shellcheck go python)\n      ;;\n  esac\n\n  if [[ ${#packages[@]} -eq 0 ]]; then\n    sdk::log \"WRN\" \"Нет пакетов для установки для $manager\"\n    return 0\n  fi\n\n  local fingerprint hash_input\n  hash_input=$(printf '%s\\n' \"$manager\" \"${packages[@]}\")\n  if command -v sha256sum >/dev/null 2>&1; then\n    fingerprint=$(printf '%s' \"$hash_input\" | sha256sum | awk '{print $1}')\n  elif command -v shasum >/dev/null 2>&1; then\n    fingerprint=$(printf '%s' \"$hash_input\" | shasum -a 256 | awk '{print $1}')\n  elif command -v md5sum >/dev/null 2>&1; then\n    fingerprint=$(printf '%s' \"$hash_input\" | md5sum | awk '{print $1}')\n  else\n    fingerprint=$(printf '%s' \"$hash_input\" | cksum | awk '{print $1}')\n  fi\n  local sentinel=\"$SETUP_STATE_DIR/system-${manager}-${fingerprint}\"\n  if [[ -f \"$sentinel\" ]]; then\n    sdk::log \"INF\" \"Системные пакеты уже установлены (cache hit).\"\n    return 0\n  fi\n\n  local sudo_cmd=()\n  if [[ $EUID -ne 0 ]]; then\n    if command -v sudo >/dev/null 2>&1; then\n      s"}
{"id": "scripts/setup.sh:70-114", "path": "scripts/setup.sh", "start": 2000, "end": 3200, "start_line": 70, "end_line": 114, "weights": {"sudo_cmd": 0.3369051658066083, "packages": 0.26608323614037677, "python_bin": 0.22460344387107217, "pkg_list": 0.1803780272594266, "sudo": 0.16845258290330414, "apt": 0.15999134547825175, "then": 0.11741094649691845, "local": 0.1112199314605008, "dnf": 0.10666089698550117, "pacman": 0.10666089698550117, "brew": 0.10666089698550117, "venv_dir": 0.10228553323424214, "install": 0.10172659639394048, "sdk": 0.10164288638365454, "fi": 0.08690585577860468, "log": 0.08455165849408891, "printf": 0.0741466209736672, "python": 0.07236286061669217, "inf": 0.0646988153483194, "debian_frontend": 0.060126009086475536, "noninteractive": 0.060126009086475536, "sy": 0.060126009086475536, "needed": 0.060126009086475536, "noconfirm": 0.060126009086475536, "el": 0.05615086096776804, "euid": 0.05615086096776804, "sentinel": 0.05615086096776804, "if": 0.054428266606166856, "python3": 0.05356187343447744, "hit": 0.053330448492750586, "bootstrap_venv": 0.053330448492750586, "command": 0.05199240857813359, "bin": 0.05199240857813359, "case": 0.04935530037404309, "esac": 0.04935530037404309, "installed": 0.04935530037404309, "cache": 0.04784401919926604, "else": 0.047677469660941406, "ne": 0.04653488789902562, "manager": 0.04653488789902562, "sz": 0.044347206023396125, "die": 0.03973932730530068, "dt": 0.03914496826788465, "get": 0.037372925128476966, "wrn": 0.036617231902177784, "update": 0.036181430308346085, "date": 0.036181430308346085, "return": 0.03302620687995668, "dev": 0.03100429863971376, "null": 0.0283742595554522, "true": 0.022915330761257943, "in": 0.01662844502409193}, "norm": 0.7190718830266422, "snippet": "el\" ]]; then sdk::log \"INF\" \"Системные пакеты уже установлены (cache hit).\" return 0 fi local sudo_cmd=() if [[ $EUID -ne 0 ]]; then if command -v sudo >/dev/null 2>&1; then sudo_cmd=(sudo) else sdk::log \"WRN\" \"Нет sudo — пропускаю установку системных пакетов. Установите вручную: ${packages[*]}\" return 0 fi fi local…", "text": "el\" ]]; then\n    sdk::log \"INF\" \"Системные пакеты уже установлены (cache hit).\"\n    return 0\n  fi\n\n  local sudo_cmd=()\n  if [[ $EUID -ne 0 ]]; then\n    if command -v sudo >/dev/null 2>&1; then\n      sudo_cmd=(sudo)\n    else\n      sdk::log \"WRN\" \"Нет sudo — пропускаю установку системных пакетов. Установите вручную: ${packages[*]}\"\n      return 0\n    fi\n  fi\n\n  local pkg_list\n  pkg_list=$(printf '%s ' \"${packages[@]}\")\n  sdk::log \"INF\" \"Устанавливаю системные пакеты: ${pkg_list% }\"\n  case \"$manager\" in\n    apt)\n      \"${sudo_cmd[@]}\" apt-get update\n      DEBIAN_FRONTEND=noninteractive \"${sudo_cmd[@]}\" apt-get install -y \"${packages[@]}\"\n      ;;\n    dnf)\n      \"${sudo_cmd[@]}\" dnf install -y \"${packages[@]}\"\n      ;;\n    pacman)\n      \"${sudo_cmd[@]}\" pacman -Sy --needed --noconfirm \"${packages[@]}\"\n      ;;\n    brew)\n      brew install \"${packages[@]}\"\n      ;;\n  esac\n\n  printf 'installed %s\\n' \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\" > \"$sentinel\"\n}\n\nbootstrap_venv() {\n  local python_bin\n  if [[ -x \"$VENV_DIR/bin/python\" ]]; then\n    python_bin=\"$VENV_DIR/bin/python\"\n  else\n    python_bin=\"$(command -v python3 || true)\"\n    if [[ -z \"$python_bin\" ]]; then\n      sdk::die \"python3 не найден\""}
{"id": "scripts/setup.sh:109-148", "path": "scripts/setup.sh", "start": 3000, "end": 4200, "start_line": 109, "end_line": 148, "weights": {"venv_dir": 0.30685659970272644, "python_bin": 0.2887758564056643, "reviewdog": 0.28706411519559627, "venv_bin": 0.18284725197514487, "upgrade": 0.17534662840155796, "sdk": 0.1524643295754818, "log": 0.14494570027558099, "inf": 0.13864031860354156, "pip": 0.12874849861601542, "fi": 0.12415122254086385, "then": 0.12076554496825899, "go": 0.1074214474769474, "venv": 0.09921752141557022, "install_reviewdog": 0.09625861880188807, "bin": 0.08912984327680044, "install": 0.08719422548052042, "deps": 0.08460908635550245, "python": 0.06202530910002186, "if": 0.058315999935178775, "go111module": 0.051536579216979024, "gobin": 0.04812930940094404, "skip_agent_install": 0.04812930940094404, "python3": 0.04591017722955209, "grep": 0.04571181299378622, "hit": 0.04571181299378622, "v0": 0.04571181299378622, "install_system_packages": 0.04571181299378622, "bootstrap_venv": 0.04571181299378622, "command": 0.04456492163840022, "com": 0.04383665710038949, "24": 0.042304543177751223, "15": 0.042304543177751223, "cache": 0.041009159313656604, "github": 0.041009159313656604, "else": 0.0408664025665212, "ne": 0.03988704677059339, "txt": 0.03721096499648806, "on": 0.03518439309046379, "die": 0.034062280547400584, "requirements": 0.034062280547400584, "cmd": 0.03355282994390112, "wrn": 0.031386198773295244, "help": 0.030655010731365583, "return": 0.028308177325677152, "sdk_root": 0.027978928957260254, "mkdir": 0.027978928957260254, "dev": 0.02657511311975465, "null": 0.024320793904673316, "true": 0.019641712081078237}, "norm": 0.7353846912827163, "snippet": "[[ -x \"$VENV_DIR/bin/python\" ]]; then python_bin=\"$VENV_DIR/bin/python\" else python_bin=\"$(command -v python3 || true)\" if [[ -z \"$python_bin\" ]]; then sdk::die \"python3 не найден\" fi sdk::log \"INF\" \"Создаю виртуальное окружение в $VENV_DIR\" if \"$python_bin\" -m venv --help 2>&1 | grep -q -- '--upgrade-deps'; then…", "text": "[[ -x \"$VENV_DIR/bin/python\" ]]; then\n    python_bin=\"$VENV_DIR/bin/python\"\n  else\n    python_bin=\"$(command -v python3 || true)\"\n    if [[ -z \"$python_bin\" ]]; then\n      sdk::die \"python3 не найден\"\n    fi\n    sdk::log \"INF\" \"Создаю виртуальное окружение в $VENV_DIR\"\n    if \"$python_bin\" -m venv --help 2>&1 | grep -q -- '--upgrade-deps'; then\n      \"$python_bin\" -m venv --upgrade-deps \"$VENV_DIR\"\n    else\n      \"$python_bin\" -m venv \"$VENV_DIR\"\n    fi\n  fi\n\n  sdk::log \"INF\" \"Обновляю pip и зависимости\"\n  \"$VENV_DIR/bin/pip\" install --upgrade pip==24.2\n  \"$VENV_DIR/bin/pip\" install --upgrade -r \"$SDK_ROOT/requirements.txt\"\n}\n\ninstall_reviewdog() {\n  if ! command -v go >/dev/null 2>&1; then\n    sdk::log \"WRN\" \"go не найден — пропуск установки reviewdog\"\n    return 0\n  fi\n  if [[ -x \"$VENV_BIN/reviewdog\" ]]; then\n    sdk::log \"INF\" \"reviewdog уже установлен (cache hit).\"\n    return 0\n  fi\n  mkdir -p \"$VENV_BIN\"\n  sdk::log \"INF\" \"Устанавливаю reviewdog в $VENV_BIN\"\n  GOBIN=\"$VENV_BIN\" GO111MODULE=on go install github.com/reviewdog/reviewdog/cmd/reviewdog@v0.15.0\n}\n\ninstall_system_packages\nbootstrap_venv\ninstall_reviewdog\n\nif [[ ${SKIP_AGENT_INSTALL:-0} -ne 1 ]]; then\n  sdk::log \"INF\""}
{"id": "scripts/setup.sh:140-162", "path": "scripts/setup.sh", "start": 4000, "end": 4659, "start_line": 140, "end_line": 162, "weights": {"reviewdog": 0.22182227083296074, "log": 0.2177845749090169, "sdk": 0.19635557596842354, "heart": 0.18717954119446548, "fi": 0.17907873311954906, "inf": 0.14998361739837676, "memory": 0.14788151388864051, "then": 0.14516262475982647, "ne": 0.14383510805153377, "cli": 0.11459023241384932, "wrn": 0.11318053497036772, "install": 0.10480922052709019, "sync": 0.10378190077934227, "sdk_root": 0.10089371351254456, "sh": 0.09431600123261039, "111module": 0.09292201404273492, "skip_heart_sync": 0.09292201404273492, "agents": 0.08830233642279711, "install_reviewdog": 0.08677860331382335, "skip_agent_install": 0.08677860331382335, "scripts": 0.08597018366109624, "if": 0.08411641202771242, "v0": 0.08241978403425092, "install_system_packages": 0.08241978403425092, "bootstrap_venv": 0.08241978403425092, "com": 0.07903882113555075, "15": 0.07627637330533933, "github": 0.07394075694432026, "doctor": 0.07013296257642775, "go": 0.06456137499877142, "on": 0.06343852693583624, "cmd": 0.060496769141276274, "agentcall": 0.0540591449902874}, "norm": 0.6836601188235354, "snippet": "111MODULE=on go install github.com/reviewdog/reviewdog/cmd/reviewdog@v0.15.0 } install_system_packages bootstrap_venv install_reviewdog if [[ ${SKIP_AGENT_INSTALL:-0} -ne 1 ]]; then sdk::log \"INF\" \"Установка CLI агентов\" if ! \"$SDK_ROOT/scripts/agents/install.sh\"; then sdk::log \"WRN\" \"Установка CLI агентов завершилась…", "text": "111MODULE=on go install github.com/reviewdog/reviewdog/cmd/reviewdog@v0.15.0\n}\n\ninstall_system_packages\nbootstrap_venv\ninstall_reviewdog\n\nif [[ ${SKIP_AGENT_INSTALL:-0} -ne 1 ]]; then\n  sdk::log \"INF\" \"Установка CLI агентов\"\n  if ! \"$SDK_ROOT/scripts/agents/install.sh\"; then\n    sdk::log \"WRN\" \"Установка CLI агентов завершилась с предупреждением\"\n  fi\nfi\n\nif [[ ${SKIP_HEART_SYNC:-0} -ne 1 ]]; then\n  sdk::log \"INF\" \"Синхронизирую Memory Heart\"\n  if ! \"$SDK_ROOT/scripts/agents/heart.sh\" sync; then\n    sdk::log \"WRN\" \"Memory Heart sync завершился с предупреждением\"\n  fi\nfi\n\nsdk::log \"INF\" \"Установка завершена. Запустите 'agentcall doctor' для проверки.\"\n"}
{"id": "scripts/dev.sh:1-13", "path": "scripts/dev.sh", "start": 0, "end": 275, "start_line": 1, "end_line": 13, "weights": {"sdk": 0.2508284131725668, "script_dir": 0.21883954212227769, "print_quickref": 0.17547437891163095, "run_command_group": 0.16239485929523856, "load_commands": 0.15311479244195528, "sdk_dev_commands": 0.15311479244195528, "sc1091": 0.13075520597227966, "common": 0.13075520597227966, "disable": 0.12355702689762771, "source": 0.11904857714359034, "shellcheck": 0.11767568635588724, "lib": 0.11270308378081441, "lc_all": 0.11047750728123532, "eeuo": 0.10839561950260398, "pipefail": 0.10839561950260398, "dirname": 0.10740298535206355, "bash_source": 0.10740298535206355, "cd": 0.1064399865407835, "bash": 0.10550490470616246, "pwd": 0.10550490470616246, "ifs": 0.10459616673949483, "dev": 0.10201414391131625, "sh": 0.10040090453794008, "set": 0.09886451586086735, "usr": 0.09336046692439111, "env": 0.08811792081155966, "bin": 0.08553589798338107, "utf": 0.07196387926599548}, "norm": 0.683801742955157, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::print_quickref sdk::run_command_group \"dev\" SDK_DEV_COMMANDS", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\nsdk::print_quickref\nsdk::run_command_group \"dev\" SDK_DEV_COMMANDS\n"}
{"id": "scripts/update-lock.sh:1-46", "path": "scripts/update-lock.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 46, "weights": {"venv": 0.2791225779776089, "tmp_dir": 0.20309885881958656, "lock": 0.1651728139665536, "lock_src": 0.15431789351093786, "requirements": 0.1437379923808748, "pip": 0.13582510049029997, "sbom_dst": 0.12185931529175192, "sdk_root": 0.118067111557233, "bin": 0.11283458882914098, "python": 0.10469520259436314, "sbom": 0.09421499648046977, "sdk": 0.0919111206660706, "lock_dst": 0.08699082165702843, "script_dir": 0.07217048729564476, "quiet": 0.07140766862627511, "compile": 0.06565639049708129, "log": 0.06116502954891538, "generate": 0.060440436169062604, "die": 0.05749519695234992, "no": 0.05663527323864162, "output": 0.055824515595521776, "update": 0.05234760129718157, "install": 0.049059635140340084, "inf": 0.04680339833708211, "dev": 0.04485728313830927, "mv": 0.043495410828514214, "fi": 0.04191204392159659, "null": 0.041052120207888294, "trap": 0.04061977176391731, "hashes": 0.04061977176391731, "tools": 0.038579473377734465, "piptools": 0.038579473377734465, "annotate": 0.038579473377734465, "resolver": 0.038579473377734465, "backtracking": 0.038579473377734465, "extras": 0.038579473377734465, "upgrade": 0.0369968949996195, "rm": 0.035703834313137554, "24": 0.035703834313137554, "then": 0.03397423132676789, "rf": 0.03366353592695471, "mktemp": 0.03208095754883975, "setup": 0.03208095754883975, "txt": 0.03140499882682326, "header": 0.030220218084531302, "sc1091": 0.02874759847617496, "common": 0.02874759847617496, "disable": 0.027165020098059992, "source": 0.026173800648590786, "shellcheck": 0.025871959411578046, "agentcall": 0.025304280633751546, "lib": 0.024778692178760612, "file": 0.024529817570170042, "lc_all": 0.024289381033463085, "eeuo": 0.023831661025395204, "pipefail": 0.023831661025395204, "exit": 0.023831661025395204, "dirname": 0.023613422311446596, "bash_source": 0.023613422311446596, "cd": 0.023401699168541054, "bash": 0.023196113800645648, "pwd": 0.023196113800645648, "ifs": 0.022996320346981135, "sh": 0.02207395773529179}, "norm": 0.6058937748516875, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" LOCK_SRC=\"$SDK_ROOT/requirements.txt\" LOCK_DST=\"$SDK_ROOT/requirements.lock\" SBOM_DST=\"$SDK_ROOT/sbom/python.json\" if [[ ! -f…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nLOCK_SRC=\"$SDK_ROOT/requirements.txt\"\nLOCK_DST=\"$SDK_ROOT/requirements.lock\"\nSBOM_DST=\"$SDK_ROOT/sbom/python.json\"\n\nif [[ ! -f \"$LOCK_SRC\" ]]; then\n  sdk::die \"update-lock: отсутствует $LOCK_SRC\"\nfi\n\nTMP_DIR=\"$(mktemp -d)\"\ntrap 'rm -rf \"$TMP_DIR\"' EXIT\nVENV=\"$TMP_DIR/venv\"\n\npython3 -m venv \"$VENV\"\n\"$VENV/bin/pip\" install --upgrade pip==24.2 >/dev/null\n\"$VENV/bin/pip\" install --quiet pip-tools==7.4.1 >/dev/null\n\nsdk::log \"INF\" \"Генерирую requirements.lock через pip-compile\"\n(\"$VENV/bin/python\" -m piptools compile \\\n  --quiet \\\n  --no-annotate \\\n  --no-header \\\n  --generate-hashes \\\n  --resolver=backtracking \\\n  --strip-extras \\\n  --output-file \"$TMP_DIR/requirements.lock\" \\\n  \"$LOCK_SRC\")\n\nmv \"$TMP_DIR/requirements.lock\" \"$LOCK_DST\"\n\nif [[ ! -x \"$SDK_ROOT/.venv/bin/python\" ]]; then\n  sdk::die \"update-lock: не найдено окружение .venv — выполните agentcall setup\"\nfi\n\nsdk::log \"INF\" \"Генерирую SBOM $SBOM_DST\"\n\"$SDK_ROOT/.venv/bin/python\" \"$SCRIPT_DIR/generate-sbom.py\" --output \"$SBOM_DST\"\n\nsdk::log "}
{"id": "scripts/update-lock.sh:40-47", "path": "scripts/update-lock.sh", "start": 1000, "end": 1235, "start_line": 40, "end_line": 47, "weights": {"sbom": 0.5313725801498494, "sbom_dst": 0.45819102549698726, "venv": 0.3148502679587428, "lock": 0.31052489025712077, "inf": 0.2639711666211431, "log": 0.22998051110392184, "sdk": 0.20735148822265526, "setup": 0.1809366005754562, "generate": 0.17044202999675656, "output": 0.1574251339793714, "python": 0.14762023565805202, "agentcall": 0.14271614277435873, "script_dir": 0.13568051611581217, "sdk_root": 0.1331797018365588, "fi": 0.11819196385890238, "py": 0.11819196385890238, "bin": 0.10606451349939253}, "norm": 1.0283403744661033, "snippet": "-lock: не найдено окружение .venv — выполните agentcall setup\" fi sdk::log \"INF\" \"Генерирую SBOM $SBOM_DST\" \"$SDK_ROOT/.venv/bin/python\" \"$SCRIPT_DIR/generate-sbom.py\" --output \"$SBOM_DST\" sdk::log \"INF\" \"Lock-файл и SBOM обновлены\"", "text": "-lock: не найдено окружение .venv — выполните agentcall setup\"\nfi\n\nsdk::log \"INF\" \"Генерирую SBOM $SBOM_DST\"\n\"$SDK_ROOT/.venv/bin/python\" \"$SCRIPT_DIR/generate-sbom.py\" --output \"$SBOM_DST\"\n\nsdk::log \"INF\" \"Lock-файл и SBOM обновлены\"\n"}
{"id": "scripts/arch.sh:1-40", "path": "scripts/arch.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 40, "weights": {"edit": 0.4317226782746476, "yaml": 0.2618761573622451, "manifest": 0.25097079584753373, "edit_manifest": 0.2433671796357343, "arch": 0.1997714538949363, "apply": 0.19469374370858744, "usage": 0.13636637663600812, "root": 0.1292917258670066, "agentcall": 0.11326677997964978, "architecture": 0.11113684193036909, "echo": 0.10770035748539059, "run": 0.0931485653736452, "edit_path": 0.09091091775733874, "import": 0.07188899089547929, "script_dir": 0.05384147464913181, "cd": 0.052375231472449026, "pwd": 0.05191511183954026, "cp": 0.04867343592714686, "as": 0.047577122395100875, "fi": 0.04690157295988189, "command": 0.0420890926584891, "case": 0.03995429077898726, "then": 0.03801878267519264, "manifest_path": 0.037671099727782646, "utf": 0.03541079773406127, "path": 0.034476821543221056, "cat": 0.03381786309459455, "dt": 0.03168878383590662, "__file__": 0.03123514563082766, "resolve": 0.029289729297232545, "open": 0.028316694994912444, "lc_all": 0.027180974013637258, "eeuo": 0.026668763528418443, "pipefail": 0.026668763528418443, "exit": 0.026668763528418443, "dirname": 0.02642454401519024, "bash_source": 0.02642454401519024, "pathlib": 0.026187615736224513, "parents": 0.026187615736224513, "bash": 0.02595755591977013, "ifs": 0.025733977531145553, "datetime": 0.025098717946434947, "sh": 0.02470180984663605, "set": 0.024323809457832444, "py": 0.023450786479940946, "usr": 0.02296963868774702, "scripts": 0.02251600048266806, "if": 0.022030488864400868, "env": 0.021679805913955155, "python3": 0.021679805913955155, "bin": 0.02104454632924455, "encoding": 0.020015357255367305, "else": 0.019298023434190566, "true": 0.018550505854351668, "in": 0.013461122162360131}, "norm": 0.769012913614066, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" MANIFEST=\"$ROOT/architecture/manifest.yaml\" EDIT_MANIFEST=\"$ROOT/architecture/manifest.edit.yaml\" usage() { cat <<USAGE Использование: agentcall run arch-…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\"\nMANIFEST=\"$ROOT/architecture/manifest.yaml\"\nEDIT_MANIFEST=\"$ROOT/architecture/manifest.edit.yaml\"\n\nusage() {\n  cat <<USAGE\nИспользование: agentcall run arch-edit | agentcall run arch-apply | scripts/arch.sh <edit|apply>\nUSAGE\n}\n\ncommand=\"${1:-}\" || true\ncase \"$command\" in\n  edit)\n    if [[ -f \"$EDIT_MANIFEST\" ]]; then\n      echo \"Файл manifest.edit.yaml уже существует: $EDIT_MANIFEST\" >&2\n    else\n      cp \"$MANIFEST\" \"$EDIT_MANIFEST\"\n      echo \"Скопирован manifest.yaml → manifest.edit.yaml. Отредактируйте manifest.edit.yaml и выполните agentcall run arch-apply.\" >&2\n    fi\n    ;;\n  apply)\n    if [[ ! -f \"$EDIT_MANIFEST\" ]]; then\n      echo \"architecture/manifest.edit.yaml не найден. Выполните agentcall run arch-edit.\" >&2\n      exit 1\n    fi\n    python3 - <<'PY'\nimport datetime as dt\nfrom pathlib import Path\nimport yaml\n\nroot = Path(__file__).resolve().parents[1]\nmanifest_path = root / \"architecture\" / \"manifest.yaml\"\nedit_path = root / \"architecture\" / \"manifest.edit.yaml\"\nwith edit_path.open(\"r\", encoding=\"utf-8\") as "}
{"id": "scripts/arch.sh:37-63", "path": "scripts/arch.sh", "start": 1000, "end": 1819, "start_line": 37, "end_line": 63, "weights": {"data": 0.23498166764869102, "yaml": 0.2151938858324536, "edit_path": 0.18676264626235894, "fh": 0.1644120725937838, "now": 0.15037844684321636, "usage": 0.12450843084157262, "edit": 0.11825447274479478, "manifest_path": 0.1031860557761003, "program": 0.10229741260651676, "meta": 0.09626314857787129, "manifest": 0.09374205615648987, "architecture": 0.09132549184712939, "dt": 0.08679971224617901, "open": 0.07756312107302105, "replace": 0.07445223316778901, "exit": 0.07304922183871139, "as": 0.06515997197589903, "00": 0.0646924457754433, "ot": 0.06225421542078631, "safe_dump": 0.06225421542078631, "updated_at": 0.05974918833640719, "root": 0.05902448354798128, "encoding": 0.05482467422122349, "esac": 0.05472000693643908, "safe_load": 0.05304445606875148, "sort_keys": 0.05159302788805015, "allow_unicode": 0.05159302788805015, "unlink": 0.05159302788805015, "utf": 0.048497396896649135, "microsecond": 0.044058819403702924, "__file__": 0.042778569016133534, "isoformat": 0.04059736580458841, "resolve": 0.04011419447229674, "isinstance": 0.039651589967744615, "utc": 0.03878156053651052, "sync": 0.037226116583894506, "in": 0.03687176940124732, "script_dir": 0.0368697054662533, "systemexit": 0.03619013636863011, "parents": 0.03586564763874227, "timezone": 0.03555056571620692, "datetime": 0.03437433110055221, "sh": 0.03383073957256676, "raise": 0.03356880966409872, "py": 0.032117381483397385, "if": 0.030172191270809886, "false": 0.027560224632957164, "true": 0.025406127583133806, "dict": 0.02413945566730825, "path": 0.023609127795901377, "not": 0.021978033289643407}, "norm": 0.5969525467259099, "snippet": "ot = Path(__file__).resolve().parents[1] manifest_path = root / \"architecture\" / \"manifest.yaml\" edit_path = root / \"architecture\" / \"manifest.edit.yaml\" with edit_path.open(\"r\", encoding=\"utf-8\") as fh: data = yaml.safe_load(fh) if not isinstance(data, dict): raise SystemExit(\"manifest.edit.yaml должен содержать…", "text": "ot = Path(__file__).resolve().parents[1]\nmanifest_path = root / \"architecture\" / \"manifest.yaml\"\nedit_path = root / \"architecture\" / \"manifest.edit.yaml\"\nwith edit_path.open(\"r\", encoding=\"utf-8\") as fh:\n    data = yaml.safe_load(fh)\nif not isinstance(data, dict):\n    raise SystemExit(\"manifest.edit.yaml должен содержать YAML-объект\")\nnow = dt.datetime.now(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\ndata[\"updated_at\"] = now\nif \"program\" in data and \"meta\" in data[\"program\"]:\n    data[\"program\"][\"meta\"][\"updated_at\"] = now\nwith manifest_path.open(\"w\", encoding=\"utf-8\") as fh:\n    yaml.safe_dump(data, fh, sort_keys=False, allow_unicode=True)\nedit_path.unlink()\nPY\n    \"$SCRIPT_DIR/sync-architecture.sh\"\n    ;;\n  \"\")\n    usage\n    exit 1\n    ;;\n  *)\n    usage\n    exit 1\n    ;;\nesac\n"}
{"id": "scripts/init.sh:1-34", "path": "scripts/init.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 34, "weights": {"sdk_root": 0.30020014758240715, "npm": 0.26558548123204606, "config_file": 0.1508078588562419, "reports_dir": 0.10053857257082795, "run": 0.09620261669737128, "config": 0.08421646046848266, "commands": 0.08000147472664158, "journal": 0.08000147472664158, "reviewdog": 0.08000147472664158, "lint": 0.07781243550328876, "state": 0.07714231114589788, "sh": 0.07653511575433138, "sdk": 0.06373508859302927, "disable": 0.06279127596436819, "script_dir": 0.05560676889992302, "inf": 0.05409245217646375, "json": 0.050749823915967884, "data": 0.05062836867372266, "log": 0.04712715391473808, "board_file": 0.04694580179272411, "legacy_state_file": 0.04694580179272411, "task_selection": 0.04694580179272411, "journal_file": 0.04694580179272411, "publish": 0.04694580179272411, "maxfail": 0.04694580179272411, "task_events": 0.04275870651595368, "todo_file": 0.04275870651595368, "cov": 0.04275870651595368, "task_state": 0.04126426752583931, "conf": 0.04126426752583931, "yml": 0.04126426752583931, "jsonl": 0.04000073736332079, "sdk_fix_commands": 0.04000073736332079, "sdk_review_linters": 0.04000073736332079, "sdk_coverage_file": 0.04000073736332079, "sdk_dev_commands": 0.03890621775164438, "sdk_verify_commands": 0.03890621775164438, "fix": 0.03890621775164438, "sdk_ship_commands": 0.03890621775164438, "state_file": 0.03794078303314943, "sdk_test_command": 0.03794078303314943, "sz": 0.037077172249068896, "coverage": 0.037077172249068896, "pytest": 0.03629594126706623, "cat": 0.034926645491138636, "machine": 0.03375368775637902, "sc1091": 0.033224683484759585, "common": 0.033224683484759585, "warnings": 0.033224683484759585, "dt": 0.032727760355116674, "build": 0.03225924876626464, "source": 0.030250048290584433, "date": 0.030250048290584433, "shellcheck": 0.02990119899206971, "lib": 0.028637668829551204, "now": 0.028350035060606363, "install": 0.028350035060606363, "lc_all": 0.028072153489494222, "test": 0.028072153489494222, "eeuo": 0.027543149217874787, "pipefail": 0.027543149217874787, "dirname": 0.02729092250749156, "bash_source": 0.02729092250749156, "reports": 0.02729092250749156}, "norm": 0.5742651582122748, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::log \"INF\" \"Инициализация SDK рабочего окружения\" CONFIG_FILE=\"$SDK_ROOT/config/commands.sh\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::log \"INF\" \"Инициализация SDK рабочего окружения\"\n\nCONFIG_FILE=\"$SDK_ROOT/config/commands.sh\"\nBOARD_FILE=\"$SDK_ROOT/data/tasks.board.json\"\nSTATE_FILE=\"$SDK_ROOT/state/task_state.json\"\nLEGACY_STATE_FILE=\"$SDK_ROOT/state/task_selection.json\"\nJOURNAL_FILE=\"$SDK_ROOT/journal/task_events.jsonl\"\nTODO_FILE=\"$SDK_ROOT/todo.machine.md\"\nREPORTS_DIR=\"$SDK_ROOT/reports\"\nNOW=\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n\nmkdir -p \"$SDK_ROOT/config\" \"$SDK_ROOT/data\" \"$SDK_ROOT/state\" \"$SDK_ROOT/journal\" \"$REPORTS_DIR\"\n\nif [[ ! -f \"$CONFIG_FILE\" ]]; then\n  sdk::log \"INF\" \"Создаю config/commands.sh\"\n  cat <<'CFG' >\"$CONFIG_FILE\"\n# Определите наборы команд под ваш стек.\n# Примеры:\n# SDK_DEV_COMMANDS=(\"npm install\" \"npm run dev\")\n# SDK_VERIFY_COMMANDS=(\"npm run lint\" \"npm test\")\n# SDK_FIX_COMMANDS=(\"npm run lint -- --fix\")\n# SDK_SHIP_COMMANDS=(\"npm run build\" \"npm publish\")\n# SDK_REVIEW_LINTERS=(\"reviewdog -conf=.reviewdog.yml\")\n# SDK_TEST_COMMAND=\"pytest --maxfail=1 --disable-warnings --cov\"\n# SDK_COVERAGE_FILE=\"coverage"}
{"id": "scripts/init.sh:31-68", "path": "scripts/init.sh", "start": 1000, "end": 2200, "start_line": 31, "end_line": 68, "weights": {"commands": 0.24898418154720084, "configure": 0.2337709313760139, "echo": 0.18462918426066957, "config": 0.17473483294481096, "sh": 0.1587973490140889, "sdk_ship_commands": 0.14530281323573307, "board_file": 0.11688546568800695, "sdk_review_linters": 0.09959367261888033, "reviewdog": 0.09959367261888033, "sdk_coverage_file": 0.09959367261888033, "sdk_fix_commands": 0.09959367261888033, "sdk_dev_commands": 0.09686854215715537, "sdk_verify_commands": 0.09686854215715537, "npm": 0.09446480673559654, "sdk_test_command": 0.09446480673559654, "inf": 0.06733958332172017, "board": 0.06733958332172017, "log": 0.058668497730592295, "publish": 0.058442732844003475, "maxfail": 0.058442732844003475, "001": 0.05550720149245469, "tasks": 0.055078892292558336, "cov": 0.05323022647904438, "sdk": 0.052895787811901844, "conf": 0.05136980243012648, "yml": 0.05136980243012648, "v1": 0.05136980243012648, "xml": 0.049796836309440165, "init": 0.04843427107857769, "coverage": 0.04615729606516739, "setup": 0.04615729606516739, "pytest": 0.045184743210021215, "cat": 0.043480109693050134, "foundation": 0.04201989700283918, "warnings": 0.0413613406647007, "backlog": 0.0413613406647007, "build": 0.04015947295392128, "disable": 0.03908436565129039, "unassigned": 0.03811181279614422, "version": 0.03680739063788009, "agentcall": 0.03640717927917314, "failure_criteria": 0.03602207389159307, "success_criteria": 0.035650975481686185, "status": 0.035603994742775244, "now": 0.03529290078973445, "default": 0.03494696658896219, "cfg": 0.03397441373381602, "p0": 0.033669791660860086, "data": 0.03151357641935797, "owner": 0.030585292968279134, "fi": 0.0301510111884955, "run": 0.02994061029867167, "updated_at": 0.028045537382395208, "verify": 0.02601361212616729, "priority": 0.02519684980296794, "else": 0.024811744415387874, "size_points": 0.024811744415387874, "then": 0.024440646005480984, "epic": 0.023965951968390242, "title": 0.022459462184654888, "id": 0.021235387540991836, "json": 0.021059450740639734, "if": 0.014162457127114845}, "norm": 0.6328139907258473, "snippet": "SDK_SHIP_COMMANDS=(\"npm run build\" \"npm publish\") # SDK_REVIEW_LINTERS=(\"reviewdog -conf=.reviewdog.yml\") # SDK_TEST_COMMAND=\"pytest --maxfail=1 --disable-warnings --cov\" # SDK_COVERAGE_FILE=\"coverage.xml\" SDK_DEV_COMMANDS=(\"echo 'configure SDK_DEV_COMMANDS в config/commands.sh'\") SDK_VERIFY_COMMANDS=(\"echo 'configure…", "text": "SDK_SHIP_COMMANDS=(\"npm run build\" \"npm publish\")\n# SDK_REVIEW_LINTERS=(\"reviewdog -conf=.reviewdog.yml\")\n# SDK_TEST_COMMAND=\"pytest --maxfail=1 --disable-warnings --cov\"\n# SDK_COVERAGE_FILE=\"coverage.xml\"\n\nSDK_DEV_COMMANDS=(\"echo 'configure SDK_DEV_COMMANDS в config/commands.sh'\")\nSDK_VERIFY_COMMANDS=(\"echo 'configure SDK_VERIFY_COMMANDS в config/commands.sh'\")\nSDK_FIX_COMMANDS=(\"echo 'configure SDK_FIX_COMMANDS в config/commands.sh'\")\nSDK_SHIP_COMMANDS=(\"echo 'configure SDK_SHIP_COMMANDS в config/commands.sh'\")\nSDK_REVIEW_LINTERS=()\nSDK_TEST_COMMAND=\"\"\nSDK_COVERAGE_FILE=\"\"\nCFG\nelse\n  sdk::log \"INF\" \"config/commands.sh уже существует — пропускаю\"\nfi\n\nif [[ ! -f \"$BOARD_FILE\" ]]; then\n  sdk::log \"INF\" \"Создаю data/tasks.board.json\"\n  cat <<BOARD >\"$BOARD_FILE\"\n{\n  \"version\": \"v1\",\n  \"updated_at\": \"$NOW\",\n  \"tasks\": [\n    {\n      \"id\": \"T-001\",\n      \"title\": \"Foundation setup\",\n      \"epic\": \"default\",\n      \"status\": \"backlog\",\n      \"priority\": \"P0\",\n      \"size_points\": 8,\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [\n        \"Среда проходит agentcall verify.\",\n        \"Документация обновлена после init.\"\n      ],\n      \"failure_criteria\": [\n        \"Команда status па"}
{"id": "scripts/init.sh:62-99", "path": "scripts/init.sh", "start": 2000, "end": 3200, "start_line": 62, "end_line": 99, "weights": {"legacy": 0.1863057926766553, "state": 0.1680600349964204, "assignments": 0.14476469232645248, "json": 0.12898913578641838, "event": 0.11860995092630569, "task_selection": 0.10227478247700608, "agent": 0.08911667025336138, "data": 0.08272313810081469, "sys": 0.07316934495959865, "root": 0.07272659580019122, "task": 0.06886286812248353, "get": 0.06807211362686875, "argv": 0.06000471793894149, "board": 0.058922135406505156, "inf": 0.058922135406505156, "path": 0.058179636354185535, "ner": 0.054757615418040216, "selections": 0.054757615418040216, "inde": 0.054757615418040216, "import": 0.053916743171609466, "log": 0.051334935514268265, "legacy_state_file": 0.05113739123850304, "if": 0.04956859994490195, "sdk": 0.04628381433541412, "task_state": 0.04494857712636067, "else": 0.043420552726928775, "init": 0.04237998719375548, "true": 0.04173863817229125, "state_file": 0.041328352946823486, "events": 0.041328352946823486, "cwd": 0.04038763405702147, "parent": 0.037383417658617774, "loads": 0.03513953883468112, "exist_ok": 0.0341988199448791, "unassigned": 0.0333478361966262, "agentcall": 0.0318562818692765, "failure_criteria": 0.03151931465514394, "write_text": 0.03151931465514394, "success_criteria": 0.031194603546475415, "comments": 0.03057859576534192, "blockers": 0.030285829490136643, "sdk_root": 0.029727612017089018, "mkdir": 0.029727612017089018, "pathlib": 0.029461067703252578, "parents": 0.029461067703252578, "ensure_ascii": 0.029461067703252578, "conflicts": 0.029202250409741396, "read_text": 0.028950724722538748, "dumps": 0.028950724722538748, "len": 0.02801000583273673, "fi": 0.026382134789933565, "py": 0.026382134789933565, "exists": 0.025667467757134133, "python3": 0.02438978165319955, "tasks": 0.024097015377994274, "verify": 0.02276191061039638, "false": 0.022638755948500525, "encoding": 0.02251727691228822, "or": 0.02251727691228822, "dependencies": 0.02193350227601275, "then": 0.02138556525479586, "utf": 0.019918573725409464, "status": 0.015576747699964172, "in": 0.015143762432655148}, "norm": 0.483277742959026, "snippet": "ner\": \"unassigned\", \"success_criteria\": [ \"Среда проходит agentcall verify.\", \"Документация обновлена после init.\" ], \"failure_criteria\": [ \"Команда status падает или даёт пустой отчёт.\" ], \"blockers\": [], \"dependencies\": [], \"conflicts\": [], \"comments\": [] } ] } BOARD else sdk::log \"INF\" \"tasks.board.json уже…", "text": "ner\": \"unassigned\",\n      \"success_criteria\": [\n        \"Среда проходит agentcall verify.\",\n        \"Документация обновлена после init.\"\n      ],\n      \"failure_criteria\": [\n        \"Команда status падает или даёт пустой отчёт.\"\n      ],\n      \"blockers\": [],\n      \"dependencies\": [],\n      \"conflicts\": [],\n      \"comments\": []\n    }\n  ]\n}\nBOARD\nelse\n  sdk::log \"INF\" \"tasks.board.json уже существует — пропускаю\"\nfi\n\nif [[ -f \"$LEGACY_STATE_FILE\" && ! -f \"$STATE_FILE\" ]]; then\n  sdk::log \"INF\" \"Конвертирую legacy state/task_selection.json\"\n  python3 - \"$SDK_ROOT\" <<'PY'\nimport json, sys\nfrom pathlib import Path\nroot = Path(sys.argv[1]) if len(sys.argv) > 1 else Path.cwd()\nlegacy = root / \"state\" / \"task_selection.json\"\nstate = root / \"state\" / \"task_state.json\"\nassignments = {}\nif legacy.exists():\n    data = json.loads(legacy.read_text(encoding=\"utf-8\"))\n    for event in data.get(\"events\", []) or data.get(\"selections\", []):\n        task = event.get(\"task\")\n        agent = event.get(\"agent\")\n        if task and agent:\n            assignments[task] = agent\nstate.parent.mkdir(parents=True, exist_ok=True)\nstate.write_text(json.dumps({\"assignments\": assignments}, ensure_ascii=False, inde"}
{"id": "scripts/init.sh:95-147", "path": "scripts/init.sh", "start": 3000, "end": 4200, "start_line": 95, "end_line": 147, "weights": {"assignments": 0.1297091643245014, "state": 0.12548482613066056, "journal_file": 0.09163820509939745, "mvp": 0.08703529194016896, "todo_file": 0.0834649951191416, "inf": 0.07919134998634293, "program": 0.07529089567839634, "state_file": 0.07406040848070769, "fi": 0.07091517831534143, "log": 0.06899415333117655, "cat": 0.06817681199870262, "sdk": 0.06220544646679658, "then": 0.05748439940489128, "true": 0.056096729703559445, "sc2215": 0.049062823414564034, "sc2006": 0.049062823414564034, "sc2086": 0.049062823414564034, "sc1130": 0.049062823414564034, "sc1083": 0.049062823414564034, "1500": 0.049062823414564034, "task": 0.046275847378308935, "objectives": 0.045819102549698724, "kpis": 0.045819102549698724, "uptime_pct": 0.045819102549698724, "tti_ms": 0.045819102549698724, "q1": 0.045819102549698724, "q2": 0.045819102549698724, "q3": 0.045819102549698724, "q4": 0.045819102549698724, "q5": 0.045819102549698724, "q6": 0.045819102549698724, "q7": 0.045819102549698724, "m_mvp": 0.045819102549698724, "01t00": 0.045819102549698724, "if": 0.04441346555063216, "nt": 0.04351764597008448, "program_id": 0.04351764597008448, "99": 0.04351764597008448, "legacy": 0.0417324975595708, "missing_ok": 0.0417324975595708, "task_events": 0.0417324975595708, "12": 0.0417324975595708, "task_state": 0.04027392510521916, "v1": 0.04027392510521916, "project": 0.04027392510521916, "agent": 0.039924268273505904, "journal": 0.039040719666601095, "jsonl": 0.039040719666601095, "error_rate_pct": 0.039040719666601095, "unlink": 0.03797246852560491, "init": 0.03797246852560491, "due": 0.037030204240353845, "policies": 0.0347287476607396, "parent": 0.03349554222212153, "json": 0.03302121876132311, "machine": 0.03294359925022592, "green": 0.03294359925022592, "exist_ok": 0.030642142670611675, "disable": 0.030642142670611675, "milestones": 0.03025182135725622, "phase_progress": 0.029524047131610408, "shellcheck": 0.029183570216260037, "agentcall": 0.028543228554871746, "write_text": 0.02824130593100897}, "norm": 0.42801285027897157, "snippet": "nt\") if task and agent: assignments[task] = agent state.parent.mkdir(parents=True, exist_ok=True) state.write_text(json.dumps({\"assignments\": assignments}, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\") legacy.unlink(missing_ok=True) PY fi if [[ ! -f \"$STATE_FILE\" ]]; then sdk::log \"INF\" \"Создаю…", "text": "nt\")\n        if task and agent:\n            assignments[task] = agent\nstate.parent.mkdir(parents=True, exist_ok=True)\nstate.write_text(json.dumps({\"assignments\": assignments}, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\nlegacy.unlink(missing_ok=True)\nPY\nfi\n\nif [[ ! -f \"$STATE_FILE\" ]]; then\n  sdk::log \"INF\" \"Создаю state/task_state.json\"\n  cat <<'STATE' >\"$STATE_FILE\"\n{\n  \"assignments\": {}\n}\nSTATE\nfi\n\nif [[ ! -f \"$JOURNAL_FILE\" ]]; then\n  sdk::log \"INF\" \"Создаю journal/task_events.jsonl\"\n  : > \"$JOURNAL_FILE\"\nfi\n\nif [[ ! -f \"$TODO_FILE\" ]]; then\n  sdk::log \"INF\" \"Создаю базовый todo.machine.md\"\n  # shellcheck disable=SC2215,SC2006,SC2086,SC1130,SC1083\n  cat <<TODO >\"$TODO_FILE\"\n## Program\n```yaml\nprogram: v1\nupdated_at: $NOW\nprogram_id: default-program\nname: GPT-5 Codex Project\nobjectives:\n  - Запустить init и базовые проверки.\n  - Настроить agentcall status и task board.\n  - Определить следующий эпик.\nkpis: { uptime_pct: 99.9, tti_ms: 1500, error_rate_pct: 0.3 }\nprogress_pct: 0\nhealth: green\nphase_progress:\n  MVP: 0\n  Q1: 0\n  Q2: 0\n  Q3: 0\n  Q4: 0\n  Q5: 0\n  Q6: 0\n  Q7: 0\nmilestones:\n  - { id: m_mvp, title: \"MVP\", due: 2025-12-01T00:00:00Z, status: planned }\npolicies:\n "}
{"id": "scripts/init.sh:133-201", "path": "scripts/init.sh", "start": 4000, "end": 5200, "start_line": 133, "end_line": 201, "weights": {"bootstrap": 0.10573884356587077, "mvp": 0.09378803010794069, "agentcall": 0.09227336817307677, "board": 0.08533550645080057, "planned": 0.07243056249944745, "green": 0.07099913631514207, "task": 0.06648828646308755, "roadmap": 0.06219179797434913, "epic": 0.060741292057816657, "p1": 0.05963283236886166, "default": 0.05904832285721198, "title": 0.056923119674901185, "yaml": 0.05689033763386705, "when": 0.0554324516333832, "id": 0.053820723595272416, "spec": 0.05366255242545073, "data": 0.053247077398225554, "ct": 0.05286942178293538, "first": 0.05286942178293538, "deliverable": 0.05286942178293538, "planning": 0.05286942178293538, "scope_paths": 0.05244500816314119, "q1": 0.049374032919933974, "q2": 0.049374032919933974, "q3": 0.049374032919933974, "q4": 0.049374032919933974, "q5": 0.049374032919933974, "q6": 0.049374032919933974, "q7": 0.049374032919933974, "m_mvp": 0.049374032919933974, "01t00": 0.049374032919933974, "task_min_points": 0.049374032919933974, "define": 0.049374032919933974, "intent": 0.049374032919933974, "type": 0.048914070014072, "scripts": 0.048914070014072, "tasks": 0.0465321676264717, "md": 0.0457174627152554, "status": 0.04511885540679277, "12": 0.044970363749537494, "readme": 0.044970363749537494, "verify": 0.043954034282144734, "health": 0.04371621838331136, "priority": 0.04257398759811824, "size_points": 0.04192329228806917, "then": 0.04129626394029546, "init": 0.04091860832500529, "due": 0.03990323732796751, "big_tasks_planned": 0.03899495702057246, "policies": 0.03742321946200388, "machine": 0.035499568157571035, "milestones": 0.03259894542807782, "phase_progress": 0.031814705960787074, "now": 0.02981641618443083, "bundle_kb": 0.028967794867075205, "memory_mb": 0.028702521947534226, "epics": 0.028195276257681347, "latency_ms": 0.027952423870037414, "big": 0.027952423870037414, "given": 0.02748632713494883, "risks": 0.02748632713494883, "budgets": 0.02726240052802417, "created_at": 0.02726240052802417, "created_by": 0.02726240052802417}, "norm": 0.4109010530840231, "snippet": "ct: 0 health: green phase_progress: MVP: 0 Q1: 0 Q2: 0 Q3: 0 Q4: 0 Q5: 0 Q6: 0 Q7: 0 milestones: - { id: m_mvp, title: \"MVP\", due: 2025-12-01T00:00:00Z, status: planned } policies: task_min_points: 5 ``` ## Epics ```yaml id: default-epic title: \"Define first deliverable\" type: epic status: planned priority: P1…", "text": "ct: 0\nhealth: green\nphase_progress:\n  MVP: 0\n  Q1: 0\n  Q2: 0\n  Q3: 0\n  Q4: 0\n  Q5: 0\n  Q6: 0\n  Q7: 0\nmilestones:\n  - { id: m_mvp, title: \"MVP\", due: 2025-12-01T00:00:00Z, status: planned }\npolicies:\n  task_min_points: 5\n```\n\n## Epics\n```yaml\nid: default-epic\ntitle: \"Define first deliverable\"\ntype: epic\nstatus: planned\npriority: P1\nsize_points: 8\nscope_paths:\n  - scripts/**\n  - data/**\n  - docs/**\nspec: |\n  Intent: определить и реализовать первую поставку.\n  Given: пустой проект.\n  When: агент заполняет планы и задачи.\n  Then: roadmap и task board синхронизированы.\nbudgets: { latency_ms: 0, memory_mb: 0, bundle_kb: 0 }\nrisks: []\ndependencies: []\nbig_tasks_planned:\n  - task-bootstrap\nprogress_pct: 0\nhealth: green\ntests_required:\n  - agentcall verify\nverify_commands:\n  - agentcall verify\ndocs_updates:\n  - README.md\nartifacts:\n  - scripts/\naudit:\n  created_at: $NOW\n  created_by: gpt-5-codex\n```\n\n## Big Tasks\n```yaml\nid: task-bootstrap\ntitle: \"Заполнение плана и задач\"\ntype: planning\nstatus: planned\npriority: P1\nsize_points: 5\nparent_epic: default-epic\nscope_paths:\n  - todo.machine.md\n  - data/tasks.board.json\nspec: |\n  When: агент выполнит agentcall init.\n  Then: roadmap и task board з"}
{"id": "scripts/init.sh:192-230", "path": "scripts/init.sh", "start": 5000, "end": 5858, "start_line": 192, "end_line": 230, "weights": {"agentcall": 0.1806533452839984, "board": 0.16707035862097663, "log": 0.14555728550881128, "status": 0.13250094246045474, "sdk": 0.13123511912826283, "inf": 0.1253027689657325, "init": 0.12016603963799022, "json": 0.10449752772570603, "data": 0.07818558200245777, "fi": 0.07480504041702682, "acceptance": 0.07249857998370052, "tasks": 0.06832571448950275, "md": 0.06712943892366616, "readme": 0.06603243284742215, "then": 0.06063755211486421, "machine": 0.052125948180737215, "green": 0.052125948180737215, "task": 0.04881418499821617, "wrn": 0.04727794498762195, "roadmap": 0.04565980104445885, "p1": 0.043781066802455394, "default": 0.04335193323694044, "bundle_kb": 0.04253498993140157, "memory_mb": 0.0421454752647338, "sdk_root": 0.0421454752647338, "reports": 0.0421454752647338, "latency_ms": 0.04104406542942202, "when": 0.040697242971344624, "risks": 0.04035967022346917, "budgets": 0.04003086659811144, "dev": 0.04003086659811144, "spec": 0.03939782329969801, "sh": 0.03939782329969801, "tests_required": 0.03909279100122889, "verify_commands": 0.03909279100122889, "docs_updates": 0.038794936603631494, "scope_paths": 0.03850393004382518, "parent_epic": 0.03821946351405228, "artifacts": 0.03766901905911888, "null": 0.036635119932356006, "scripts": 0.03591159570653387, "planned": 0.035451245780320266, "health": 0.032095451471291885, "priority": 0.03125685165431466, "dependencies": 0.031095598163461118, "size_points": 0.030779125983645718, "else": 0.030779125983645718, "epic": 0.029729915100028405, "progress_pct": 0.029586882755041902, "if": 0.017568617701990568}, "norm": 0.4958333311749802, "snippet": ": planned priority: P1 size_points: 5 parent_epic: default-epic scope_paths: - todo.machine.md - data/tasks.board.json spec: | When: агент выполнит agentcall init. Then: roadmap и task board заполнены и готовы к работе. budgets: { latency_ms: 0, memory_mb: 0, bundle_kb: 0 } risks: [] dependencies: [] progress_pct: 0…", "text": ": planned\npriority: P1\nsize_points: 5\nparent_epic: default-epic\nscope_paths:\n  - todo.machine.md\n  - data/tasks.board.json\nspec: |\n  When: агент выполнит agentcall init.\n  Then: roadmap и task board заполнены и готовы к работе.\nbudgets: { latency_ms: 0, memory_mb: 0, bundle_kb: 0 }\nrisks: []\ndependencies: []\nprogress_pct: 0\nhealth: green\nacceptance:\n  - agentcall status выводит осмысленные данные.\n  - task board содержит минимум одну задачу.\ntests_required:\n  - agentcall status\nverify_commands:\n  - agentcall status\ndocs_updates:\n  - README.md\nartifacts:\n  - data/tasks.board.json\n```\nTODO\nfi\n\nsdk::log \"INF\" \"Генерация статус-отчёта\"\nif \"$SDK_ROOT/scripts/status.sh\" >/dev/null; then\n  sdk::log \"INF\" \"reports/status.json обновлён\"\nelse\n  sdk::log \"WRN\" \"Не удалось сгенерировать status.json на этапе init\"\nfi\n\nsdk::log \"INF\" \"Инициализация завершена\"\n"}
{"id": "scripts/generate-sbom.py:1-41", "path": "scripts/generate-sbom.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 41, "weights": {"dist": 0.2897404683828717, "metadata": 0.2535229098350127, "import": 0.1954966802769149, "packages": 0.1952553243620031, "name": 0.16328149990308927, "summary": 0.14783321118208467, "pkg": 0.14487023419143585, "package": 0.14156936508936277, "version": 0.1297526720328147, "or": 0.1088605042090481, "get": 0.08227420927563994, "importlib_metadata": 0.0782691474282095, "list": 0.06858557844288155, "asdict": 0.0650851081206677, "dataclass": 0.06024378097503873, "str": 0.05301851757329825, "combined": 0.04412124407784536, "distributions": 0.04412124407784536, "page": 0.04412124407784536, "generator": 0.041204228911599576, "to_json": 0.041204228911599576, "system_packages": 0.041204228911599576, "importlib": 0.03913457371410475, "collect_packages": 0.03913457371410475, "golang": 0.03621755854785896, "author": 0.03414790335036413, "home": 0.03414790335036413, "unknown": 0.033300543381613174, "dataclasses": 0.03254255406033385, "sort": 0.03254255406033385, "lower": 0.03254255406033385, "sbom": 0.03185686931354014, "optional": 0.03185686931354014, "lambda": 0.03185686931354014, "generate": 0.030655041366323122, "go": 0.030655041366323122, "shutil": 0.030121890487519364, "class": 0.030121890487519364, "json": 0.029695340612700637, "typing": 0.028313873017872557, "__future__": 0.027924900202978487, "annotations": 0.027924900202978487, "def": 0.026707723853301436, "python": 0.02655040209677195, "shellcheck": 0.02624421782037773, "subprocess": 0.025950534406562947, "key": 0.024882764585568175, "indent": 0.024882764585568175, "argparse": 0.024638868530347448, "in": 0.024404336582120528, "return": 0.024235058286011375, "system": 0.02373841426449129, "pathlib": 0.02373841426449129, "ensure_ascii": 0.02373841426449129, "dumps": 0.023327202654131945, "as": 0.021563731733031333, "usr": 0.020821399098245503, "env": 0.01965219816660683, "python3": 0.01965219816660683, "bin": 0.019076351348811606, "verify": 0.01834053229039133, "false": 0.018241299757065173, "append": 0.01795155947549726, "dict": 0.015977193679081722}, "norm": 0.6436664964147757, "snippet": "#!/usr/bin/env python3 \"\"\"Generate or verify combined SBOM (Python + system + Go).\"\"\" from __future__ import annotations import argparse import json import shutil import subprocess from dataclasses import asdict, dataclass from importlib import metadata as importlib_metadata from pathlib import Path from typing import…", "text": "#!/usr/bin/env python3\n\"\"\"Generate or verify combined SBOM (Python + system + Go).\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport shutil\nimport subprocess\nfrom dataclasses import asdict, dataclass\nfrom importlib import metadata as importlib_metadata\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\n\n\n@dataclass\nclass Package:\n    name: str\n    version: str\n    summary: str\n\n\ndef collect_packages() -> List[Package]:\n    packages: List[Package] = []\n    for dist in importlib_metadata.distributions():\n        name = dist.metadata.get(\"Name\")\n        if not name:\n            name = dist.metadata.get(\"Summary\") or dist.metadata.get(\"Author\") or dist.metadata.get(\"Generator\") or dist.metadata.get(\"Home-page\") or \"unknown\"\n        version = dist.version or \"0\"\n        summary = dist.metadata.get(\"Summary\", \"\")\n        packages.append(Package(name=name, version=version, summary=summary))\n    packages.sort(key=lambda pkg: pkg.name.lower())\n    return packages\n\n\ndef to_json(packages: List[Package]) -> str:\n    return json.dumps([asdict(pkg) for pkg in packages], ensure_ascii=False, indent=2) + \"\\n\"\n\n\nSYSTEM_PACKAGES = (\n    \"shellcheck\",\n    \"golang-"}
{"id": "scripts/generate-sbom.py:32-76", "path": "scripts/generate-sbom.py", "start": 1000, "end": 2200, "start_line": 32, "end_line": 76, "weights": {"pkg": 0.2936640372255564, "subprocess": 0.2404749521674833, "system_entries": 0.1533213231705126, "optional": 0.1476034944860693, "str": 0.13817951142540855, "system_version": 0.10221421544700841, "dpkg": 0.10221421544700841, "system_packages": 0.09545646364520569, "devnull": 0.09545646364520569, "stdout": 0.09337394135055337, "calledprocesserror": 0.090661762437676, "query": 0.08390401063587326, "pipe": 0.08390401063587326, "list": 0.07944496169633779, "true": 0.07791212458827701, "packages": 0.07539025023977342, "return": 0.07018068961990793, "cmd": 0.0665464460554039, "stderr": 0.062249294233702235, "def": 0.06187289359348166, "version": 0.060118738041870824, "check": 0.0576450712898996, "result": 0.05600440340967873, "none": 0.05552074803480898, "text": 0.05404135281540567, "ckages": 0.05110710772350421, "except": 0.050696841224369814, "try": 0.050322293626835504, "run": 0.04890299682116373, "to_json": 0.04772823182260284, "collect_system_packages": 0.04772823182260284, "run_command": 0.04772823182260284, "python3": 0.045527592419305825, "golang": 0.04195200531793663, "out": 0.04195200531793663, "which": 0.03857312941703526, "asdict": 0.03769512511988671, "dict": 0.03701383202320598, "go": 0.03550875624932428, "shutil": 0.03489118981470993, "oserror": 0.03489118981470993, "package": 0.032796902912369044, "venv": 0.032796902912369044, "pip": 0.031918898615220494, "shellcheck": 0.030399552308604205, "indent": 0.0288225356449498, "in": 0.028268356540956278, "ensure_ascii": 0.02749699652303574, "dumps": 0.027020676407702834, "strip": 0.02573608740914235, "name": 0.023641800506801466, "false": 0.021129505551933825, "or": 0.02101612511813567, "append": 0.020793889725784324, "json": 0.017198551438189116, "not": 0.016849825522059946, "if": 0.011566006653810457}, "norm": 0.6089037615044577, "snippet": "ckages def to_json(packages: List[Package]) -> str: return json.dumps([asdict(pkg) for pkg in packages], ensure_ascii=False, indent=2) + \"\\n\" SYSTEM_PACKAGES = ( \"shellcheck\", \"golang-go\", \"python3-venv\", \"python3-pip\", ) def system_version(pkg: str) -> Optional[str]: if not shutil.which(\"dpkg-query\"): return None…", "text": "ckages\n\n\ndef to_json(packages: List[Package]) -> str:\n    return json.dumps([asdict(pkg) for pkg in packages], ensure_ascii=False, indent=2) + \"\\n\"\n\n\nSYSTEM_PACKAGES = (\n    \"shellcheck\",\n    \"golang-go\",\n    \"python3-venv\",\n    \"python3-pip\",\n)\n\n\ndef system_version(pkg: str) -> Optional[str]:\n    if not shutil.which(\"dpkg-query\"):\n        return None\n    try:\n        result = subprocess.run(\n            [\"dpkg-query\", \"-W\", \"-f=${Version}\", pkg],\n            check=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.DEVNULL,\n            text=True,\n        )\n    except subprocess.CalledProcessError:\n        return None\n    return result.stdout.strip() or None\n\n\ndef collect_system_packages() -> List[Dict[str, Optional[str]]]:\n    system_entries: List[Dict[str, Optional[str]]] = []\n    for pkg in SYSTEM_PACKAGES:\n        system_entries.append({\n            \"name\": pkg,\n            \"version\": system_version(pkg),\n        })\n    return system_entries\n\n\ndef run_command(cmd: List[str]) -> Optional[str]:\n    try:\n        out = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=True, text=True)\n    except (OSError, subprocess.CalledProcessError)"}
{"id": "scripts/generate-sbom.py:73-103", "path": "scripts/generate-sbom.py", "start": 2000, "end": 3200, "start_line": 73, "end_line": 103, "weights": {"info": 0.21034524979622377, "reviewdog": 0.1574222567201657, "go_bin": 0.14837547403597995, "reviewdog_bin": 0.14837547403597995, "venv_reviewdog": 0.14837547403597995, "sbom": 0.1428420914381316, "run_command": 0.13856583432368566, "parser": 0.12048250496845594, "subprocess": 0.11635884782297579, "optional": 0.1071315685785987, "str": 0.10400608386858708, "version": 0.08726913586723184, "out": 0.08119742964761928, "which": 0.07465766983942307, "go": 0.06872662499869216, "shutil": 0.06753133512524502, "add_argument": 0.061778513448813854, "stdout": 0.06024125248422797, "python": 0.05952428857179517, "help": 0.05883784317794362, "check": 0.05578555286119316, "devnull": 0.04618861144122855, "collect_go_info": 0.04618861144122855, "environment": 0.04618861144122855, "calledprocesserror": 0.04386859472790774, "matches": 0.04386859472790774, "collect_packages": 0.04386859472790774, "verify": 0.04111829013490959, "return": 0.04075007784381751, "pipe": 0.04059871482380964, "current": 0.03935556418004142, "true": 0.03769941512335984, "existing": 0.037328834919711534, "packages": 0.036479153341825846, "dict": 0.03581983744181224, "path": 0.03503289931004721, "generate": 0.03436331249934608, "oserror": 0.03376566756262251, "argumentparser": 0.03376566756262251, "store_true": 0.03376566756262251, "if": 0.03357872899493358, "json": 0.033287518912624096, "parse_args": 0.03320927343772774, "description": 0.032688801493069915, "write": 0.032688801493069915, "cmd": 0.03219989325261479, "to": 0.03219989325261479, "__file__": 0.03173893830229262, "venv": 0.03173893830229262, "output": 0.03173893830229262, "stderr": 0.030120626242113986, "def": 0.02993849690007177, "resolve": 0.029762144285897584, "action": 0.028773415881927163, "argparse": 0.02761937682030883, "default": 0.02761937682030883, "parents": 0.026609996635195875, "text": 0.026149041684873708, "main": 0.026149041684873708, "args": 0.026149041684873708, "strip": 0.0249058910411055, "except": 0.02453072962469507, "try": 0.024349496916210727, "run": 0.02366274039733729}, "norm": 0.5677882898757677, "snippet": "d: List[str]) -> Optional[str]: try: out = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=True, text=True) except (OSError, subprocess.CalledProcessError): return None return out.stdout.strip() def collect_go_info() -> Dict[str, Optional[str]]: info: Dict[str, Optional[str]] = {} go_bin =…", "text": "d: List[str]) -> Optional[str]:\n    try:\n        out = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, check=True, text=True)\n    except (OSError, subprocess.CalledProcessError):\n        return None\n    return out.stdout.strip()\n\n\ndef collect_go_info() -> Dict[str, Optional[str]]:\n    info: Dict[str, Optional[str]] = {}\n    go_bin = shutil.which(\"go\")\n    if go_bin:\n        info[\"go\"] = run_command([go_bin, \"version\"])\n    reviewdog_bin = shutil.which(\"reviewdog\")\n    if reviewdog_bin:\n        info[\"reviewdog\"] = run_command([reviewdog_bin, \"version\"])\n    else:\n        venv_reviewdog = Path(__file__).resolve().parents[2] / \".venv\" / \"bin\" / \"reviewdog\"\n        if venv_reviewdog.exists():\n            info[\"reviewdog\"] = run_command([str(venv_reviewdog), \"-version\"])\n    return info\n\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"Generate or verify Python SBOM\")\n    parser.add_argument(\"--output\", default=\"sbom/python.json\", help=\"Path to write SBOM JSON\")\n    parser.add_argument(\"--check\", action=\"store_true\", help=\"Verify existing SBOM matches current environment\")\n    args = parser.parse_args()\n\n    packages = collect_packages()\n    s"}
{"id": "scripts/generate-sbom.py:98-130", "path": "scripts/generate-sbom.py", "start": 3000, "end": 4056, "start_line": 98, "end_line": 130, "weights": {"output_path": 0.42088206360532876, "sbom": 0.3473023399672219, "sbom_json": 0.1803780272594266, "existing": 0.13614045676600678, "print": 0.10052236197408372, "pkg": 0.09871060074808619, "args": 0.09536709320365706, "packages": 0.08869441204679225, "parser": 0.07323446380435557, "check": 0.06781773092929365, "return": 0.06605241375991336, "ite": 0.060126009086475536, "mismatch": 0.060126009086475536, "verified": 0.060126009086475536, "written": 0.060126009086475536, "environment": 0.05615086096776804, "collect_system_packages": 0.05615086096776804, "collect_go_info": 0.05615086096776804, "regenerate": 0.05615086096776804, "if": 0.054428266606166856, "matches": 0.053330448492750586, "collect_packages": 0.053330448492750586, "detected": 0.05114276661712107, "encoding": 0.049449706160319226, "current": 0.04784401919926604, "true": 0.045830661522515886, "asdict": 0.044347206023396125, "found": 0.044347206023396125, "utf": 0.04374275014207569, "via": 0.043412792495902734, "go": 0.04177500735214621, "store_true": 0.041048458605541085, "parent": 0.041048458605541085, "json": 0.04046717985456263, "parse_args": 0.04037205790468863, "not": 0.039646648287199875, "to": 0.03914496826788465, "output": 0.03858459166161064, "lock": 0.03805452086484323, "add_argument": 0.03755164542967117, "exist_ok": 0.03755164542967117, "__name__": 0.036617231902177784, "__main__": 0.036617231902177784, "python": 0.036181430308346085, "update": 0.036181430308346085, "help": 0.035764179186593185, "action": 0.034979446758421254, "write_text": 0.03460944354290315, "indent": 0.033908865464646824, "mkdir": 0.0326420837834703, "systemexit": 0.0326420837834703, "system": 0.0323494076741597, "ensure_ascii": 0.0323494076741597, "parents": 0.0323494076741597, "dumps": 0.031789031067885685, "read_text": 0.031789031067885685, "main": 0.031789031067885685, "sh": 0.03051400039878571, "raise": 0.030277749893108646, "exists": 0.028183886164696303, "scripts": 0.027813882949178196, "verify": 0.024993470474160732, "false": 0.0248582418258045, "path": 0.021294507423754185}, "norm": 0.7026232120120808, "snippet": "ite SBOM JSON\") parser.add_argument(\"--check\", action=\"store_true\", help=\"Verify existing SBOM matches current environment\") args = parser.parse_args() packages = collect_packages() sbom = { \"python\": [asdict(pkg) for pkg in packages], \"system\": collect_system_packages(), \"go\": collect_go_info(), } sbom_json =…", "text": "ite SBOM JSON\")\n    parser.add_argument(\"--check\", action=\"store_true\", help=\"Verify existing SBOM matches current environment\")\n    args = parser.parse_args()\n\n    packages = collect_packages()\n    sbom = {\n        \"python\": [asdict(pkg) for pkg in packages],\n        \"system\": collect_system_packages(),\n        \"go\": collect_go_info(),\n    }\n    sbom_json = json.dumps(sbom, ensure_ascii=False, indent=2) + \"\\n\"\n    output_path = Path(args.output)\n\n    if args.check:\n        if not output_path.exists():\n            print(f\"SBOM not found: {output_path}\")\n            return 1\n        existing = output_path.read_text(encoding=\"utf-8\")\n        if existing != sbom_json:\n            print(\"SBOM mismatch detected. Regenerate via scripts/update-lock.sh\")\n            return 1\n        print(\"SBOM verified\")\n        return 0\n\n    output_path.parent.mkdir(parents=True, exist_ok=True)\n    output_path.write_text(sbom_json, encoding=\"utf-8\")\n    print(f\"SBOM written to {output_path}\")\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/roadmap-status.sh:1-57", "path": "scripts/roadmap-status.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 57, "weights": {"import": 0.1704464784134751, "mode": 0.16882833781311254, "todo_file": 0.12620714987773426, "sdk_root": 0.10740298535206355, "re": 0.10308993749803823, "sys": 0.08811792081155966, "full": 0.08726913586723184, "argv": 0.081296714626953, "todo_path": 0.07655739622097764, "machine": 0.06641854687545548, "script_dir": 0.05470988553056942, "progress": 0.05470988553056942, "path": 0.05254934896507081, "fi": 0.047658049943105796, "py": 0.047658049943105796, "name": 0.04575832356155122, "roadmap_skip_progress": 0.04386859472790774, "collections": 0.04386859472790774, "75": 0.04386859472790774, "extract_section": 0.04386859472790774, "md": 0.042767948991690535, "status_progress": 0.04206904995924475, "escape": 0.04206904995924475, "blocks": 0.04206904995924475, "findall": 0.04206904995924475, "sdk": 0.04180473552876114, "case": 0.04059871482380964, "shift": 0.04059871482380964, "esac": 0.04059871482380964, "defaultdict": 0.03935556418004142, "then": 0.03863198884737317, "list": 0.03844111049822796, "rf": 0.03827869811048882, "blocked": 0.037328834919711534, "utf": 0.03598193963299774, "compact": 0.0357105228595329, "pattern": 0.0357105228595329, "ready": 0.03500881820639073, "json": 0.033287518912624096, "sc1091": 0.032688801493069915, "common": 0.032688801493069915, "die": 0.032688801493069915, "backlog": 0.032688801493069915, "typing": 0.03173893830229262, "disable": 0.030889256724406927, "printf": 0.030495787658524412, "wrn": 0.030120626242113986, "source": 0.029762144285897584, "date": 0.029762144285897584, "str": 0.02971602396245345, "shellcheck": 0.02941892158897181, "done": 0.029089711955743947, "review": 0.029089711955743947, "in_progress": 0.028469058398194524, "lib": 0.028175770945203602, "lc_all": 0.02761937682030883, "eeuo": 0.027098904875650996, "pipefail": 0.027098904875650996, "dirname": 0.026850746338015888, "bash_source": 0.026850746338015888, "cd": 0.026609996635195875, "pathlib": 0.026609996635195875, "yaml": 0.026609996635195875, "bash": 0.026376226176540615}, "norm": 0.4489220975841559, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" MODE=\"${1:-full}\" case \"$MODE\" in full|compact|json) shift || true ;; *) MODE=\"full\" ;; esac TODO_FILE=\"$SDK_ROOT/todo.machine.md\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nMODE=\"${1:-full}\"\ncase \"$MODE\" in\n  full|compact|json)\n    shift || true\n    ;;\n  *)\n    MODE=\"full\"\n    ;;\nesac\n\nTODO_FILE=\"$SDK_ROOT/todo.machine.md\"\nif [[ ! -f \"$TODO_FILE\" ]]; then\n  sdk::die \"todo.machine.md не найден — дорожная карта недоступна\"\nfi\n\nif [[ -z \"${ROADMAP_SKIP_PROGRESS:-}\" ]]; then\n  \"$SDK_ROOT/scripts/progress.py\" || sdk::log \"WRN\" \"progress завершился с предупреждением\"\n  printf '\\n'\nfi\n\npython3 - \"$MODE\" \"$TODO_FILE\" \"$SDK_ROOT\" <<'PY'\nimport json\nimport re\nimport sys\nfrom collections import defaultdict\nfrom datetime import date\nfrom pathlib import Path\nfrom typing import Dict, List\n\nmode = sys.argv[1]\ntodo_path = Path(sys.argv[2])\nsdk_root = Path(sys.argv[3])\n\nSTATUS_PROGRESS = {\n    \"done\": 1.0,\n    \"review\": 0.9,\n    \"ready\": 0.75,\n    \"in_progress\": 0.5,\n    \"backlog\": 0.0,\n    \"blocked\": 0.0,\n}\n\ntext = todo_path.read_text(encoding=\"utf-8\")\n\n\ndef extract_section(name: str) -> List[str]:\n    pattern = rf\"## {re.escape(name)}\\n```yaml\\n(.*?)\\n```\"\n    blocks = re.findall"}
{"id": "scripts/roadmap-status.sh:48-86", "path": "scripts/roadmap-status.sh", "start": 1000, "end": 2200, "start_line": 48, "end_line": 86, "weights": {"match": 0.27772869681525164, "re": 0.27714151218984806, "value": 0.19683682879477912, "block": 0.18387865912139856, "pattern": 0.1440034092547018, "blocks": 0.12723322426698414, "field": 0.12723322426698414, "group": 0.12723322426698414, "str": 0.10485166178621787, "escape": 0.08482214951132276, "cast": 0.08482214951132276, "search": 0.08482214951132276, "default": 0.08353177379800719, "not": 0.08219427083931681, "stripped": 0.08185757135207147, "systemexit": 0.0812071352661944, "if": 0.0789873625138275, "rf": 0.07717981407643275, "raise": 0.07532513388041663, "name": 0.06919551367844332, "line": 0.06311481509291074, "int": 0.06022661660221606, "phase_progress": 0.060008225877256925, "return": 0.05477517238626962, "text": 0.05272327103942017, "is": 0.05184412923014739, "strip": 0.05021675592027776, "endswith": 0.04656412860741741, "parse_phase_progress": 0.04656412860741741, "def": 0.04527284897084024, "extract_section": 0.044225249969598056, "findall": 0.04241107475566138, "parse_scalar": 0.04241107475566138, "todo_path": 0.038589907038216374, "blocked": 0.037632321382473424, "none": 0.03611105563239608, "startswith": 0.03464268902373101, "machine": 0.03347926753071741, "splitlines": 0.03295456410683471, "yaml": 0.026826338071254383, "read_text": 0.026361635519710085, "program": 0.025505045961516377, "data": 0.02510837796013888, "md": 0.021557827947031004, "encoding": 0.02050353670062017, "list": 0.01937681992593605, "utf": 0.018137237863787483, "dict": 0.01805552781619804, "in": 0.013789442215100626}, "norm": 0.6516298422941538, "snippet": ", \"blocked\": 0.0, } text = todo_path.read_text(encoding=\"utf-8\") def extract_section(name: str) -> List[str]: pattern = rf\"## {re.escape(name)}\\n```yaml\\n(.*?)\\n```\" blocks = re.findall(pattern, text, re.S) if not blocks: raise SystemExit(f\"Раздел '{name}' отсутствует в todo.machine.md\") return blocks def…", "text": ",\n    \"blocked\": 0.0,\n}\n\ntext = todo_path.read_text(encoding=\"utf-8\")\n\n\ndef extract_section(name: str) -> List[str]:\n    pattern = rf\"## {re.escape(name)}\\n```yaml\\n(.*?)\\n```\"\n    blocks = re.findall(pattern, text, re.S)\n    if not blocks:\n        raise SystemExit(f\"Раздел '{name}' отсутствует в todo.machine.md\")\n    return blocks\n\n\ndef parse_scalar(block: str, field: str, cast=str, default=None):\n    pattern = rf\"^\\s*(?:-\\s*)?{re.escape(field)}:\\s*(.+)$\"\n    match = re.search(pattern, block, re.M)\n    if not match:\n        if default is not None:\n            return default\n        raise SystemExit(f\"Поле '{field}' отсутствует в блоке:\\n{block}\")\n    value = match.group(1).strip()\n    if value.startswith('\"') and value.endswith('\"'):\n        value = value[1:-1]\n    if cast is int:\n        return int(re.match(r\"-?\\d+\", value).group(0))\n    return value\n\n\ndef parse_phase_progress(block: str) -> Dict[str, int]:\n    match = re.search(r\"phase_progress:\\n((?:\\s{2,}.+\\n)+)\", block)\n    if not match:\n        raise SystemExit(\"Отсутствует блок phase_progress в Program\")\n    data = {}\n    for line in match.group(1).splitlines():\n        stripped = line.strip()\n        if not stripped:\n     "}
{"id": "scripts/roadmap-status.sh:80-114", "path": "scripts/roadmap-status.sh", "start": 2000, "end": 3200, "start_line": 80, "end_line": 114, "weights": {"group": 0.3764529419033448, "line": 0.20008047052649533, "inline_matches": 0.1896758637160981, "section_match": 0.17713570573337137, "stripped": 0.15569816406656894, "match": 0.15093061726778773, "block": 0.1398994334346311, "re": 0.13178507473976023, "raw_line": 0.11809047048891425, "items": 0.10697023538331886, "part": 0.10379877604437929, "data": 0.09551537595145615, "strip": 0.09551537595145615, "due": 0.09543867072256146, "splitlines": 0.0835754924771272, "milestones": 0.07796861174550572, "if": 0.07154230919882756, "key": 0.0713134902555459, "value": 0.0713134902555459, "in": 0.06994232546215987, "systemexit": 0.06864933084358701, "program": 0.06468290006735081, "raise": 0.06367691730097076, "finditer": 0.06322528790536602, "not": 0.06253543492723279, "continue": 0.06225438386825011, "parse_milestones": 0.05904523524445712, "rstrip": 0.05904523524445712, "lstrip": 0.05904523524445712, "search": 0.05377899170047783, "current": 0.05031020575592924, "list": 0.04914121342041513, "title": 0.04538200606383875, "startswith": 0.04392835824658674, "split": 0.04316435853366176, "id": 0.04290861812406598, "phase_progress": 0.03804645248918866, "status": 0.03597104623496881, "return": 0.03472858867789259, "append": 0.025724399660764112, "int": 0.02545661114114287, "dict": 0.022895153828787207, "def": 0.01913594647221082, "str": 0.018993747274970246}, "norm": 0.6978974758281047, "snippet": "t match: raise SystemExit(\"Отсутствует блок phase_progress в Program\") data = {} for line in match.group(1).splitlines(): stripped = line.strip() if not stripped: continue key, value = [part.strip() for part in stripped.split(\":\", 1)] data[key] = int(re.match(r\"-?\\d+\", value).group(0)) return data def…", "text": "t match:\n        raise SystemExit(\"Отсутствует блок phase_progress в Program\")\n    data = {}\n    for line in match.group(1).splitlines():\n        stripped = line.strip()\n        if not stripped:\n            continue\n        key, value = [part.strip() for part in stripped.split(\":\", 1)]\n        data[key] = int(re.match(r\"-?\\d+\", value).group(0))\n    return data\n\n\ndef parse_milestones(block: str) -> List[dict]:\n    items = []\n    inline_matches = list(re.finditer(r\"- \\{ id: ([^,]+), title: \\\"([^\\\"]+)\\\", due: ([^,]+), status: ([^}]+) \\}\", block))\n    if inline_matches:\n        for m in inline_matches:\n            items.append({\n                \"id\": m.group(1),\n                \"title\": m.group(2),\n                \"due\": m.group(3),\n                \"status\": m.group(4).strip(),\n            })\n        return items\n\n    section_match = re.search(r\"milestones:\\n((?:\\s*- .+\\n(?:\\s{1,}.+\\n)*)+)\", block)\n    if not section_match:\n        raise SystemExit(\"Не удалось разобрать milestones для Program\")\n    current = {}\n    for raw_line in section_match.group(1).splitlines():\n        line = raw_line.rstrip()\n        if not line:\n            continue\n        if line.lstrip().startswith(\"-\"):\n   "}
{"id": "scripts/roadmap-status.sh:107-139", "path": "scripts/roadmap-status.sh", "start": 3000, "end": 4200, "start_line": 107, "end_line": 139, "weights": {"current": 0.3614881450611212, "strip": 0.2573608740914235, "block": 0.25130083413257803, "parse_scalar": 0.24150750902529394, "line": 0.2156422849007783, "part": 0.18645335696860724, "content": 0.1550719547320441, "items": 0.12810015842199912, "key": 0.12810015842199912, "value": 0.12810015842199912, "raw_line": 0.10606273738356187, "lstrip": 0.10606273738356187, "if": 0.08995782952963688, "in": 0.07852321261376743, "split": 0.07753597736602205, "ram": 0.056785675248338004, "parse_sca": 0.056785675248338004, "section_match": 0.053031368691780933, "rstrip": 0.053031368691780933, "parse_epic": 0.053031368691780933, "group": 0.04830150180505879, "cast": 0.04830150180505879, "append": 0.04620864383507627, "priority": 0.04572761630908997, "size_points": 0.04502872134644466, "title": 0.0407597647054848, "startswith": 0.039454173610360306, "id": 0.03853829590772593, "splitlines": 0.03753158689945064, "not": 0.03744405671568877, "milestones": 0.035013682126453956, "status": 0.03230732856288865, "return": 0.03119141760884797, "systemexit": 0.030828634684388612, "program": 0.029047413456171425, "raise": 0.02859565267682483, "continue": 0.02795682979268639, "int": 0.022863808154544984, "else": 0.02251436067322233, "progress_pct": 0.021642256830076947, "dict": 0.02056324001289221, "def": 0.01718691488707824, "str": 0.017059198941408463}, "norm": 0.7471017935387199, "snippet": "ram\") current = {} for raw_line in section_match.group(1).splitlines(): line = raw_line.rstrip() if not line: continue if line.lstrip().startswith(\"-\"): if current: items.append(current) current = {} content = line.lstrip()[1:].strip() if content and \":\" in content: key, value = [part.strip() for part in…", "text": "ram\")\n    current = {}\n    for raw_line in section_match.group(1).splitlines():\n        line = raw_line.rstrip()\n        if not line:\n            continue\n        if line.lstrip().startswith(\"-\"):\n            if current:\n                items.append(current)\n            current = {}\n            content = line.lstrip()[1:].strip()\n            if content and \":\" in content:\n                key, value = [part.strip() for part in content.split(\":\", 1)]\n                current[key] = value.strip().strip('\"').strip(\"'\")\n        else:\n            if \":\" in line:\n                key, value = [part.strip() for part in line.split(\":\", 1)]\n                current[key] = value.strip().strip('\"').strip(\"'\")\n    if current:\n        items.append(current)\n    if not items:\n        raise SystemExit(\"Не удалось разобрать milestones для Program\")\n    return items\n\n\ndef parse_epic(block: str) -> dict:\n    return {\n        \"id\": parse_scalar(block, \"id\"),\n        \"title\": parse_scalar(block, \"title\"),\n        \"status\": parse_scalar(block, \"status\"),\n        \"priority\": parse_scalar(block, \"priority\"),\n        \"size_points\": parse_scalar(block, \"size_points\", cast=int),\n        \"progress_pct\": parse_sca"}
{"id": "scripts/roadmap-status.sh:136-169", "path": "scripts/roadmap-status.sh", "start": 4000, "end": 5200, "start_line": 136, "end_line": 169, "weights": {"parse_scalar": 0.6054938261991298, "block": 0.5654268767983006, "cast": 0.1863057926766553, "extract_section": 0.14570640391769357, "widths": 0.12398505884047047, "idx": 0.1162792890426549, "rows": 0.10397038736287526, "health": 0.0905550237940021, "priority": 0.08818897431038779, "int": 0.08818897431038779, "headers": 0.08714446354152029, "size_points": 0.08684110545385755, "progress_pct": 0.0834772763445825, "str": 0.08224970918179081, "header": 0.07609019196283774, "row": 0.07609019196283774, "list": 0.06383970136312858, "status": 0.06230699079985669, "title": 0.05895608823471908, "le": 0.054757615418040216, "parent_epic": 0.053916743171609466, "parse_big_task": 0.04856880130589786, "epic_blocks": 0.04856880130589786, "big_task_blocks": 0.04856880130589786, "format_table": 0.04856880130589786, "in": 0.045431287297965445, "program_block": 0.04237998719375548, "cell": 0.04237998719375548, "enumerate": 0.039536650308768566, "max": 0.039536650308768566, "id": 0.037161928196735715, "def": 0.03314619299650803, "return": 0.030077438408531974, "epics": 0.029202250409741396, "big": 0.028950724722538748, "program": 0.02801000583273673, "len": 0.02801000583273673, "tasks": 0.024097015377994274, "dict": 0.019828838583860347, "not": 0.018053384487921372, "if": 0.012392149986225488}, "norm": 0.9433088182888967, "snippet": "\"status\": parse_scalar(block, \"status\"), \"priority\": parse_scalar(block, \"priority\"), \"size_points\": parse_scalar(block, \"size_points\", cast=int), \"progress_pct\": parse_scalar(block, \"progress_pct\", cast=int), \"health\": parse_scalar(block, \"health\"), } def parse_big_task(block: str) -> dict: return { \"id\":…", "text": "    \"status\": parse_scalar(block, \"status\"),\n        \"priority\": parse_scalar(block, \"priority\"),\n        \"size_points\": parse_scalar(block, \"size_points\", cast=int),\n        \"progress_pct\": parse_scalar(block, \"progress_pct\", cast=int),\n        \"health\": parse_scalar(block, \"health\"),\n    }\n\n\ndef parse_big_task(block: str) -> dict:\n    return {\n        \"id\": parse_scalar(block, \"id\"),\n        \"title\": parse_scalar(block, \"title\"),\n        \"status\": parse_scalar(block, \"status\"),\n        \"priority\": parse_scalar(block, \"priority\"),\n        \"size_points\": parse_scalar(block, \"size_points\", cast=int),\n        \"parent_epic\": parse_scalar(block, \"parent_epic\"),\n        \"progress_pct\": parse_scalar(block, \"progress_pct\", cast=int),\n        \"health\": parse_scalar(block, \"health\"),\n    }\n\n\nprogram_block = extract_section(\"Program\")[0]\nepic_blocks = extract_section(\"Epics\")\nbig_task_blocks = extract_section(\"Big Tasks\")\n\n\ndef format_table(title: str, headers: List[str], rows: List[List[str]]) -> str:\n    if not rows:\n        return \"\"\n\n    widths = [len(header) for header in headers]\n    for row in rows:\n        for idx, cell in enumerate(row):\n            widths[idx] = max(widths[idx], le"}
{"id": "scripts/roadmap-status.sh:162-199", "path": "scripts/roadmap-status.sh", "start": 5000, "end": 6200, "start_line": 162, "end_line": 199, "weights": {"program_block": 0.199435233852967, "widths": 0.19448636680858114, "border": 0.19251723760377615, "idx": 0.18239888477279204, "cell": 0.15954818708237356, "block": 0.1520475635087867, "render_row": 0.14438792820283214, "row": 0.14322859663592985, "parse_scalar": 0.13150997130116848, "in": 0.11402362302234464, "lines": 0.10806998973903278, "char": 0.10307315843395805, "rows": 0.0978544822238826, "str": 0.09289378919355197, "cells": 0.09142362598757243, "parts": 0.08460908635550245, "headers": 0.08201831862731321, "board_path": 0.07779454672343245, "join": 0.07726386533664424, "enumerate": 0.07442192999297612, "header": 0.07161429831796493, "return": 0.056616354651354305, "len": 0.052724716861622084, "parse_phase_progress": 0.04812930940094404, "parse_milestones": 0.04812930940094404, "parse_epic": 0.04812930940094404, "name": 0.04768094219859119, "epic_blocks": 0.04571181299378622, "parse_big_task": 0.04571181299378622, "big_task_blocks": 0.04571181299378622, "board_tasks": 0.04571181299378622, "cast": 0.04383665710038949, "health": 0.042614128844236286, "ljust": 0.042304543177751223, "append": 0.041937256589817125, "list": 0.040056283208237536, "progress_pct": 0.03928342416215647, "max": 0.03721096499648806, "warnings": 0.034062280547400584, "milestones": 0.031777123274428797, "def": 0.03119641693788991, "phase_progress": 0.03101265455001093, "big_tasks": 0.02966523732248841, "sdk_root": 0.027978928957260254, "board": 0.02772806372070831, "epics": 0.027484470973874256, "program": 0.026362358430811042, "data": 0.025952357051235983, "if": 0.02332639997407151, "tasks": 0.022679543885171082, "int": 0.020750346896561835, "title": 0.0184960276814805, "json": 0.01734307708052684, "not": 0.01699142069451423}, "norm": 0.6325117409264053, "snippet": "-> str: if not rows: return \"\" widths = [len(header) for header in headers] for row in rows: for idx, cell in enumerate(row): widths[idx] = max(widths[idx], len(cell)) def border(char: str) -> str: return \"+\" + \"+\".join(char * (w + 2) for w in widths) + \"+\" def render_row(cells: List[str]) -> str: parts = [f\"…", "text": "-> str:\n    if not rows:\n        return \"\"\n\n    widths = [len(header) for header in headers]\n    for row in rows:\n        for idx, cell in enumerate(row):\n            widths[idx] = max(widths[idx], len(cell))\n\n    def border(char: str) -> str:\n        return \"+\" + \"+\".join(char * (w + 2) for w in widths) + \"+\"\n\n    def render_row(cells: List[str]) -> str:\n        parts = [f\" {cell.ljust(widths[idx])} \" for idx, cell in enumerate(cells)]\n        return \"|\" + \"|\".join(parts) + \"|\"\n\n    lines = [title, border(\"-\"), render_row(headers), border(\"=\")]\n    for row in rows:\n        lines.append(render_row(row))\n    lines.append(border(\"-\"))\n    return \"\\n\".join(lines)\n\nprogram = {\n    \"name\": parse_scalar(program_block, \"name\"),\n    \"progress_pct\": parse_scalar(program_block, \"progress_pct\", cast=int),\n    \"health\": parse_scalar(program_block, \"health\"),\n    \"phase_progress\": parse_phase_progress(program_block),\n    \"milestones\": parse_milestones(program_block),\n}\n\nepics = [parse_epic(block) for block in epic_blocks]\nbig_tasks = [parse_big_task(block) for block in big_task_blocks]\n\nwarnings: List[str] = []\n\nboard_path = sdk_root / \"data\" / \"tasks.board.json\"\nboard_tasks = []\nif board_path."}
{"id": "scripts/roadmap-status.sh:192-230", "path": "scripts/roadmap-status.sh", "start": 6000, "end": 7200, "start_line": 192, "end_line": 230, "weights": {"board_tasks": 0.18597284602600206, "board": 0.16921228629560456, "float": 0.16818924570445665, "defaultdict": 0.16684068233590213, "task": 0.14832002364842606, "setdefault": 0.1365055303700593, "board_path": 0.11868655205241617, "block": 0.11598500036888218, "tasks": 0.11533614198014354, "warnings": 0.10393362526001716, "exception": 0.08342034116795106, "size": 0.08342034116795106, "exc": 0.0715716714147896, "json": 0.0705581597464169, "backlog": 0.06928908350667812, "get": 0.06516304894195984, "big_tasks": 0.06034467079275421, "in": 0.05798637239170519, "systemexit": 0.0569144024942559, "raise": 0.0527919741725997, "aggregation": 0.05241754638308124, "epic_tot": 0.05241754638308124, "except": 0.051996760230122896, "try": 0.05161260884803642, "epic_totals": 0.04895203263856702, "big_totals": 0.04895203263856702, "ratio": 0.04895203263856702, "epic_blocks": 0.046493211506500515, "parse_big_task": 0.046493211506500515, "big_task_blocks": 0.046493211506500515, "status_progress": 0.04458600166620812, "or": 0.04311000024232959, "append": 0.042654132770839646, "size_points": 0.04156497355056431, "if": 0.03558771278095525, "big_progress": 0.03464454175333906, "not": 0.03456374466063579, "epic_progress": 0.034126382592514826, "loads": 0.03363784914089133, "status": 0.02982214944266645, "default": 0.02927181816853244, "sdk_root": 0.02845720124712795, "big_task": 0.028202047715934094, "epics": 0.02795429099052168, "read_text": 0.027713514264310603, "big": 0.027713514264310603, "data": 0.02639598708629985, "as": 0.025618450520438936, "exists": 0.024570567425632676, "encoding": 0.021555000121164795, "else": 0.020782486775282154, "list": 0.020370502999060975, "epic": 0.02007404523848072, "utf": 0.019067352626032995, "none": 0.018981452319592813, "str": 0.015746952868992428}, "norm": 0.5530948288874316, "snippet": "or block in epic_blocks] big_tasks = [parse_big_task(block) for block in big_task_blocks] warnings: List[str] = [] board_path = sdk_root / \"data\" / \"tasks.board.json\" board_tasks = [] if board_path.exists(): try: board = json.loads(board_path.read_text(encoding=\"utf-8\")) board_tasks = board.get(\"tasks\", []) except…", "text": "or block in epic_blocks]\nbig_tasks = [parse_big_task(block) for block in big_task_blocks]\n\nwarnings: List[str] = []\n\nboard_path = sdk_root / \"data\" / \"tasks.board.json\"\nboard_tasks = []\nif board_path.exists():\n    try:\n        board = json.loads(board_path.read_text(encoding=\"utf-8\"))\n        board_tasks = board.get(\"tasks\", [])\n    except Exception as exc:\n        warnings.append(f\"Не удалось прочитать tasks.board.json: {exc}\")\nelse:\n    warnings.append(\"tasks.board.json отсутствует\")\n\nfor task in board_tasks:\n    task.setdefault(\"epic\", \"default\")\n    task.setdefault(\"status\", \"backlog\")\n    task.setdefault(\"size_points\", 5)\n    task.setdefault(\"big_task\", None)\n\nif not epics:\n    raise SystemExit(\"Не заданы эпики для дорожной карты\")\nif not big_tasks:\n    raise SystemExit(\"Не заданы Big Tasks для дорожной карты\")\n\n# Aggregation из task board\nepic_totals = defaultdict(float)\nepic_progress = defaultdict(float)\nbig_totals = defaultdict(float)\nbig_progress = defaultdict(float)\nfor task in board_tasks:\n    try:\n        size = float(task.get(\"size_points\", 5) or 5)\n    except Exception:\n        size = 5.0\n    ratio = STATUS_PROGRESS.get(task.get(\"status\", \"backlog\"), 0.0)\n    epic_tot"}
{"id": "scripts/roadmap-status.sh:224-257", "path": "scripts/roadmap-status.sh", "start": 7000, "end": 8200, "start_line": 224, "end_line": 257, "weights": {"bt": 0.38482835864358317, "total": 0.24758560515503583, "size": 0.24000442417992474, "computed_progress_pct": 0.18538586124534445, "board_total": 0.1508078588562419, "ratio": 0.14083740537817233, "epic_totals": 0.14083740537817233, "epic": 0.13475936926488286, "get": 0.10936175631857604, "program": 0.10285641486119719, "id": 0.10234760552543608, "round": 0.09967405045427875, "warnings": 0.09967405045427875, "epic_progress": 0.09818328106535001, "task": 0.09482755610309207, "100": 0.09418691394655226, "big_totals": 0.09389160358544822, "derived": 0.09389160358544822, "sum": 0.07588156606629887, "big_progress": 0.06644936696951917, "values": 0.06279127596436819, "int": 0.06072027739403749, "if": 0.05688199993677273, "appe": 0.050269286285413974, "board_tasks": 0.04458775201852918, "abs": 0.04458775201852918, "status_progress": 0.04275870651595368, "in": 0.04170741128993549, "append": 0.04090601257531343, "exception": 0.04000073736332079, "else": 0.03986149102800019, "backlog": 0.033224683484759585, "float": 0.03225924876626464, "big_tasks": 0.028935764273574766, "big_task": 0.027046226088231876, "epics": 0.02680862332697571, "big": 0.02657771449937984, "is": 0.02613454055454151, "except": 0.02493287273329663, "try": 0.02474866899680435, "or": 0.02067159847685476, "size_points": 0.019930745514000096, "progress_pct": 0.019158719161051725, "none": 0.01820352394583901, "not": 0.016573598874157325, "status": 0.014299965101606454}, "norm": 0.7245575816488157, "snippet": "in board_tasks: try: size = float(task.get(\"size_points\", 5) or 5) except Exception: size = 5.0 ratio = STATUS_PROGRESS.get(task.get(\"status\", \"backlog\"), 0.0) epic_totals[task[\"epic\"]] += size epic_progress[task[\"epic\"]] += size * ratio bt = task.get(\"big_task\") if bt: big_totals[bt] += size big_progress[bt] += size…", "text": "in board_tasks:\n    try:\n        size = float(task.get(\"size_points\", 5) or 5)\n    except Exception:\n        size = 5.0\n    ratio = STATUS_PROGRESS.get(task.get(\"status\", \"backlog\"), 0.0)\n    epic_totals[task[\"epic\"]] += size\n    epic_progress[task[\"epic\"]] += size * ratio\n    bt = task.get(\"big_task\")\n    if bt:\n        big_totals[bt] += size\n        big_progress[bt] += size * ratio\n\nboard_total = sum(epic_totals.values())\nif board_total:\n    program[\"computed_progress_pct\"] = int(round(100 * sum(epic_progress.values()) / board_total))\n\nfor epic in epics:\n    total = epic_totals.get(epic[\"id\"])\n    if total:\n        derived = int(round(100 * epic_progress[epic[\"id\"]] / total))\n        epic[\"computed_progress_pct\"] = derived\n    else:\n        warnings.append(f\"Для эпика {epic['id']} нет задач на доске\")\n\nfor bt in big_tasks:\n    total = big_totals.get(bt[\"id\"])\n    if total:\n        bt[\"computed_progress_pct\"] = int(round(100 * big_progress[bt[\"id\"]] / total))\n    else:\n        warnings.append(f\"Для Big Task {bt['id']} нет связанных задач\")\n\nif program.get(\"computed_progress_pct\") is not None and abs(program[\"computed_progress_pct\"] - program[\"progress_pct\"]) > 1:\n    warnings.appe"}
{"id": "scripts/roadmap-status.sh:254-281", "path": "scripts/roadmap-status.sh", "start": 8000, "end": 9200, "start_line": 254, "end_line": 281, "weights": {"phase": 0.34384898673999603, "program": 0.3106060052739123, "derived": 0.28353405043130403, "computed_progress_pct": 0.26871772362691515, "phase_progress": 0.2192379737495822, "phase_avg": 0.1701204302587824, "abs": 0.1615754182057592, "epic": 0.13952455205359865, "warnings": 0.12039835797447532, "progress_pct": 0.11571107612120349, "append": 0.09882244622154926, "is": 0.09470536478180389, "none": 0.06596524518987204, "computed_pro": 0.06072131610713371, "not": 0.06005878403902555, "vs": 0.0567068100862608, "feasibility": 0.0567068100862608, "beta": 0.0567068100862608, "scaling": 0.0567068100862608, "optimization": 0.0567068100862608, "sustain": 0.0567068100862608, "innovate": 0.0567068100862608, "get": 0.05661443113521758, "if": 0.054967160334940784, "ga": 0.05385847273525307, "bt": 0.05164913064303316, "manual": 0.05164913064303316, "phase_order": 0.04831772235965482, "sum": 0.04582946069350723, "id": 0.04120926691123169, "foundation": 0.04077178125027961, "ops": 0.04077178125027961, "round": 0.040132785991491775, "build": 0.03896661732162659, "core": 0.03792344389927187, "values": 0.03792344389927187, "epics": 0.03238269352367363, "big": 0.032103773949745944, "len": 0.03106060052739123, "task": 0.01909069611316375, "in": 0.016793083093637393}, "norm": 0.7773546633191329, "snippet": "s.append(f\"Для Big Task {bt['id']} нет связанных задач\") if program.get(\"computed_progress_pct\") is not None and abs(program[\"computed_progress_pct\"] - program[\"progress_pct\"]) > 1: warnings.append( f\"Program progress_pct {program['progress_pct']}% расходится с вычисленным {program['computed_progress_pct']}%\" ) for…", "text": "s.append(f\"Для Big Task {bt['id']} нет связанных задач\")\n\nif program.get(\"computed_progress_pct\") is not None and abs(program[\"computed_progress_pct\"] - program[\"progress_pct\"]) > 1:\n    warnings.append(\n        f\"Program progress_pct {program['progress_pct']}% расходится с вычисленным {program['computed_progress_pct']}%\"\n    )\n\nfor epic in epics:\n    derived = epic.get(\"computed_progress_pct\")\n    if derived is not None and abs(derived - epic[\"progress_pct\"]) > 1:\n        warnings.append(f\"Epic {epic['id']} manual {epic['progress_pct']}% vs derived {derived}%\")\n\nphase_order = [\n    \"Phase 0 – Feasibility\",\n    \"Phase 1 – Foundation\",\n    \"Phase 2 – Core Build\",\n    \"Phase 3 – Beta\",\n    \"Phase 4 – GA\",\n    \"Phase 5 – Ops & Scaling\",\n    \"Phase 6 – Optimization\",\n    \"Phase 7 – Sustain & Innovate\",\n]\nphase_progress = program[\"phase_progress\"]\nif phase_progress:\n    phase_avg = round(sum(phase_progress.values()) / len(phase_progress))\n    if program.get(\"computed_progress_pct\") is not None and abs(phase_avg - program[\"computed_progress_pct\"]) > 5:\n        warnings.append(\n            f\"Среднее phase_progress {phase_avg}% не согласовано с вычисленным прогрессом {program['computed_pro"}
{"id": "scripts/roadmap-status.sh:279-308", "path": "scripts/roadmap-status.sh", "start": 9000, "end": 10200, "start_line": 279, "end_line": 308, "weights": {"milestone": 0.2928053974995082, "program": 0.2509696522613211, "upcoming": 0.22909551274849363, "effective_phase": 0.18398558780461513, "progress_value": 0.18398558780461513, "phase_map": 0.15649686584839048, "milestones": 0.1512591067862811, "phase_progress": 0.14762023565805202, "computed_progress_pct": 0.13570245043159215, "phase": 0.1302328037277735, "phase_avg": 0.11454775637424681, "effective_pct": 0.11454775637424681, "get": 0.09530095907761627, "status": 0.08722978711979937, "round": 0.08106822770281338, "done": 0.07214248565024499, "if": 0.06939603992286274, "in": 0.06784405569829507, "title": 0.06603081882288538, "phase_": 0.06132852926820505, "one": 0.05727387818712341, "today": 0.05727387818712341, "abs": 0.0543970574626056, "next_milestone": 0.052165621949463496, "int": 0.049385825613817165, "phase_order": 0.048800899583251366, "else": 0.048631019054160236, "due": 0.04628775530044231, "sort": 0.04523415014386405, "lambda": 0.04428104834582079, "mode": 0.04186942777765191, "warnings": 0.04053411385140669, "output": 0.03935628349484285, "100": 0.03830267833826459, "elif": 0.03734957654022134, "isoformat": 0.03734957654022134, "date": 0.036905058914513005, "generated_at": 0.036479462770325044, "in_progress": 0.03530163241376121, "key": 0.034587042773939765, "planned": 0.028006484166453013, "append": 0.02495266767094119, "progress_pct": 0.023373637376483104, "none": 0.02220829921392359, "json": 0.02063826172582694, "not": 0.020219790626471938}, "norm": 0.6992063760194555, "snippet": "one and abs(phase_avg - program[\"computed_progress_pct\"]) > 5: warnings.append( f\"Среднее phase_progress {phase_avg}% не согласовано с вычисленным прогрессом {program['computed_progress_pct']}%\" ) effective_pct = int(round(program.get(\"computed_progress_pct\", program[\"progress_pct\"]))) effective_phase = effective_pct…", "text": "one and abs(phase_avg - program[\"computed_progress_pct\"]) > 5:\n        warnings.append(\n            f\"Среднее phase_progress {phase_avg}% не согласовано с вычисленным прогрессом {program['computed_progress_pct']}%\"\n        )\n\neffective_pct = int(round(program.get(\"computed_progress_pct\", program[\"progress_pct\"])))\neffective_phase = effective_pct\nphase_map = {phase: int(round(phase_progress.get(phase, effective_phase))) for phase in phase_order}\nprogram[\"phase_progress\"] = phase_map\n\nmilestones = program[\"milestones\"]\nfor milestone in milestones:\n    if \"status\" not in milestone:\n        title = milestone.get(\"title\")\n        progress_value = phase_map.get(title, effective_phase)\n        if progress_value >= 100:\n            milestone[\"status\"] = \"done\"\n        elif progress_value > 0:\n            milestone[\"status\"] = \"in_progress\"\n        else:\n            milestone[\"status\"] = \"planned\"\nupcoming = [m for m in milestones if m.get(\"status\") != \"done\"]\nupcoming.sort(key=lambda m: m[\"due\"])\nnext_milestone = upcoming[0] if upcoming else None\n\nif mode == \"json\":\n    output = {\n        \"generated_at\": date.today().isoformat(),\n        \"program\": program,\n        \"phase_progress\": phase_"}
{"id": "scripts/roadmap-status.sh:301-329", "path": "scripts/roadmap-status.sh", "start": 10000, "end": 11200, "start_line": 301, "end_line": 329, "weights": {"epic": 0.21746882341687443, "get": 0.21177990906136945, "program": 0.20333189419319997, "next_milestone": 0.14490450541517635, "computed_progress_pct": 0.12565041706628902, "phase": 0.12058592937756805, "focus_epics": 0.11357135049667601, "output": 0.10932300970789681, "upcoming": 0.10606273738356187, "phase_map": 0.09660300361011757, "epics": 0.09085144571919546, "in": 0.07852321261376743, "warnings": 0.07506317379890128, "big_tasks": 0.06537339335881706, "progress_pct": 0.06492677049023084, "title": 0.0611396470582272, "manual_progress_pct": 0.056785675248338004, "today": 0.053031368691780933, "effective_pct": 0.053031368691780933, "focus_rows": 0.053031368691780933, "milestone_rows": 0.053031368691780933, "if": 0.05140447401693536, "summary_rows": 0.050367645798708886, "phase_rows": 0.050367645798708886, "epic_table_rows": 0.050367645798708886, "status": 0.04846099284433298, "phase_order": 0.04518601813264015, "due": 0.042859032685594725, "none": 0.04112648002578442, "mode": 0.038767988683011026, "id": 0.03853829590772593, "json": 0.03821900319597581, "milestones": 0.035013682126453956, "isoformat": 0.034582941240945686, "date": 0.0341713508467713, "phase_progress": 0.0341713508467713, "generated_at": 0.03377728034289356, "review": 0.03339929891215045, "in_progress": 0.03268669667940853, "exit": 0.031113557449821517, "ensure_ascii": 0.030552218358928598, "dumps": 0.03002297378633648, "is": 0.02952235136716726, "name": 0.026268667229779406, "planned": 0.025931929783752788, "sys": 0.025293106899614348, "print": 0.02373444657721421, "false": 0.023477228391037584, "health": 0.023477228391037584, "else": 0.02251436067322233, "not": 0.018722028357844384}, "norm": 0.562052420199467, "snippet": "\"]) next_milestone = upcoming[0] if upcoming else None if mode == \"json\": output = { \"generated_at\": date.today().isoformat(), \"program\": program, \"phase_progress\": phase_map, \"epics\": epics, \"big_tasks\": big_tasks, \"next_milestone\": next_milestone, \"warnings\": warnings, } if program.get(\"computed_progress_pct\") is…", "text": "\"])\nnext_milestone = upcoming[0] if upcoming else None\n\nif mode == \"json\":\n    output = {\n        \"generated_at\": date.today().isoformat(),\n        \"program\": program,\n        \"phase_progress\": phase_map,\n        \"epics\": epics,\n        \"big_tasks\": big_tasks,\n        \"next_milestone\": next_milestone,\n        \"warnings\": warnings,\n    }\n    if program.get(\"computed_progress_pct\") is not None:\n        output[\"program\"][\"manual_progress_pct\"] = program.get(\"progress_pct\")\n    print(json.dumps(output, ensure_ascii=False))\n    sys.exit(0)\n\nfocus_epics = [e for e in epics if e.get(\"status\") in {\"in_progress\", \"review\"}]\nsummary_rows = [[program[\"name\"], f\"{effective_pct}%\", program[\"health\"]]]\nphase_rows = [[phase, f\"{phase_map.get(phase, 0)}%\"] for phase in phase_order]\nfocus_rows = [[epic[\"id\"], epic.get(\"title\", \"\"), f\"{epic.get('computed_progress_pct', epic['progress_pct'])}%\"] for epic in focus_epics]\nmilestone_rows = [[m.get(\"title\", \"\"), m.get(\"due\", \"n/a\"), m.get(\"status\", \"planned\")] for m in milestones]\nepic_table_rows = [\n    [\n        epic[\"id\"],\n        epic.get(\"title\", \"\"),\n        epic.get(\"status\", \"\"),\n        f\"{epic.get('computed_progress_pct', epic['progress_pct'])}"}
{"id": "scripts/roadmap-status.sh:323-361", "path": "scripts/roadmap-status.sh", "start": 11000, "end": 12200, "start_line": 323, "end_line": 361, "weights": {"print": 0.28801350902686906, "get": 0.2569913503216618, "next_milestone": 0.2344522334807348, "epic": 0.18472632640804165, "format_table": 0.18336086785147954, "task": 0.1733177804431046, "msg": 0.12870534424072674, "focus_rows": 0.12870534424072674, "computed_progress_pct": 0.10164977560418888, "warnings": 0.09108789629529594, "in": 0.07622927606550008, "title": 0.07419193126166897, "id": 0.07014835884327641, "format_t": 0.06890845985191578, "big_table_rows": 0.06435267212036337, "next_table": 0.06435267212036337, "if": 0.06237846285201145, "epic_table_rows": 0.06112028928382651, "summary_rows": 0.06112028928382651, "phase_rows": 0.06112028928382651, "status": 0.058806598058291706, "size_points": 0.05464159444287667, "progress_pct": 0.05252502781232158, "due": 0.05200871382072169, "unknown": 0.05200871382072169, "compact": 0.04975398690541662, "mode": 0.04704430087376619, "milestones": 0.04248851314221379, "str": 0.04140210080162054, "big_tasks": 0.039664755521080015, "epics": 0.036748899392034115, "parent_epic": 0.03392514177090034}, "norm": 0.6517427381257405, "snippet": ")] for m in milestones] epic_table_rows = [ [ epic[\"id\"], epic.get(\"title\", \"\"), epic.get(\"status\", \"\"), f\"{epic.get('computed_progress_pct', epic['progress_pct'])}%\", str(epic.get(\"size_points\", 0)), ] for epic in epics ] big_table_rows = [ [ task[\"id\"], task.get(\"title\", \"\"), task.get(\"status\", \"\"),…", "text": ")] for m in milestones]\nepic_table_rows = [\n    [\n        epic[\"id\"],\n        epic.get(\"title\", \"\"),\n        epic.get(\"status\", \"\"),\n        f\"{epic.get('computed_progress_pct', epic['progress_pct'])}%\",\n        str(epic.get(\"size_points\", 0)),\n    ]\n    for epic in epics\n]\nbig_table_rows = [\n    [\n        task[\"id\"],\n        task.get(\"title\", \"\"),\n        task.get(\"status\", \"\"),\n        f\"{task.get('computed_progress_pct', task['progress_pct'])}%\",\n        task.get(\"parent_epic\", \"\"),\n        str(task.get(\"size_points\", 0)),\n    ]\n    for task in big_tasks\n]\n\nif mode == \"compact\":\n    print(format_table(\"Программа\", [\"Название\", \"Прогресс\", \"Состояние\"], summary_rows))\n    print()\n    if warnings:\n        print(\"Предупреждения:\")\n        for msg in warnings:\n            print(f\"- {msg}\")\n        print()\n    print(format_table(\"Фазы\", [\"Фаза\", \"Прогресс\"], phase_rows))\n    if focus_rows:\n        print()\n        print(format_table(\"Активные эпики\", [\"ID\", \"Название\", \"Прогресс\"], focus_rows))\n    if next_milestone:\n        next_table = [[next_milestone.get(\"title\", \"\"), next_milestone.get(\"due\", \"n/a\"), next_milestone.get(\"status\", \"unknown\")]]\n        print()\n        print(format_t"}
{"id": "scripts/roadmap-status.sh:357-379", "path": "scripts/roadmap-status.sh", "start": 12000, "end": 12848, "start_line": 357, "end_line": 379, "weights": {"print": 0.6771034570707148, "format_table": 0.615815744859686, "next_milestone": 0.3937028071657622, "next_table": 0.21612784221556003, "msg": 0.21612784221556003, "warnings": 0.15295892019398752, "milestone_rows": 0.10806392110778001, "big_table_rows": 0.10806392110778001, "get": 0.10788787820107502, "summary_rows": 0.10263595747661433, "phase_rows": 0.10263595747661433, "epic_table_rows": 0.10263595747661433, "due": 0.08733538735932511, "unknown": 0.08733538735932511, "id": 0.07853086713272453, "rows": 0.07323700241913225, "exit": 0.06340121140718347, "big": 0.061178889979704526, "py": 0.05575092634853885, "if": 0.05237436975310395, "sys": 0.05154067066336508, "tasks": 0.0509219947610445, "title": 0.04152881686973923, "status": 0.032916900799924285, "in": 0.03200191306523352}, "norm": 1.107067325201183, "snippet": "rows)) if next_milestone: next_table = [[next_milestone.get(\"title\", \"\"), next_milestone.get(\"due\", \"n/a\"), next_milestone.get(\"status\", \"unknown\")]] print() print(format_table(\"Ближайшая веха\", [\"Веха\", \"Срок\", \"Статус\"], next_table)) sys.exit(0) print(format_table(\"Программа\", [\"Название\", \"Прогресс\", \"Состояние\"],…", "text": "rows))\n    if next_milestone:\n        next_table = [[next_milestone.get(\"title\", \"\"), next_milestone.get(\"due\", \"n/a\"), next_milestone.get(\"status\", \"unknown\")]]\n        print()\n        print(format_table(\"Ближайшая веха\", [\"Веха\", \"Срок\", \"Статус\"], next_table))\n    sys.exit(0)\n\nprint(format_table(\"Программа\", [\"Название\", \"Прогресс\", \"Состояние\"], summary_rows))\nprint()\nprint(format_table(\"Фазы\", [\"Фаза\", \"Прогресс\"], phase_rows))\nprint()\nprint(format_table(\"Вехи\", [\"Веха\", \"Срок\", \"Статус\"], milestone_rows))\nprint()\nprint(format_table(\"Эпики\", [\"ID\", \"Название\", \"Статус\", \"Прогресс\", \"Размер\"], epic_table_rows))\nprint()\nprint(format_table(\"Big Tasks\", [\"ID\", \"Название\", \"Статус\", \"Прогресс\", \"Эпик\", \"Размер\"], big_table_rows))\nif warnings:\n    print()\n    print(\"Предупреждения:\")\n    for msg in warnings:\n        print(f\"- {msg}\")\nPY\n"}
{"id": "scripts/install_agentcontrol.sh:1-20", "path": "scripts/install_agentcontrol.sh", "start": 0, "end": 511, "start_line": 1, "end_line": 20, "weights": {"template_dest": 0.6012600908647553, "templates": 0.3369051658066083, "template_src": 0.24050403634590214, "hash": 0.24050403634590214, "agentcontrol": 0.18152060902134237, "target": 0.15020658171868467, "script_dir": 0.13302011383903153, "cd": 0.1293976306966388, "pwd": 0.12826086454474653, "agentcontrol_home": 0.12025201817295107, "rsync": 0.12025201817295107, "staged": 0.12025201817295107, "delete": 0.11230172193553609, "sha256": 0.11230172193553609, "stable": 0.10666089698550117, "template": 0.10666089698550117, "placeholder": 0.10666089698550117, "root": 0.10647553894929956, "project": 0.09871060074808619, "home": 0.09306977579805124, "echo": 0.08869441204679225, "cat": 0.08355001470429242, "src": 0.08209691721108217, "to": 0.0782899365357693, "lc_all": 0.06715299462192735, "eeuo": 0.06588753342315144, "pipefail": 0.06588753342315144, "dirname": 0.0652841675669406, "bash_source": 0.0652841675669406, "mkdir": 0.0652841675669406, "bash": 0.06413043227237326, "ifs": 0.06357806213577137, "set": 0.060094117484056624, "usr": 0.0567485191109044, "env": 0.05356187343447744, "bin": 0.05199240857813359, "utf": 0.04374275014207569}, "norm": 0.9517078602290714, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" TARGET=\"${AGENTCONTROL_HOME:-$HOME/.agentcontrol}\" TEMPLATE_SRC=\"$ROOT/src/agentcontrol/templates/0.2.0/project\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\"\nTARGET=\"${AGENTCONTROL_HOME:-$HOME/.agentcontrol}\"\nTEMPLATE_SRC=\"$ROOT/src/agentcontrol/templates/0.2.0/project\"\nTEMPLATE_DEST=\"$TARGET/templates/stable/0.2.0\"\n\nmkdir -p \"$TEMPLATE_DEST\"\nrsync -a --delete \"$TEMPLATE_SRC/\" \"$TEMPLATE_DEST/\"\n\ncat >\"$TEMPLATE_DEST/template.sha256\" <<'HASH'\nplaceholder\nHASH\n\necho \"Templates staged to $TEMPLATE_DEST\"\n"}
{"id": "scripts/check-lock.sh:1-49", "path": "scripts/check-lock.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 49, "weights": {"tmp_env": 0.25837839783664696, "tmp_dir": 0.2153153315305391, "requirements": 0.15238388665942365, "lock": 0.1459233506847372, "pip": 0.14399503134685934, "venv_pip": 0.12918919891832348, "no": 0.12008381243080403, "bin": 0.11962163176623217, "quiet": 0.11355430010870064, "venv": 0.08877357179287862, "compiled_hash": 0.08612613261221565, "lock_src": 0.08180008640993323, "piptools": 0.08180008640993323, "annotate": 0.08180008640993323, "resolver": 0.08180008640993323, "backtracking": 0.08180008640993323, "extras": 0.08180008640993323, "lock_file": 0.07570286673913376, "sdk_root": 0.07510133562211962, "compile": 0.06960564706833429, "header": 0.0640759511266002, "die": 0.060953554663769456, "output": 0.05918238119525241, "python": 0.055496329194756396, "check": 0.0520105906375034, "install": 0.0520105906375034, "file": 0.0520105906375034, "script_dir": 0.051007712825493295, "dev": 0.04755546558271885, "strip": 0.046441059986422284, "nohash": 0.04611167614150755, "compiled_pla": 0.04611167614150755, "fi": 0.044433069119888105, "null": 0.04352142067152067, "trap": 0.043063066306107824, "hashes": 0.043063066306107824, "tools": 0.04090004320496662, "compiled_plain": 0.04090004320496662, "upgrade": 0.03922227214245375, "sdk": 0.038975843650875044, "rm": 0.03785143336956688, "24": 0.03785143336956688, "then": 0.0360177941133404, "rf": 0.03568841026842567, "setup": 0.03401063920591282, "mktemp": 0.03401063920591282, "txt": 0.033294021312647214, "generate": 0.0320379755633001, "sc1091": 0.030476777331884728, "common": 0.030476777331884728, "disable": 0.02879900626937187, "source": 0.027748164597378198, "shellcheck": 0.027428167496484995, "agentcall": 0.026826342626759158, "lib": 0.026269139828610875, "lc_all": 0.02575039643397214, "eeuo": 0.025265144395343785, "pipefail": 0.025265144395343785, "exit": 0.025265144395343785, "dirname": 0.02503377854070654, "bash_source": 0.02503377854070654, "cd": 0.024809320171160065, "bash": 0.024591368766098017, "pwd": 0.024591368766098017}, "norm": 0.6142288883565558, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" VENV_PIP=\"$SDK_ROOT/.venv/bin/pip\" LOCK_SRC=\"$SDK_ROOT/requirements.txt\" LOCK_FILE=\"$SDK_ROOT/requirements.lock\" if [[ ! -x…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nVENV_PIP=\"$SDK_ROOT/.venv/bin/pip\"\nLOCK_SRC=\"$SDK_ROOT/requirements.txt\"\nLOCK_FILE=\"$SDK_ROOT/requirements.lock\"\n\nif [[ ! -x \"$VENV_PIP\" ]]; then\n  sdk::die \"check-lock: отсутствует $VENV_PIP — выполните agentcall setup\"\nfi\n\nif [[ ! -f \"$LOCK_FILE\" ]]; then\n  sdk::die \"check-lock: отсутствует requirements.lock\"\nfi\n\nTMP_DIR=\"$(mktemp -d)\"\ntrap 'rm -rf \"$TMP_DIR\"' EXIT\n\nTMP_ENV=\"$TMP_DIR/venv\"\npython3 -m venv \"$TMP_ENV\"\n\"$TMP_ENV/bin/pip\" install --upgrade pip==24.2 >/dev/null\n\"$TMP_ENV/bin/pip\" install --quiet pip-tools==7.4.1 >/dev/null\n\nCOMPILED_HASH=\"$TMP_DIR/requirements.lock\"\nCOMPILED_PLAIN=\"$TMP_DIR/requirements.nohash\"\n\n\"$TMP_ENV/bin/python\" -m piptools compile \\\n  --quiet \\\n  --no-annotate \\\n  --no-header \\\n  --generate-hashes \\\n  --resolver=backtracking \\\n  --strip-extras \\\n  --output-file \"$COMPILED_HASH\" \\\n  \"$LOCK_SRC\"\n\n\"$TMP_ENV/bin/python\" -m piptools compile \\\n  --quiet \\\n  --no-annotate \\\n  --no-header \\\n  --resolver=backtracking \\\n  --strip-extras \\\n  --output-file \"$COMPILED_PLA"}
{"id": "scripts/check-lock.sh:40-80", "path": "scripts/check-lock.sh", "start": 1000, "end": 2200, "start_line": 40, "end_line": 80, "weights": {"stripped": 0.21152271588875612, "compiled_hash": 0.14438792820283214, "tmp_freeze": 0.13713543898135866, "strip": 0.10380942820494393, "lock": 0.0978544822238826, "base": 0.09656137396201157, "freeze_path": 0.09625861880188807, "lock_src": 0.09142362598757243, "ignored": 0.09142362598757243, "version": 0.09093590628182141, "lock_file": 0.08460908635550245, "norm": 0.08201831862731321, "mktemp": 0.07602378175439335, "lower": 0.07602378175439335, "raw": 0.07442192999297612, "no": 0.06710565988780225, "pip": 0.06437424930800771, "replace": 0.05755970967593773, "freeze": 0.051536579216979024, "editable": 0.051536579216979024, "import": 0.050745170043867735, "continue": 0.050745170043867735, "tmp_env": 0.04812930940094404, "cmp": 0.04812930940094404, "venv_pip": 0.04812930940094404, "setuptools": 0.04812930940094404, "wheel": 0.04812930940094404, "resources": 0.04812930940094404, "distribute": 0.04812930940094404, "name": 0.04768094219859119, "if": 0.04665279994814302, "sys": 0.04591017722955209, "piptools": 0.04571181299378622, "annotate": 0.04571181299378622, "resolver": 0.04571181299378622, "backtracking": 0.04571181299378622, "extras": 0.04571181299378622, "compiled_plain": 0.04571181299378622, "exclude": 0.04571181299378622, "tmp_lock_normalized": 0.04383665710038949, "sdk": 0.04356123702156623, "in": 0.04275885863337924, "quiet": 0.042304543177751223, "err": 0.042304543177751223, "pkg": 0.042304543177751223, "compile": 0.03889727336171622, "sort": 0.038011890877196676, "path": 0.03650486986929289, "header": 0.03580714915898246, "startswith": 0.03580714915898246, "split": 0.03518439309046379, "entries": 0.03460462106116168, "requirements": 0.034062280547400584, "diff": 0.034062280547400584, "die": 0.034062280547400584, "splitlines": 0.034062280547400584, "output": 0.0330725071385234, "disable": 0.032187124654003856, "python": 0.03101265455001093, "update": 0.03101265455001093, "entry": 0.03101265455001093, "file": 0.029064741826840136, "check": 0.029064741826840136, "lc_all": 0.028779854837968865}, "norm": 0.5211621360679656, "snippet": "$COMPILED_HASH\" \\ \"$LOCK_SRC\" \"$TMP_ENV/bin/python\" -m piptools compile \\ --quiet \\ --no-annotate \\ --no-header \\ --resolver=backtracking \\ --strip-extras \\ --output-file \"$COMPILED_PLAIN\" \\ \"$LOCK_SRC\" if ! cmp -s \"$LOCK_FILE\" \"$COMPILED_HASH\"; then sdk::log \"ERR\" \"requirements.lock рассинхронизирован\" diff -u…", "text": "$COMPILED_HASH\" \\\n  \"$LOCK_SRC\"\n\n\"$TMP_ENV/bin/python\" -m piptools compile \\\n  --quiet \\\n  --no-annotate \\\n  --no-header \\\n  --resolver=backtracking \\\n  --strip-extras \\\n  --output-file \"$COMPILED_PLAIN\" \\\n  \"$LOCK_SRC\"\n\nif ! cmp -s \"$LOCK_FILE\" \"$COMPILED_HASH\"; then\n  sdk::log \"ERR\" \"requirements.lock рассинхронизирован\"\n  diff -u \"$LOCK_FILE\" \"$COMPILED_HASH\" || true\n  sdk::die \"Обновите lock-файл: scripts/update-lock.sh\"\nfi\n\nTMP_FREEZE=\"$(mktemp)\"\nTMP_LOCK_NORMALIZED=\"$(mktemp)\"\n\n\"$VENV_PIP\" freeze --exclude-editable --disable-pip-version-check | LC_ALL=C sort > \"$TMP_FREEZE\"\npython3 - <<'PY' \"$TMP_FREEZE\"\nimport sys\nfrom pathlib import Path\n\nfreeze_path = Path(sys.argv[1])\nIGNORED = {\"pip\", \"setuptools\", \"wheel\", \"pkg-resources\", \"distribute\"}\nentries = []\nfor raw in freeze_path.read_text(encoding=\"utf-8\").splitlines():\n    stripped = raw.strip()\n    if not stripped or stripped.startswith(\"#\"):\n        continue\n    if \"==\" in stripped:\n        name, version = stripped.split(\"==\", 1)\n        base = name.strip()\n        if base.lower() in IGNORED:\n            continue\n        norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n        entry = f\"{norm}=={version.strip()}\"\n   "}
{"id": "scripts/check-lock.sh:74-111", "path": "scripts/check-lock.sh", "start": 2000, "end": 3200, "start_line": 74, "end_line": 111, "weights": {"stripped": 0.3384363454220098, "base": 0.2896841218860347, "lower": 0.2280713452631801, "ignored": 0.18284725197514487, "replace": 0.17267912902781318, "norm": 0.16403663725462642, "entries": 0.13841848424464673, "strip": 0.12976178525617993, "entry": 0.12405061820004372, "continue": 0.10149034008773547, "name": 0.09536188439718238, "rest": 0.09142362598757243, "in": 0.08551771726675848, "raw": 0.07442192999297612, "split": 0.07036878618092758, "sys": 0.06886526584432814, "source": 0.06202530910002186, "version": 0.060623937521214276, "if": 0.058315999935178775, "argv": 0.056475028648415526, "path": 0.05475730480393933, "ba": 0.051536579216979024, "import": 0.050745170043867735, "py": 0.04966048901634553, "freeze_path": 0.04812930940094404, "setuptools": 0.04812930940094404, "wheel": 0.04812930940094404, "resources": 0.04812930940094404, "distribute": 0.04812930940094404, "compiled_plain": 0.04571181299378622, "tmp_lock_normalized": 0.04383665710038949, "encoding": 0.042385462423130765, "pkg": 0.042304543177751223, "sort": 0.038011890877196676, "utf": 0.03749378583606487, "startswith": 0.03580714915898246, "dest": 0.03518439309046379, "splitlines": 0.034062280547400584, "pip": 0.032187124654003856, "elif": 0.031386198773295244, "write_text": 0.02966523732248841, "pathlib": 0.02772806372070831, "read_text": 0.02724774091533059, "join": 0.02575462177888141, "python3": 0.022955088614776045, "or": 0.021192731211565383, "append": 0.020968628294908562, "else": 0.0204332012832606, "not": 0.01699142069451423}, "norm": 0.7071302592410162, "snippet": "1) base = name.strip() if base.lower() in IGNORED: continue norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower() entry = f\"{norm}=={version.strip()}\" elif \" @ \" in stripped: name, rest = stripped.split(\" @ \", 1) base = name.strip() if base.lower() in IGNORED: continue norm = base.replace(\"_\", \"-\").replace(\".\",…", "text": "1)\n        base = name.strip()\n        if base.lower() in IGNORED:\n            continue\n        norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n        entry = f\"{norm}=={version.strip()}\"\n    elif \" @ \" in stripped:\n        name, rest = stripped.split(\" @ \", 1)\n        base = name.strip()\n        if base.lower() in IGNORED:\n            continue\n        norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n        entry = f\"{norm} @ {rest.strip()}\"\n    else:\n        base = stripped\n        if base.lower() in IGNORED:\n            continue\n        entry = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n    entries.append(entry)\nentries.sort()\nfreeze_path.write_text(\"\\n\".join(entries) + \"\\n\", encoding=\"utf-8\")\nPY\n\npython3 - <<'PY' \"$COMPILED_PLAIN\" \"$TMP_LOCK_NORMALIZED\"\nimport sys\nfrom pathlib import Path\n\nsource = Path(sys.argv[1])\ndest = Path(sys.argv[2])\nIGNORED = {\"pip\", \"setuptools\", \"wheel\", \"pkg-resources\", \"distribute\"}\nentries = []\nfor raw in source.read_text(encoding=\"utf-8\").splitlines():\n    stripped = raw.strip()\n    if not stripped or stripped.startswith(\"#\"):\n        continue\n    if \"==\" in stripped:\n        name, version = stripped.split(\"==\", 1)\n        ba"}
{"id": "scripts/check-lock.sh:105-139", "path": "scripts/check-lock.sh", "start": 3000, "end": 4200, "start_line": 105, "end_line": 139, "weights": {"stripped": 0.3502080443932101, "base": 0.2997600913429403, "lower": 0.23600426162016025, "replace": 0.17868535960269363, "norm": 0.16974225942000476, "ignored": 0.14190536729375372, "strip": 0.13427523865639487, "entry": 0.1283654223113496, "entries": 0.10742478016378018, "continue": 0.10502043887339584, "name": 0.0986788195066496, "rest": 0.09460357819583583, "tmp_freeze": 0.09460357819583583, "tmp_lock_normalized": 0.09072282078167564, "in": 0.07374353880249464, "split": 0.0728163961350468, "if": 0.07241325904994372, "requirements": 0.07049411104592468, "sdk": 0.06761461572477888, "lock": 0.06750541092546104, "version": 0.06273259621760434, "log": 0.04999576328346127, "cmp": 0.04980337233662905, "err": 0.043776005549151266, "sort": 0.03933404360336004, "setup": 0.03933404360336004, "utf": 0.03879791751731931, "raw": 0.03850525943114851, "startswith": 0.03705261521668621, "dest": 0.0364081980675234, "splitlines": 0.03524705552296234, "diff": 0.03524705552296234, "die": 0.03524705552296234, "elif": 0.032477892643670736, "update": 0.0320913555778374, "agentcall": 0.03102524842920842, "write_text": 0.030697071664140187, "inf": 0.028692518110993815, "sh": 0.027064591658053413, "join": 0.026650434710320765, "py": 0.025693905186717908, "fi": 0.025693905186717908, "scripts": 0.0246697048766624, "or": 0.0219298696884894, "encoding": 0.0219298696884894, "append": 0.021697971887774947, "else": 0.021143921327895755, "then": 0.020827680943801188, "true": 0.020324902066507045, "not": 0.017582426631714727}, "norm": 0.7118036076382884, "snippet": "=\"utf-8\").splitlines(): stripped = raw.strip() if not stripped or stripped.startswith(\"#\"): continue if \"==\" in stripped: name, version = stripped.split(\"==\", 1) base = name.strip() if base.lower() in IGNORED: continue norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower() entry = f\"{norm}=={version.strip()}\" elif \"…", "text": "=\"utf-8\").splitlines():\n    stripped = raw.strip()\n    if not stripped or stripped.startswith(\"#\"):\n        continue\n    if \"==\" in stripped:\n        name, version = stripped.split(\"==\", 1)\n        base = name.strip()\n        if base.lower() in IGNORED:\n            continue\n        norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n        entry = f\"{norm}=={version.strip()}\"\n    elif \" @ \" in stripped:\n        name, rest = stripped.split(\" @ \", 1)\n        base = name.strip()\n        if base.lower() in IGNORED:\n            continue\n        norm = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n        entry = f\"{norm} @ {rest.strip()}\"\n    else:\n        base = stripped\n        if base.lower() in IGNORED:\n            continue\n        entry = base.replace(\"_\", \"-\").replace(\".\", \"-\").lower()\n    entries.append(entry)\nentries.sort()\ndest.write_text(\"\\n\".join(entries) + \"\\n\", encoding=\"utf-8\")\nPY\n\nif ! cmp -s \"$TMP_FREEZE\" \"$TMP_LOCK_NORMALIZED\"; then\n  sdk::log \"ERR\" \"Установленные зависимости не соответствуют requirements.lock\"\n  diff -u \"$TMP_LOCK_NORMALIZED\" \"$TMP_FREEZE\" || true\n  sdk::die \"Выполните agentcall setup или scripts/update-lock.sh\"\nfi\n\nsdk::log \"INF\" \"requirements"}
{"id": "scripts/check-lock.sh:134-149", "path": "scripts/check-lock.sh", "start": 4000, "end": 4565, "start_line": 134, "end_line": 149, "weights": {"sbom": 0.38173317539500684, "sbom_path": 0.3172165306976123, "lock": 0.267693870911311, "python": 0.19088823576472244, "sdk": 0.17875128295056486, "fi": 0.15283443602444272, "requirements": 0.139772806384161, "die": 0.139772806384161, "update": 0.1272588238431483, "sdk_root": 0.1148100877901369, "sh": 0.10732510485090146, "log": 0.09912953064824216, "scripts": 0.097828140028144, "tmp_freeze": 0.09378803010794069, "tmp_lock_normalized": 0.08994072749907499, "then": 0.08259252788059092, "setup": 0.07798991404114491, "generate": 0.07346639223998126, "json": 0.07116641974423082, "diff": 0.0698864031920805, "venv": 0.06785566119800492, "output": 0.06785566119800492, "wrn": 0.06439582162107128, "agentcall": 0.061515578782051175, "check": 0.05963283236886166, "script_dir": 0.058482981084401794, "inf": 0.05689033763386705, "py": 0.05094481200814757, "if": 0.047859337877836375, "bin": 0.0457174627152554, "else": 0.04192329228806917, "true": 0.040299374787039835}, "norm": 0.7693930967618853, "snippet": "ависимости не соответствуют requirements.lock\" diff -u \"$TMP_LOCK_NORMALIZED\" \"$TMP_FREEZE\" || true sdk::die \"Выполните agentcall setup или scripts/update-lock.sh\" fi sdk::log \"INF\" \"requirements.lock валиден и окружение синхронно\" SBOM_PATH=\"$SDK_ROOT/sbom/python.json\" if [[ -f \"$SBOM_PATH\" ]]; then if !…", "text": "ависимости не соответствуют requirements.lock\"\n  diff -u \"$TMP_LOCK_NORMALIZED\" \"$TMP_FREEZE\" || true\n  sdk::die \"Выполните agentcall setup или scripts/update-lock.sh\"\nfi\n\nsdk::log \"INF\" \"requirements.lock валиден и окружение синхронно\"\n\nSBOM_PATH=\"$SDK_ROOT/sbom/python.json\"\nif [[ -f \"$SBOM_PATH\" ]]; then\n  if ! \"$SDK_ROOT/.venv/bin/python\" \"$SCRIPT_DIR/generate-sbom.py\" --check --output \"$SBOM_PATH\"; then\n    sdk::die \"SBOM не соответствует текущей среде — запустите scripts/update-lock.sh\"\n  fi\nelse\n  sdk::log \"WRN\" \"SBOM отсутствует (sbom/python.json)\"\nfi\n"}
{"id": "scripts/task.sh:1-12", "path": "scripts/task.sh", "start": 0, "end": 255, "start_line": 1, "end_line": 12, "weights": {"lib": 0.22540616756162882, "script_dir": 0.21883954212227769, "sdklib": 0.1978339653813066, "task_cli": 0.1847544457649142, "export": 0.15311479244195528, "exec": 0.13283709375091096, "sc1091": 0.13075520597227966, "common": 0.13075520597227966, "disable": 0.12355702689762771, "source": 0.11904857714359034, "shellcheck": 0.11767568635588724, "lc_all": 0.11047750728123532, "eeuo": 0.10839561950260398, "pipefail": 0.10839561950260398, "dirname": 0.10740298535206355, "bash_source": 0.10740298535206355, "sdk_root": 0.10740298535206355, "cd": 0.1064399865407835, "bash": 0.10550490470616246, "pwd": 0.10550490470616246, "ifs": 0.10459616673949483, "sh": 0.10040090453794008, "set": 0.09886451586086735, "usr": 0.09336046692439111, "scripts": 0.09151664712310244, "env": 0.08811792081155966, "python3": 0.08811792081155966, "bin": 0.08553589798338107, "utf": 0.07196387926599548}, "norm": 0.6858244348143606, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" export SDK_ROOT exec python3 -m scripts.lib.sdklib.task_cli \"$@\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\nexport SDK_ROOT\n\nexec python3 -m scripts.lib.sdklib.task_cli \"$@\"\n"}
{"id": "scripts/agent-cycle.sh:1-40", "path": "scripts/agent-cycle.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 40, "weights": {"import": 0.15891250619000685, "script_dir": 0.12751928206373322, "architecture_tool": 0.12270012961489984, "root": 0.12248689818979575, "dt": 0.12008381243080403, "report_path": 0.11355430010870064, "report_dir": 0.11007721710507826, "manifest": 0.10807354845109107, "yaml": 0.09923728068464026, "report_path_env": 0.0922233522830151, "sdk_root_env": 0.0922233522830151, "path": 0.08165562997078672, "lib": 0.07880741948583263, "cycle": 0.0784445442849075, "enrich_manifest": 0.0784445442849075, "tmp": 0.07570286673913376, "environ": 0.07510133562211962, "manifest_path": 0.07137682053685133, "py": 0.06664960367983216, "python3": 0.06161629049229359, "timestamp": 0.05836934027389488, "verify": 0.057503774173632956, "replace": 0.05150079286794428, "cd": 0.04961864034232013, "pwd": 0.049182737532196034, "datetime": 0.04755546558271885, "program": 0.04717474666566186, "agent_runs": 0.04611167614150755, "manifest_versi": 0.04611167614150755, "00": 0.04474966173940438, "log": 0.04322941938043643, "verify_log": 0.043063066306107824, "insert": 0.043063066306107824, "sys": 0.0410775269948624, "agent": 0.03752280852773111, "safe_load": 0.03669240570169276, "sz": 0.03401063920591282, "utf": 0.03354707153753173, "microsecond": 0.030476777331884728, "isoformat": 0.02808238837610627, "date": 0.027748164597378198, "generated_at": 0.027428167496484995, "utc": 0.026826342626759158, "check": 0.0260052953187517, "now": 0.0260052953187517, "lc_all": 0.02575039643397214, "sync": 0.02575039643397214, "summary": 0.02575039643397214, "eeuo": 0.025265144395343785, "pipefail": 0.025265144395343785, "dirname": 0.02503377854070654, "bash_source": 0.02503377854070654, "reports": 0.02503377854070654, "mkdir": 0.02503377854070654, "pathlib": 0.024809320171160065, "bash": 0.024591368766098017, "timezone": 0.024591368766098017, "ifs": 0.024379557661085263, "read_text": 0.024379557661085263, "sh": 0.02340171459154994, "os": 0.023220529993211142, "set": 0.023043608960051788, "as": 0.022536531660837255, "usr": 0.021760710335760335}, "norm": 0.503408884662132, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" REPORT_DIR=\"$ROOT/reports/agent_runs\" TIMESTAMP=\"$(date -u +%Y%m%dT%H%M%SZ)\" REPORT_PATH=\"$REPORT_DIR/$TIMESTAMP.yaml\" mkdir -p \"$REPORT_DIR\" python3…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\"\nREPORT_DIR=\"$ROOT/reports/agent_runs\"\nTIMESTAMP=\"$(date -u +%Y%m%dT%H%M%SZ)\"\nREPORT_PATH=\"$REPORT_DIR/$TIMESTAMP.yaml\"\n\nmkdir -p \"$REPORT_DIR\"\n\npython3 \"$SCRIPT_DIR/lib/architecture_tool.py\" sync\npython3 \"$SCRIPT_DIR/lib/architecture_tool.py\" check\n\"$SCRIPT_DIR/verify.sh\" >/tmp/agent-cycle-verify.log\n\nREPORT_PATH_ENV=\"$REPORT_PATH\" SDK_ROOT_ENV=\"$ROOT\" python3 - <<'PY'\nimport datetime as dt\nimport json\nfrom pathlib import Path\nimport yaml\n\nfrom os import environ\n\nroot = Path(environ[\"SDK_ROOT_ENV\"])\nmanifest_path = root / \"architecture\" / \"manifest.yaml\"\nreport_path = Path(environ[\"REPORT_PATH_ENV\"])\nverify_log = Path(\"/tmp/agent-cycle-verify.log\")\nimport sys\n\nsys.path.insert(0, str(root))\nfrom scripts.lib.architecture_tool import enrich_manifest\n\nmanifest = yaml.safe_load(manifest_path.read_text(encoding=\"utf-8\"))\nmanifest = enrich_manifest(manifest)\nprogram = manifest[\"program\"]\nsummary = {\n    \"generated_at\": dt.datetime.now(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\"),\n    \"manifest_versi"}
{"id": "scripts/agent-cycle.sh:36-52", "path": "scripts/agent-cycle.sh", "start": 1000, "end": 1815, "start_line": 36, "end_line": 52, "weights": {"manifest": 0.2515411840199145, "report_path": 0.12585601595380988, "big": 0.12159304383466274, "program": 0.11764202449749428, "dt": 0.09981966908310586, "big_tasks": 0.08825408103440303, "epic": 0.08807487348383415, "summary": 0.08562006814295738, "replace": 0.08562006814295738, "epics": 0.08176630114727591, "id": 0.078040049213145, "verify_log_tail": 0.0766606615852563, "00": 0.07439631264175979, "task": 0.0723060115286077, "manifest_version": 0.07159234773390426, "manifest_updated_at": 0.07159234773390426, "program_progress_pct": 0.07159234773390426, "verify_log": 0.07159234773390426, "safe_dump": 0.07159234773390426, "get": 0.0714757193082122, "tasks": 0.06747164305838398, "status": 0.06542234033984952, "enrich_manifest": 0.06520702743682937, "in": 0.06360380221715162, "encoding": 0.06304837535440702, "sort_keys": 0.05933198207125767, "allow_unicode": 0.05933198207125767, "echo": 0.05654268767983006, "utf": 0.055772006431146506, "20": 0.05426366821990563, "microsecond": 0.05066764231425837, "splitlines": 0.05066764231425837, "isoformat": 0.04668697067527668, "generated_at": 0.04559932846290631, "version": 0.04508905353140312, "utc": 0.044598794616987104, "write_text": 0.04412704051720152, "now": 0.043233803467424704, "progress": 0.042400161286191305, "yaml": 0.04124549478455361, "timezone": 0.04088315057363796, "read_text": 0.040531014611554256, "datetime": 0.03953048076563505, "py": 0.036934988705906995, "updated_at": 0.03435578329343413, "false": 0.03169425832790074, "progress_pct": 0.02921704672060388, "true": 0.02921704672060388}, "norm": 0.525663685942193, "snippet": "enrich_manifest(manifest) program = manifest[\"program\"] summary = { \"generated_at\": dt.datetime.now(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\"), \"manifest_version\": manifest[\"version\"], \"manifest_updated_at\": manifest[\"updated_at\"], \"program_progress_pct\":…", "text": " enrich_manifest(manifest)\nprogram = manifest[\"program\"]\nsummary = {\n    \"generated_at\": dt.datetime.now(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\"),\n    \"manifest_version\": manifest[\"version\"],\n    \"manifest_updated_at\": manifest[\"updated_at\"],\n    \"program_progress_pct\": program[\"progress\"][\"progress_pct\"],\n    \"epics\": {epic[\"id\"]: epic[\"status\"] for epic in manifest.get(\"epics\", [])},\n    \"big_tasks\": {big[\"id\"]: big[\"status\"] for big in manifest.get(\"big_tasks\", [])},\n    \"tasks\": {task[\"id\"]: task[\"status\"] for task in manifest.get(\"tasks\", [])},\n    \"verify_log_tail\": verify_log.read_text(encoding=\"utf-8\").splitlines()[-20:],\n}\nreport_path.write_text(yaml.safe_dump(summary, sort_keys=False, allow_unicode=True), encoding=\"utf-8\")\nPY\n\necho \"Создан отчёт: $REPORT_PATH\"\n"}
{"id": "scripts/doctor.sh:1-42", "path": "scripts/doctor.sh", "start": 0, "end": 1154, "start_line": 1, "end_line": 42, "weights": {"report_file": 0.18870316697909245, "fix": 0.182559944834639, "row": 0.1638865673045736, "details": 0.15489971194315064, "problems": 0.13217048812413096, "rows": 0.11943265009889262, "line": 0.11943265009889262, "report_dir": 0.11261746057673393, "status": 0.09393977074439931, "import": 0.06967702194484916, "report": 0.06812468976280123, "prefix": 0.06678605319373, "missing": 0.06555462692182945, "name": 0.06546960140345022, "sys": 0.06303820488826961, "sdk": 0.05981292929499671, "or": 0.05819850032714494, "lib": 0.05375070149546533, "if": 0.05338156917143288, "script_dir": 0.05218481389069699, "sdk_root": 0.05122296224483031, "inf": 0.05076368588868137, "len": 0.048263394665638684, "json": 0.047626757828831405, "deps_checker": 0.04717579174477311, "py": 0.04545844763803938, "log": 0.04422702136613881, "python3": 0.04202546992551307, "detected": 0.0401274014995873, "print": 0.03943569585137131, "else": 0.03740847619550788, "load_commands": 0.0365119889669278, "doctor": 0.035605965615724856, "utf": 0.03432123472685939, "path": 0.033415996264968106, "results": 0.032777313460914725, "ok": 0.03167653774060185, "sc1091": 0.03118008757800515, "common": 0.03118008757800515, "loads": 0.0302740642268022, "disable": 0.029463598721741993, "get": 0.029323372023881928, "source": 0.0283885068573177, "shellcheck": 0.028061125207942343, "lc_all": 0.026344636351679194, "in": 0.026093867576267336, "eeuo": 0.02584818618908249, "pipefail": 0.02584818618908249, "argv": 0.02584818618908249, "exit": 0.02584818618908249, "dirname": 0.025611481122415156, "bash_source": 0.025611481122415156, "reports": 0.025611481122415156, "mkdir": 0.025611481122415156, "cd": 0.025381842944340684, "pathlib": 0.025381842944340684, "bash": 0.025158861891469514, "pwd": 0.025158861891469514, "ifs": 0.02494216283787954, "read_text": 0.02494216283787954, "sh": 0.02394175415904725, "set": 0.023575384551437602, "usr": 0.022262880574277884, "scripts": 0.021823200467816738}, "norm": 0.526629319009019, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" REPORT_FILE=\"$REPORT_DIR/doctor.json\" sdk::log \"INF\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\nREPORT_DIR=\"$SDK_ROOT/reports\"\nmkdir -p \"$REPORT_DIR\"\nREPORT_FILE=\"$REPORT_DIR/doctor.json\"\n\nsdk::log \"INF\" \"Анализ окружения\"\npython3 -m scripts.lib.deps_checker \"$SDK_ROOT\" >\"$REPORT_FILE\"\n\npython3 - \"$REPORT_FILE\" <<'PY'\nimport json\nimport sys\nfrom pathlib import Path\nreport = json.loads(Path(sys.argv[1]).read_text(encoding=\"utf-8\"))\nrows = report[\"results\"]\nproblems = [r for r in rows if r[\"status\"] == \"missing\"]\nprint(f\"Итог: {len(rows)} проверок, {len(problems)} проблем.\")\nfor row in rows:\n    name = row[\"name\"]\n    status = row[\"status\"]\n    details = row.get(\"details\") or \"\"\n    fix = row.get(\"fix\") or \"\"\n    prefix = \"✔\" if status == \"ok\" or status == \"detected\" else \"✖\"\n    line = f\"{prefix} {name} — {status}\"\n    if details:\n        line += f\" ({details})\"\n    if fix and status == \"missing\":\n        line += f\" :: fix: {fix}\"\n    print(line)\nsys.exit(1 if problems else 0)\nPY\n\nsdk::log \"INF\" \"Отчёт сохранён: $REPORT_FILE\"\n"}
{"id": "scripts/fix.sh:1-12", "path": "scripts/fix.sh", "start": 0, "end": 255, "start_line": 1, "end_line": 12, "weights": {"script_dir": 0.23393192433760718, "sdk": 0.17875128295056486, "run_command_group": 0.1735945047638757, "sdk_fix_commands": 0.16827896408017712, "load_commands": 0.16367443330002115, "fix": 0.16367443330002115, "sc1091": 0.139772806384161, "common": 0.139772806384161, "disable": 0.13207820116642963, "source": 0.1272588238431483, "shellcheck": 0.12579125093215532, "lib": 0.12047571024845678, "lc_all": 0.11809664571442396, "eeuo": 0.11587117946830082, "pipefail": 0.11587117946830082, "dirname": 0.1148100877901369, "bash_source": 0.1148100877901369, "cd": 0.1137806752677341, "bash": 0.11278110503072539, "pwd": 0.11278110503072539, "ifs": 0.11180969548014966, "sh": 0.10732510485090146, "set": 0.10568275833403062, "usr": 0.09979911981572843, "env": 0.09419501879856378, "bin": 0.0914349254305108, "utf": 0.07692690542227104}, "norm": 0.6896407892284149, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::run_command_group \"fix\" SDK_FIX_COMMANDS", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nsdk::load_commands\nsdk::run_command_group \"fix\" SDK_FIX_COMMANDS\n"}
{"id": "scripts/sync-roadmap.sh:1-43", "path": "scripts/sync-roadmap.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 43, "weights": {"status_json": 0.1605096059983492, "program": 0.1206584866640967, "todo_file": 0.12038220449876191, "sdk_root": 0.10244592448966063, "status_path": 0.09435158348954623, "status": 0.09393977074439931, "import": 0.09290269592646555, "get": 0.08797011607164579, "roadmap": 0.08324132959643653, "json": 0.079377929714719, "todo_path": 0.0730239779338556, "machine": 0.0633530754812037, "sys": 0.06303820488826961, "wrn": 0.05746088698495592, "phase_progress": 0.0567770137146354, "big_tasks": 0.05431020371347879, "script_dir": 0.05218481389069699, "exit": 0.05169637237816498, "argv": 0.05169637237816498, "utf": 0.05148185209028908, "reports": 0.05122296224483031, "epics": 0.05031772378293903, "path": 0.05012399439745216, "read_text": 0.04988432567575908, "sh": 0.0478835083180945, "fi": 0.04545844763803938, "log": 0.04422702136613881, "roadmap_skip_progress": 0.04184389035585046, "md": 0.04079404365361251, "program_value": 0.0401274014995873, "sdk": 0.03987528619666447, "encoding": 0.038799000218096624, "rm": 0.03872492798578766, "then": 0.03684897397749441, "computed_progress_pct": 0.03479550011066466, "block": 0.03479550011066466, "re": 0.032777313460914725, "sc1091": 0.03118008757800515, "common": 0.03118008757800515, "round": 0.03118008757800515, "loads": 0.0302740642268022, "disable": 0.029463598721741993, "source": 0.0283885068573177, "update": 0.0283885068573177, "shellcheck": 0.028061125207942343, "lib": 0.026875350747732667, "lc_all": 0.026344636351679194, "sync": 0.026344636351679194, "eeuo": 0.02584818618908249, "pipefail": 0.02584818618908249, "dirname": 0.025611481122415156, "bash_source": 0.025611481122415156, "mkdir": 0.025611481122415156, "cd": 0.025381842944340684, "pathlib": 0.025381842944340684, "bash": 0.025158861891469514, "pwd": 0.025158861891469514, "ifs": 0.02494216283787954, "text": 0.02494216283787954, "dev": 0.02432644970192926, "set": 0.023575384551437602, "py": 0.02272922381901969, "usr": 0.022262880574277884, "null": 0.022262880574277884}, "norm": 0.44279089569559776, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" TODO_FILE=\"$SDK_ROOT/todo.machine.md\" if [[ ! -f \"$TODO_FILE\" ]]; then sdk::log \"WRN\" \"todo.machine.md не найден — синхронизация…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n# shellcheck disable=SC1091\nsource \"$SCRIPT_DIR/lib/common.sh\"\n\nTODO_FILE=\"$SDK_ROOT/todo.machine.md\"\nif [[ ! -f \"$TODO_FILE\" ]]; then\n  sdk::log \"WRN\" \"todo.machine.md не найден — синхронизация пропущена\"\n  exit 0\nfi\n\nSTATUS_JSON=\"$SDK_ROOT/reports/.sync-roadmap.json\"\nmkdir -p \"$SDK_ROOT/reports\"\nif ! ROADMAP_SKIP_PROGRESS=1 \"$SDK_ROOT/scripts/roadmap-status.sh\" json > \"$STATUS_JSON\" 2>/dev/null; then\n  sdk::log \"WRN\" \"roadmap-status json недоступен — синхронизация пропущена\"\n  rm -f \"$STATUS_JSON\"\n  exit 0\nfi\n\npython3 - \"$TODO_FILE\" \"$STATUS_JSON\" <<'PY'\nimport json\nimport re\nimport sys\nfrom pathlib import Path\n\ntodo_path = Path(sys.argv[1])\nstatus_path = Path(sys.argv[2])\ntext = todo_path.read_text(encoding=\"utf-8\")\nstatus = json.loads(status_path.read_text(encoding=\"utf-8\"))\n\nprogram = status.get(\"program\", {})\nepics = status.get(\"epics\", [])\nbig_tasks = status.get(\"big_tasks\", [])\nphase_progress = status.get(\"phase_progress\", {})\n\nprogram_value = int(round(program.get(\"computed_progress_pct\", program.get(\"progress_pct\", 0))))\n\n# Update Program block\ndef"}
{"id": "scripts/sync-roadmap.sh:37-65", "path": "scripts/sync-roadmap.sh", "start": 1000, "end": 2200, "start_line": 37, "end_line": 65, "weights": {"re": 0.3305987650799157, "body": 0.32825810537779243, "phase_progress": 0.22270294172550953, "match": 0.16827896408017712, "footer": 0.14812209875980192, "program_value": 0.13491109124861247, "compile": 0.11970971198390253, "phase": 0.11226965838601163, "header": 0.1101995883599719, "sub": 0.1101995883599719, "program": 0.10817657425056945, "update_program": 0.10573884356587077, "program_pattern": 0.10573884356587077, "block_name": 0.10573884356587077, "entity_id": 0.09874806583986795, "groups": 0.09378803010794069, "get": 0.08215599920484161, "rf": 0.08183721665001058, "round": 0.0698864031920805, "def": 0.0640064416484293, "int": 0.06386098139717737, "update": 0.06362941192157415, "progress_pct": 0.060449062180559746, "yaml": 0.05689033763386705, "text": 0.05590484774007483, "lines": 0.0554324516333832, "tus": 0.049374032919933974, "transformer": 0.049374032919933974, "entity_pattern": 0.049374032919933974, "nid": 0.049374032919933974, "repl_entity": 0.049374032919933974, "entity_match": 0.049374032919933974, "str": 0.04764810738807192, "helper": 0.046894015053970346, "update_entity": 0.046894015053970346, "new_value": 0.046894015053970346, "blocks": 0.044970363749537494, "escape": 0.044970363749537494, "count": 0.043398626190968924, "within": 0.043398626190968924, "computed_progress_pct": 0.03899495702057246, "block": 0.03899495702057246, "pattern": 0.038173317539500685, "by": 0.03742321946200388, "id": 0.03588048239684828, "to": 0.03442057554589857, "big_tasks": 0.030432441736001046, "progress": 0.029241490542200897, "join": 0.026420689583507656, "status": 0.015039618468930925, "in": 0.014621563728080834, "return": 0.014520142679980953, "if": 0.011964834469459094}, "norm": 0.7326067003430814, "snippet": "tus.get(\"big_tasks\", []) phase_progress = status.get(\"phase_progress\", {}) program_value = int(round(program.get(\"computed_progress_pct\", program.get(\"progress_pct\", 0)))) # Update Program block def update_program(match): header, body, footer = match.groups() body = re.sub(r\"progress_pct:\\s*\\d+\", f\"progress_pct:…", "text": "tus.get(\"big_tasks\", [])\nphase_progress = status.get(\"phase_progress\", {})\n\nprogram_value = int(round(program.get(\"computed_progress_pct\", program.get(\"progress_pct\", 0))))\n\n# Update Program block\ndef update_program(match):\n    header, body, footer = match.groups()\n    body = re.sub(r\"progress_pct:\\s*\\d+\", f\"progress_pct: {program_value}\", body)\n    if phase_progress:\n        lines = \"\\n\".join(\n            f\"  {phase}: {int(round(phase_progress.get(phase, program_value)))}\"\n            for phase in phase_progress\n        )\n        body = re.sub(r\"phase_progress:\\n(?:\\s{2}.+\\n)+\", f\"phase_progress:\\n{lines}\\n\", body)\n    return header + body + footer\n\nprogram_pattern = re.compile(r\"(## Program\\n```yaml\\n)(.*?)(\\n```)\", re.S)\ntext = program_pattern.sub(update_program, text, count=1)\n\n# Helper to update progress within blocks by id\ndef update_entity(block_name: str, entity_id: str, new_value: int) -> str:\n    pattern = re.compile(rf\"(## {block_name}\\n```yaml\\n)(.*?)(\\n```)\", re.S)\n\n    def transformer(match):\n        header, body, footer = match.groups()\n        entity_pattern = re.compile(rf\"(id: {re.escape(entity_id)}\\n)(.*?)(?=\\nid:|\\Z)\", re.S)\n\n        def repl_entity(entity_match"}
{"id": "scripts/sync-roadmap.sh:61-90", "path": "scripts/sync-roadmap.sh", "start": 2000, "end": 3200, "start_line": 61, "end_line": 90, "weights": {"entity_body": 0.2061463168679161, "parent": 0.17592196545231897, "computed": 0.14438792820283214, "re": 0.14322859663592985, "bt": 0.13150997130116848, "get": 0.1281357432976353, "count": 0.12691362953325366, "computed_progress_pct": 0.11403567263159005, "epics": 0.10993788389549702, "new_body": 0.10307315843395805, "subn": 0.10307315843395805, "text_with_update": 0.10307315843395805, "epic": 0.09868333163454808, "transformer": 0.09625861880188807, "footer": 0.09625861880188807, "entity_pattern": 0.09625861880188807, "repl_entity": 0.09625861880188807, "entity_match": 0.09625861880188807, "parent_id": 0.09625861880188807, "body": 0.09142362598757243, "groups": 0.09142362598757243, "program_value": 0.08767331420077898, "match": 0.08201831862731321, "text": 0.08174322274599177, "progress_pct": 0.07856684832431295, "header": 0.07161429831796493, "start": 0.0661450142770468, "update": 0.06202530910002186, "value": 0.05812948365368027, "id": 0.05246389863068572, "entity_id": 0.04812930940094404, "nid": 0.04812930940094404, "if": 0.04665279994814302, "new_value": 0.04571181299378622, "update_entity": 0.04571181299378622, "escape": 0.04383665710038949, "next": 0.04383665710038949, "in": 0.04275885863337924, "return": 0.04246226598851573, "else": 0.0408664025665212, "rf": 0.03988704677059339, "compile": 0.03889727336171622, "none": 0.03732487262844301, "pattern": 0.03721096499648806, "fallback": 0.03721096499648806, "sub": 0.03580714915898246, "round": 0.034062280547400584, "big_tasks": 0.02966523732248841, "big": 0.02724774091533059, "is": 0.02679339451810138, "parent_epic": 0.025372585021933867, "tasks": 0.022679543885171082, "int": 0.020750346896561835, "def": 0.015598208468944955}, "norm": 0.6200040118727, "snippet": "f transformer(match): header, body, footer = match.groups() entity_pattern = re.compile(rf\"(id: {re.escape(entity_id)}\\n)(.*?)(?=\\nid:|\\Z)\", re.S) def repl_entity(entity_match): start, entity_body = entity_match.groups() entity_body = re.sub(r\"progress_pct:\\s*\\d+\", f\"progress_pct: {new_value}\", entity_body) return…", "text": "f transformer(match):\n        header, body, footer = match.groups()\n        entity_pattern = re.compile(rf\"(id: {re.escape(entity_id)}\\n)(.*?)(?=\\nid:|\\Z)\", re.S)\n\n        def repl_entity(entity_match):\n            start, entity_body = entity_match.groups()\n            entity_body = re.sub(r\"progress_pct:\\s*\\d+\", f\"progress_pct: {new_value}\", entity_body)\n            return start + entity_body\n\n        new_body, count = entity_pattern.subn(repl_entity, body)\n        return header + new_body + footer\n\n    text_with_update, count = pattern.subn(transformer, text)\n    return text_with_update if count else text\n\n# Update epics\nfor epic in epics:\n    value = int(round(epic.get(\"computed_progress_pct\", epic.get(\"progress_pct\", program_value))))\n    text = update_entity(\"Epics\", epic.get(\"id\"), value)\n\n# Update big tasks (fallback: parent epic)\nfor bt in big_tasks:\n    computed = bt.get(\"computed_progress_pct\")\n    if computed is None:\n        parent_id = bt.get(\"parent_epic\")\n        parent = next((e for e in epics if e.get(\"id\") == parent_id), None)\n        if parent:\n            computed = parent.get(\"computed_progress_pct\", parent.get(\"progress_pct\", program_value))\n        else:\n    "}
{"id": "scripts/sync-roadmap.sh:86-98", "path": "scripts/sync-roadmap.sh", "start": 3000, "end": 3432, "start_line": 86, "end_line": 98, "weights": {"computed": 0.38182585458082274, "parent": 0.2791295185176794, "program_value": 0.2318472086642822, "text": 0.21616541126162267, "todo_path": 0.21095815847558283, "get": 0.16942392724909558, "parent_id": 0.12727528486027426, "update_entity": 0.12088234991690133, "next": 0.1159236043321411, "bt": 0.1159236043321411, "status_json": 0.1159236043321411, "encoding": 0.11208600063005691, "rm": 0.11187201418116435, "computed_progress_pct": 0.10052033365303123, "utf": 0.09915023365537157, "if": 0.09252805323048366, "id": 0.09249191017854223, "round": 0.09007580855868154, "write_text": 0.07844807203058048, "epics": 0.07268115657535637, "big": 0.07205513708720755, "read_text": 0.07205513708720755, "py": 0.06566220214383466, "tasks": 0.05997479382967464, "int": 0.05487313957090796, "else": 0.05403446561573359, "progress_pct": 0.05194141639218468, "none": 0.04935177603094131, "in": 0.03769114205460837}, "norm": 0.7622182143278405, "snippet": "= next((e for e in epics if e.get(\"id\") == parent_id), None) if parent: computed = parent.get(\"computed_progress_pct\", parent.get(\"progress_pct\", program_value)) else: computed = program_value text = update_entity(\"Big Tasks\", bt.get(\"id\"), int(round(computed))) if text != todo_path.read_text(encoding=\"utf-8\"):…", "text": "= next((e for e in epics if e.get(\"id\") == parent_id), None)\n        if parent:\n            computed = parent.get(\"computed_progress_pct\", parent.get(\"progress_pct\", program_value))\n        else:\n            computed = program_value\n    text = update_entity(\"Big Tasks\", bt.get(\"id\"), int(round(computed)))\n\nif text != todo_path.read_text(encoding=\"utf-8\"):\n    todo_path.write_text(text, encoding=\"utf-8\")\nPY\n\nrm -f \"$STATUS_JSON\"\n"}
{"id": "architecture/manifest.yaml:1-50", "path": "architecture/manifest.yaml", "start": 0, "end": 1200, "start_line": 1, "end_line": 50, "weights": {"15": 0.14806590112212928, "2025": 0.10787425769374354, "in_progress": 0.10382833062870944, "due": 0.1021053425745051, "platform": 0.09792625135041089, "qa": 0.09792625135041089, "27": 0.0901890136297133, "46z": 0.0901890136297133, "04t23": 0.08422629145165207, "hardening": 0.08140821819377869, "mvp": 0.07999567273912588, "ga": 0.07999567273912588, "10": 0.07412347510104539, "00z": 0.06865650089726785, "quality": 0.06807022838300339, "00": 0.06564380527214099, "animation": 0.06511918874385411, "title": 0.06473609688518174, "20": 0.06383960967047721, "terminal": 0.06266251102821932, "id": 0.0612078817358, "engine": 0.06055808685703294, "shelldone": 0.05427214546251913, "plugin": 0.05304594533106249, "status": 0.05131163948223492, "program": 0.04613412725391933, "maintain": 0.04509450681485665, "benchmark": 0.04509450681485665, "decade": 0.04509450681485665, "long": 0.04509450681485665, "horizon": 0.04509450681485665, "deliver": 0.04509450681485665, "uncompromising": 0.04509450681485665, "latency": 0.04509450681485665, "render_switch_ms": 0.04509450681485665, "80": 0.04509450681485665, "m1": 0.04509450681485665, "31t03": 0.04509450681485665, "m2": 0.04509450681485665, "30t03": 0.04509450681485665, "m3": 0.04509450681485665, "objectives": 0.042113145725826036, "low": 0.042113145725826036, "kpis": 0.042113145725826036, "uptime_pct": 0.042113145725826036, "tti_ms": 0.042113145725826036, "task_min_points": 0.042113145725826036, "updated_at": 0.040418568580510746, "program_id": 0.03999783636956294, "become": 0.03999783636956294, "99": 0.03999783636956294, "20t03": 0.03999783636956294, "12": 0.038357074962840805, "v1": 0.03701647528053232, "themes": 0.03701647528053232, "11": 0.03701647528053232, "error_rate_pct": 0.035883014399449534, "epic": 0.03453916607209182, "performance": 0.033260404517547096, "meta": 0.032559594371927056, "policies": 0.031919804835238604, "ci": 0.031919804835238604, "plugins": 0.02980449547897551, "systems": 0.02980449547897551}, "norm": 0.48318907808625267, "snippet": "version: 0.1.0 updated_at: '2025-10-04T23:27:46Z' program: meta: program: v1 updated_at: '2025-10-04T23:27:46Z' program_id: shelldone-core name: Shelldone Terminal Platform objectives: - Maintain benchmark terminal quality with a decade-long horizon - Become the base platform for plugins, themes, automation, and AI…", "text": "version: 0.1.0\nupdated_at: '2025-10-04T23:27:46Z'\nprogram:\n  meta:\n    program: v1\n    updated_at: '2025-10-04T23:27:46Z'\n    program_id: shelldone-core\n    name: Shelldone Terminal Platform\n    objectives:\n    - Maintain benchmark terminal quality with a decade-long horizon\n    - Become the base platform for plugins, themes, automation, and AI agents\n    - Deliver uncompromising performance and low latency\n    kpis:\n      uptime_pct: 99.9\n      tti_ms: 20\n      render_switch_ms: 80\n      error_rate_pct: 0.2\n    policies:\n      task_min_points: 5\n  progress:\n    health: yellow\n    progress_pct: 15\n    phase_progress:\n      QA Hardening: 15\n      Plugin Platform MVP: 15\n      Animation Engine GA: 15\n  milestones:\n  - id: m1\n    title: QA Hardening\n    due: '2025-10-31T03:00:00Z'\n    status: in_progress\n  - id: m2\n    title: Plugin Platform MVP\n    due: '2025-11-30T03:00:00Z'\n    status: in_progress\n  - id: m3\n    title: Animation Engine GA\n    due: '2025-12-20T03:00:00Z'\n    status: in_progress\nsystems: []\nepics:\n- id: epic-qa-hardening\n  title: QA Pipeline and Quality Budgets\n  type: epic\n  status: in_progress\n  priority: P0\n  size_points: 20\n  scope_paths:\n  - scripts/**\n  - ci/**"}
{"id": "architecture/manifest.yaml:39-91", "path": "architecture/manifest.yaml", "start": 1000, "end": 2200, "start_line": 39, "end_line": 91, "weights": {"qa": 0.1458171917918527, "perf": 0.11657771571749588, "pipeline": 0.11333025191865721, "task": 0.09851913979566987, "verify": 0.09304138643665673, "make": 0.0908738114066027, "docs": 0.08688620454512092, "prepush": 0.08081399762302119, "budget": 0.07349256406061891, "budgets": 0.06925047725366723, "community": 0.06757336540210555, "can": 0.06603525568447306, "artifacts": 0.06516465340884069, "ci": 0.06337362711813796, "md": 0.05806451468944847, "hardening": 0.05387599841534745, "full": 0.05265874864981386, "modernised": 0.0447653498308066, "modes": 0.0447653498308066, "limited": 0.0447653498308066, "rare": 0.0447653498308066, "enlarged": 0.0447653498308066, "times": 0.0447653498308066, "optimised": 0.0447653498308066, "79": 0.0447653498308066, "nextest": 0.0447653498308066, "fast": 0.04180575050154993, "stay": 0.04180575050154993, "platforms": 0.04180575050154993, "verification": 0.04180575050154993, "increase": 0.04180575050154993, "architecture": 0.04088537834518688, "checks": 0.03970588135956613, "900000": 0.03970588135956613, "slow": 0.03970588135956613, "probes": 0.038077096313477, "baseline": 0.038077096313477, "suite": 0.038077096313477, "workspace": 0.038077096313477, "contributor": 0.038077096313477, "handbook": 0.038077096313477, "within": 0.036746282030309455, "regressions": 0.036746282030309455, "4096": 0.036746282030309455, "marker": 0.035621094586314864, "epic": 0.03428705537083568, "quality": 0.03378668270105278, "block": 0.03301762784223653, "big_tasks_planned": 0.03301762784223653, "persistence": 0.03232193309913926, "20": 0.03168681355906898, "runs": 0.03110256021838623, "on": 0.030561626115074386, "termbridge": 0.030058028512979857, "systems": 0.029586944417085176, "security": 0.029586944417085176, "cargo": 0.029586944417085176, "orchestrator": 0.027602026785817718, "observability": 0.02632937432490693, "in_progress": 0.025767614900555628, "automation": 0.025502157643833914, "test": 0.02499856004173938, "progress": 0.024759218269308787, "bundle_kb": 0.024527475945844698}, "norm": 0.43429417871957526, "snippet": "progress systems: [] epics: - id: epic-qa-hardening title: QA Pipeline and Quality Budgets type: epic status: in_progress priority: P0 size_points: 20 scope_paths: - scripts/** - ci/** - docs/architecture/perf-budget.md - docs/community/** spec: 'Given a modernised QA pipeline When make verify runs in…", "text": "progress\nsystems: []\nepics:\n- id: epic-qa-hardening\n  title: QA Pipeline and Quality Budgets\n  type: epic\n  status: in_progress\n  priority: P0\n  size_points: 20\n  scope_paths:\n  - scripts/**\n  - ci/**\n  - docs/architecture/perf-budget.md\n  - docs/community/**\n  spec: 'Given a modernised QA pipeline\n\n    When make verify runs in fast/prepush/full modes\n\n    Then checks stay within budgets and block regressions\n\n    '\n  budgets:\n    latency_ms: 900000\n    memory_mb: 4096\n    bundle_kb: 0\n  risks:\n  - Limited automation on rare platforms can slow verification\n  - Enlarged pipeline can increase CI times if not optimised\n  dependencies: []\n  big_tasks_planned:\n  - task-qa-orchestrator\n  - task-qa-perf-probes\n  - task-qa-marker-baseline\n  - task-state-persistence\n  - task-security-hardening\n  - task-observability-pipeline\n  - task-termbridge-test-suite\n  progress_pct: 79\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  - cargo nextest run --workspace\n  verify_commands:\n  - make verify-prepush\n  - make verify-full\n  docs_updates:\n  - docs/architecture/perf-budget.md\n  - docs/community/contributor-handbook.md\n  artifacts:\n  - artifacts/verify/\n  - artifacts/perf/\n  audit:\n    c"}
{"id": "architecture/manifest.yaml:82-134", "path": "architecture/manifest.yaml", "start": 2000, "end": 3200, "start_line": 82, "end_line": 134, "weights": {"plugin": 0.1356061760342951, "plugins": 0.12190710932753891, "ide": 0.06802127841182563, "docs": 0.06712449260910656, "artifacts": 0.06712449260910656, "architecture": 0.06317252067620979, "perf": 0.060041906215402015, "md": 0.059810815883116084, "task": 0.057989783682091386, "verify": 0.057503774173632956, "prepush": 0.055496329194756396, "epic": 0.05297736750907317, "09": 0.05053028879068757, "platform": 0.05006755708141308, "make": 0.04680342918309988, "00z": 0.04680342918309988, "erify": 0.04611167614150755, "57": 0.04611167614150755, "layer": 0.04611167614150755, "developers": 0.04611167614150755, "loss": 0.04611167614150755, "5120": 0.04611167614150755, "stabilisation": 0.04611167614150755, "take": 0.04611167614150755, "expected": 0.04611167614150755, "00": 0.04474966173940438, "2025": 0.04412300465067404, "extensible": 0.043063066306107824, "longer": 0.043063066306107824, "than": 0.043063066306107824, "20t03": 0.04090004320496662, "contributor": 0.03922227214245375, "handbook": 0.03922227214245375, "capabilities": 0.03922227214245375, "512": 0.03922227214245375, "budget": 0.03785143336956688, "customization": 0.03785143336956688, "mux": 0.03785143336956688, "themes": 0.03785143336956688, "api": 0.03785143336956688, "hooks": 0.03785143336956688, "11": 0.03785143336956688, "marketplace": 0.03669240570169276, "gui": 0.03568841026842567, "40": 0.03568841026842567, "may": 0.03568841026842567, "progress_pct": 0.035148326881929474, "community": 0.034802823534167145, "an": 0.034802823534167145, "performance": 0.03401063920591282, "big_tasks_planned": 0.03401063920591282, "examples": 0.03401063920591282, "available": 0.033294021312647214, "20": 0.03263980043302594, "without": 0.0320379755633001, "cargo": 0.030476777331884728, "imagray": 0.030020953107701007, "are": 0.02808238837610627, "shelldone": 0.027748164597378198, "hardening": 0.027748164597378198, "26t03": 0.027428167496484995, "full": 0.027121235206859017, "observability": 0.027121235206859017, "automation": 0.026269139828610875}, "norm": 0.3861753803235497, "snippet": "erify-prepush - make verify-full docs_updates: - docs/architecture/perf-budget.md - docs/community/contributor-handbook.md artifacts: - artifacts/verify/ - artifacts/perf/ audit: created_at: '2025-09-20T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 57…", "text": "erify-prepush\n  - make verify-full\n  docs_updates:\n  - docs/architecture/perf-budget.md\n  - docs/community/contributor-handbook.md\n  artifacts:\n  - artifacts/verify/\n  - artifacts/perf/\n  audit:\n    created_at: '2025-09-20T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 57\n- id: epic-plugin-platform\n  title: Plugin Architecture and IDE Layer\n  type: epic\n  status: planned\n  priority: P0\n  size_points: 20\n  scope_paths:\n  - plugins/**\n  - docs/architecture/customization-and-plugins.md\n  - shelldone-gui/**\n  - mux/**\n  spec: 'Given an extensible platform\n\n    When developers install plugins and themes\n\n    Then IDE capabilities and automation are available without performance loss\n\n    '\n  budgets:\n    latency_ms: 40\n    memory_mb: 512\n    bundle_kb: 5120\n  risks:\n  - Plugin API stabilisation may take longer than expected\n  dependencies:\n  - epic-qa-hardening\n  big_tasks_planned:\n  - task-plugin-sdk\n  - task-plugin-examples\n  - task-observability-reports\n  - task-marketplace-hooks\n  progress_pct: 11\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  - cargo test -p plugins\n  verify_commands:\n"}
{"id": "architecture/manifest.yaml:125-175", "path": "architecture/manifest.yaml", "start": 3000, "end": 4200, "start_line": 125, "end_line": 175, "weights": {"plugins": 0.12099735478031848, "docs": 0.11103927259964147, "md": 0.07915262201447203, "ai": 0.07197945212096027, "workflows": 0.06479243966555895, "end": 0.06479243966555895, "integration": 0.062491683250226734, "recipes": 0.05793374818229865, "agent": 0.055864181352853405, "observability": 0.05383767585839178, "epic": 0.05258201402019949, "automation": 0.05214620294336189, "09": 0.05015319708329438, "make": 0.04645414986083794, "00z": 0.04645414986083794, "protocols": 0.0457675591553769, "safety": 0.0457675591553769, "guaranteed": 0.0457675591553769, "big_tasks_planne": 0.0457675591553769, "artifacts": 0.04441570903985659, "00": 0.04441570903985659, "2025": 0.04379372849656454, "sk": 0.04274170013964433, "controls": 0.04274170013964433, "execute": 0.04274170013964433, "768": 0.04274170013964433, "reviews": 0.04274170013964433, "backward": 0.04274170013964433, "compatible": 0.04274170013964433, "architecture": 0.041800722636497034, "22t03": 0.04059481900194448, "client": 0.04059481900194448, "slow": 0.04059481900194448, "communications": 0.038929568619002604, "must": 0.038929568619002604, "verify": 0.0380497610203641, "hooks": 0.0375689599862119, "11": 0.0375689599862119, "customization": 0.0375689599862119, "13": 0.0375689599862119, "mux": 0.0375689599862119, "while": 0.0375689599862119, "delivery": 0.0375689599862119, "remain": 0.0375689599862119, "marketplace": 0.036418581778545796, "2048": 0.036418581778545796, "may": 0.03542207884851204, "progress_pct": 0.03488602593504941, "community": 0.034543100970479336, "an": 0.034543100970479336, "examples": 0.03375682846557018, "50": 0.032396219832779474, "terminal": 0.031798886193424726, "cargo": 0.03024933869507962, "security": 0.03024933869507962, "imagray": 0.029796916144210702, "to": 0.029796916144210702, "task": 0.028778512051187147, "mcp": 0.0282199826093808, "cli": 0.0282199826093808, "are": 0.027872818313598016, "prepush": 0.027541088742173887, "shelldone": 0.027541088742173887, "hardening": 0.027541088742173887}, "norm": 0.37641756303413854, "snippet": "sk-plugin-examples - task-observability-reports - task-marketplace-hooks progress_pct: 11 health: yellow tests_required: - make verify-prepush - cargo test -p plugins verify_commands: - make verify-full docs_updates: - docs/architecture/customization-and-plugins.md - docs/recipes/plugins.md artifacts: -…", "text": "sk-plugin-examples\n  - task-observability-reports\n  - task-marketplace-hooks\n  progress_pct: 11\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  - cargo test -p plugins\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/customization-and-plugins.md\n  - docs/recipes/plugins.md\n  artifacts:\n  - artifacts/plugins/\n  - docs/recipes/\n  audit:\n    created_at: '2025-09-22T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: epic-ai-automation\n  title: AI Integration and Agent Workflows\n  type: epic\n  status: in_progress\n  priority: P1\n  size_points: 13\n  scope_paths:\n  - docs/architecture/ai-integration.md\n  - shelldone-client/**\n  - mux/**\n  - docs/community/communications.md\n  spec: 'Given MCP and agent protocols\n\n    When an agent controls the terminal\n\n    Then safety and observability are guaranteed while workflows execute end-to-end\n\n    '\n  budgets:\n    latency_ms: 50\n    memory_mb: 768\n    bundle_kb: 2048\n  risks:\n  - Security reviews may slow delivery\n  - CLI automation must remain backward compatible\n  dependencies:\n  - epic-qa-hardening\n  big_tasks_planne"}
{"id": "architecture/manifest.yaml:167-216", "path": "architecture/manifest.yaml", "start": 4000, "end": 5200, "start_line": 167, "end_line": 216, "weights": {"docs": 0.1293848915508866, "engine": 0.11936086684864465, "task": 0.09780523298555632, "animation": 0.09626314857787129, "md": 0.0960729288943773, "persona": 0.07072594142500198, "artifacts": 0.0646924457754433, "architecture": 0.06088366123141959, "termbridge": 0.059680433424322325, "security": 0.05874509253827057, "agent": 0.05424492971943737, "shelldone": 0.053485592629729, "epic": 0.05105789767178791, "09": 0.04869948122580759, "make": 0.04510765276342235, "00z": 0.04510765276342235, "18": 0.04444096323782974, "21": 0.04444096323782974, "rend": 0.04444096323782974, "00": 0.043128297183628865, "2025": 0.042524345061881505, "768": 0.04150281028052421, "reviews": 0.04150281028052421, "backward": 0.04150281028052421, "compatible": 0.04150281028052421, "slow": 0.039418157581598265, "gov": 0.039418157581598265, "client": 0.039418157581598265, "23t03": 0.039418157581598265, "termwiz": 0.039418157581598265, "must": 0.03780117532569818, "communications": 0.03780117532569818, "notes": 0.03780117532569818, "high": 0.03780117532569818, "animations": 0.03780117532569818, "verify": 0.03694686939658543, "delivery": 0.03648000462429272, "remain": 0.03648000462429272, "microsoft": 0.03648000462429272, "13": 0.03648000462429272, "framework": 0.03648000462429272, "2048": 0.03536297071250099, "may": 0.03439535192536677, "gui": 0.03439535192536677, "progress_pct": 0.03387483677751174, "community": 0.03354185166698718, "big_tasks_planned": 0.032778369669466706, "ux": 0.032778369669466706, "performance": 0.032778369669466706, "new": 0.032778369669466706, "50": 0.031457198968061234, "policy": 0.031457198968061234, "discovery": 0.030877179347238506, "integration": 0.030340165056269502, "cargo": 0.029372546269135286, "bridge": 0.028933237415393002, "imagray": 0.028933237415393002, "recipes": 0.02812725455227543, "core": 0.02775556401323521, "cli": 0.027402012098963965, "mcp": 0.027402012098963965, "hardening": 0.0267427963148645, "prepush": 0.0267427963148645, "26t03": 0.026434393311829743}, "norm": 0.3936917052065316, "snippet": "s: 50 memory_mb: 768 bundle_kb: 2048 risks: - Security reviews may slow delivery - CLI automation must remain backward compatible dependencies: - epic-qa-hardening big_tasks_planned: - task-mcp-bridge - task-termbridge-discovery - task-termbridge-core - task-agent-policy - task-security-agent-gov - task-persona-engine…", "text": "s: 50\n    memory_mb: 768\n    bundle_kb: 2048\n  risks:\n  - Security reviews may slow delivery\n  - CLI automation must remain backward compatible\n  dependencies:\n  - epic-qa-hardening\n  big_tasks_planned:\n  - task-mcp-bridge\n  - task-termbridge-discovery\n  - task-termbridge-core\n  - task-agent-policy\n  - task-security-agent-gov\n  - task-persona-engine\n  - task-agent-microsoft\n  progress_pct: 18\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  - cargo test -p shelldone-client\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/ai-integration.md\n  - docs/architecture/persona-engine.md\n  - docs/community/communications.md\n  artifacts:\n  - artifacts/agents/\n  - artifacts/ux/\n  - docs/ROADMAP/notes/\n  audit:\n    created_at: '2025-09-23T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 21\n- id: epic-animation-engine\n  title: High-performance Animation Engine\n  type: epic\n  status: planned\n  priority: P1\n  size_points: 13\n  scope_paths:\n  - docs/architecture/animation-framework.md\n  - shelldone-gui/**\n  - termwiz/**\n  - docs/recipes/animations.md\n  spec: 'Given the new rend"}
{"id": "architecture/manifest.yaml:208-261", "path": "architecture/manifest.yaml", "start": 5000, "end": 6200, "start_line": 208, "end_line": 261, "weights": {"animation": 0.13023837748770822, "animations": 0.11507122488852242, "docs": 0.10940634212023498, "md": 0.09748576608400049, "recipes": 0.08562267194589727, "effects": 0.07999567273912588, "framework": 0.07403295056106464, "visual": 0.07176602879889907, "gui": 0.06980233184853844, "dx": 0.06980233184853844, "epic": 0.06907833214418364, "ide": 0.06652080903509419, "shelldone": 0.05427214546251913, "full": 0.05304594533106249, "09": 0.049415650067363585, "make": 0.04577100059817856, "00z": 0.04577100059817856, "stays": 0.04509450681485665, "configurable": 0.04509450681485665, "variability": 0.04509450681485665, "size_p": 0.04509450681485665, "artifacts": 0.043762536848093996, "00": 0.043762536848093996, "2025": 0.04314970307749741, "task": 0.04253294795800454, "tus": 0.042113145725826036, "complex": 0.042113145725826036, "enabled": 0.042113145725826036, "gpu": 0.042113145725826036, "platforms": 0.042113145725826036, "planned": 0.041186006127136784, "architecture": 0.041186006127136784, "termwiz": 0.03999783636956294, "render": 0.03999783636956294, "loop": 0.03999783636956294, "fps": 0.03999783636956294, "stable": 0.03999783636956294, "functionality": 0.03999783636956294, "16": 0.038357074962840805, "across": 0.038357074962840805, "24t03": 0.038357074962840805, "verify": 0.0374902057112411, "13": 0.03701647528053232, "remain": 0.03701647528053232, "themes": 0.03701647528053232, "4096": 0.03701647528053232, "toolkit": 0.03701647528053232, "priority": 0.03631310706898321, "progress_pct": 0.034372996141886915, "new": 0.033260404517547096, "big_tasks_planned": 0.033260404517547096, "via": 0.032559594371927056, "256": 0.032559594371927056, "p2": 0.031919804835238604, "plugins": 0.02980449547897551, "cargo": 0.02980449547897551, "perf": 0.029358726200913485, "imagray": 0.029358726200913485, "core": 0.028163734072253376, "are": 0.02746292392663334, "hardening": 0.027136072731259564, "26t03": 0.026823134389944887, "plugin": 0.026522972665531244, "observability": 0.026522972665531244}, "norm": 0.41629139656302827, "snippet": "tus: planned priority: P1 size_points: 13 scope_paths: - docs/architecture/animation-framework.md - shelldone-gui/** - termwiz/** - docs/recipes/animations.md spec: 'Given the new render loop When complex visual effects are enabled Then FPS stays stable and effects remain configurable via plugins and themes ' budgets:…", "text": "tus: planned\n  priority: P1\n  size_points: 13\n  scope_paths:\n  - docs/architecture/animation-framework.md\n  - shelldone-gui/**\n  - termwiz/**\n  - docs/recipes/animations.md\n  spec: 'Given the new render loop\n\n    When complex visual effects are enabled\n\n    Then FPS stays stable and effects remain configurable via plugins and themes\n\n    '\n  budgets:\n    latency_ms: 16\n    memory_mb: 256\n    bundle_kb: 4096\n  risks:\n  - GPU variability across platforms\n  dependencies:\n  - epic-qa-hardening\n  - epic-plugin-platform\n  big_tasks_planned:\n  - task-animation-core\n  - task-animation-toolkit\n  - task-observability-visual\n  progress_pct: 8\n  health: yellow\n  tests_required:\n  - make verify-full\n  - cargo test -p shelldone-gui\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/animation-framework.md\n  - docs/recipes/animations.md\n  artifacts:\n  - artifacts/perf/\n  - docs/recipes/animations.md\n  audit:\n    created_at: '2025-09-24T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: epic-ide-dx\n  title: IDE Functionality and DX\n  type: epic\n  status: planned\n  priority: P2\n  size_p"}
{"id": "architecture/manifest.yaml:252-305", "path": "architecture/manifest.yaml", "start": 6000, "end": 7200, "start_line": 252, "end_line": 305, "weights": {"ide": 0.13304161807018838, "docs": 0.10940634212023498, "epic": 0.08634791518022956, "recipes": 0.08562267194589727, "md": 0.07798861286720038, "contributor": 0.07671414992568161, "handbook": 0.07671414992568161, "09": 0.07412347510104539, "dx": 0.06980233184853844, "manager": 0.06980233184853844, "00z": 0.06865650089726785, "community": 0.06807022838300339, "00": 0.06564380527214099, "2025": 0.06472455461624611, "workflows": 0.06383960967047721, "verify": 0.05623530856686165, "26t03": 0.053646268779889775, "progress_pct": 0.051559494212830376, "automation": 0.05137934701772422, "file": 0.05086329819697024, "updated_by": 0.04728062051082685, "make": 0.04577100059817856, "extensions": 0.04509450681485665, "used": 0.04509450681485665, "primary": 0.04509450681485665, "lsp": 0.04509450681485665, "dap": 0.04509450681485665, "features": 0.04509450681485665, "instantaneous": 0.04509450681485665, "research": 0.04509450681485665, "artifacts": 0.043762536848093996, "term": 0.042113145725826036, "grade": 0.042113145725826036, "reliable": 0.042113145725826036, "384": 0.042113145725826036, "6144": 0.042113145725826036, "gpt": 0.04199570873276953, "updated_at": 0.040418568580510746, "functionality": 0.03999783636956294, "codex": 0.03992832710598734, "workspace": 0.038357074962840805, "30": 0.038357074962840805, "25t03": 0.038357074962840805, "metrics": 0.03833077062065211, "remain": 0.03701647528053232, "complexity": 0.03701647528053232, "ui": 0.03701647528053232, "examples": 0.033260404517547096, "ux": 0.033260404517547096, "big_tasks_planned": 0.033260404517547096, "p2": 0.031919804835238604, "id": 0.0306039408679, "plugins": 0.02980449547897551, "imagray": 0.029358726200913485, "task": 0.028355298638669688, "shelldone": 0.027136072731259564, "prepush": 0.027136072731259564, "plugin": 0.026522972665531244, "full": 0.026522972665531244, "sync": 0.025182372983222755, "bundle_kb": 0.024707825033681793, "memory_mb": 0.02448156283760272, "platform": 0.02448156283760272, "latency_ms": 0.023841773300914266}, "norm": 0.4184274001804755, "snippet": "updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: epic-ide-dx title: IDE Functionality and DX type: epic status: planned priority: P2 size_points: 8 scope_paths: - term/** - docs/recipes/workflows.md - docs/community/contributor-handbook.md - plugins/examples/** spec: 'Given…", "text": "updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: epic-ide-dx\n  title: IDE Functionality and DX\n  type: epic\n  status: planned\n  priority: P2\n  size_points: 8\n  scope_paths:\n  - term/**\n  - docs/recipes/workflows.md\n  - docs/community/contributor-handbook.md\n  - plugins/examples/**\n  spec: 'Given IDE-grade extensions\n\n    When Shelldone is used as the primary workspace\n\n    Then file manager, LSP/DAP, and automation features remain instantaneous and reliable\n\n    '\n  budgets:\n    latency_ms: 30\n    memory_mb: 384\n    bundle_kb: 6144\n  risks:\n  - UX research complexity\n  dependencies:\n  - epic-plugin-platform\n  - epic-ai-automation\n  big_tasks_planned:\n  - task-ide-file-manager\n  - task-state-sync-ui\n  progress_pct: 3\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/recipes/workflows.md\n  - docs/community/contributor-handbook.md\n  artifacts:\n  - docs/recipes/\n  - artifacts/verify/\n  audit:\n    created_at: '2025-09-25T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: epic-p"}
{"id": "architecture/manifest.yaml:297-342", "path": "architecture/manifest.yaml", "start": 7000, "end": 8200, "start_line": 297, "end_line": 342, "weights": {"security": 0.1247203503120206, "docs": 0.0915646924821659, "architecture": 0.08617379743524003, "hardening": 0.0851655205719531, "observability": 0.08324132959643653, "md": 0.08158808730722503, "task": 0.07416001182421303, "state": 0.07239509199845802, "resilience": 0.06441450427331064, "secrets": 0.0623601751560103, "release": 0.058927197443483986, "full": 0.05549421973095769, "epic": 0.05419992214389794, "09": 0.05169637237816498, "platform": 0.05122296224483031, "00z": 0.0478835083180945, "comprehensive": 0.04717579174477311, "guarantees": 0.04717579174477311, "crashes": 0.04717579174477311, "preserved": 0.04717579174477311, "protected": 0.04717579174477311, "team": 0.04717579174477311, "has": 0.04717579174477311, "cost": 0.04717579174477311, "partners": 0.04717579174477311, "ma": 0.04717579174477311, "00": 0.04578234624108295, "2025": 0.04514122783492037, "scenarios": 0.04405682937471032, "stay": 0.04405682937471032, "coordination": 0.04405682937471032, "compliance": 0.04405682937471032, "operations": 0.04184389035585046, "25t03": 0.0401274014995873, "compatibility": 0.0401274014995873, "high": 0.0401274014995873, "verify": 0.039220522897913765, "storage": 0.03872492798578766, "updates": 0.037539153525577976, "code": 0.037539153525577976, "progress_pct": 0.035959442117666315, "existing": 0.035605965615724856, "big_tasks_planned": 0.03479550011066466, "256": 0.034062344881400614, "paths": 0.034062344881400614, "persistence": 0.034062344881400614, "20": 0.033393026596865, "utif": 0.033393026596865, "sigma": 0.033393026596865, "runs": 0.032777313460914725, "integration": 0.03220725213665532, "required": 0.03220725213665532, "foundation": 0.03167653774060185, "imagray": 0.03071374433326334, "pipeline": 0.029858162524723154, "100": 0.029463598721741993, "shelldone": 0.0283885068573177, "26t03": 0.028061125207942343, "bundle_kb": 0.02584818618908249, "memory_mb": 0.025611481122415156, "qa": 0.025611481122415156, "p0": 0.025381842944340684, "latency_ms": 0.02494216283787954, "updated_by": 0.024731401497970967}, "norm": 0.3969345411881329, "snippet": "artifacts/verify/ audit: created_at: '2025-09-25T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: epic-platform-resilience title: Resilience, Security, and Operations type: epic status: planned priority: P0 size_points: 20 scope_paths: -…", "text": "artifacts/verify/\n  audit:\n    created_at: '2025-09-25T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: epic-platform-resilience\n  title: Resilience, Security, and Operations\n  type: epic\n  status: planned\n  priority: P0\n  size_points: 20\n  scope_paths:\n  - docs/architecture/state-and-storage.md\n  - docs/architecture/security-and-secrets.md\n  - docs/architecture/observability.md\n  - docs/architecture/release-and-compatibility.md\n  spec: 'Given comprehensive platform guarantees\n\n    When Shelldone updates, crashes, or runs agent scenarios\n\n    Then state is preserved, secrets stay protected, and the team has full observability\n\n    '\n  budgets:\n    latency_ms: 100\n    memory_mb: 256\n    bundle_kb: 0\n  risks:\n  - High integration cost in existing code paths\n  - Coordination required with security/compliance partners\n  dependencies:\n  - epic-qa-hardening\n  big_tasks_planned:\n  - task-state-persistence\n  - task-security-hardening\n  - task-observability-pipeline\n  - task-release-hardening\n  - task-utif-sigma-foundation\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - ma"}
{"id": "architecture/manifest.yaml:333-384", "path": "architecture/manifest.yaml", "start": 8000, "end": 9200, "start_line": 333, "end_line": 384, "weights": {"make": 0.16258952451293282, "verify": 0.1521990440814564, "docs": 0.08883141807971318, "architecture": 0.08360144527299407, "hardening": 0.08262326622652165, "md": 0.07915262201447203, "qa": 0.07454087789359634, "task": 0.07194628012796786, "artifacts": 0.06662356355978488, "security": 0.06049867739015924, "pipeline": 0.05793374818229865, "release": 0.05716817662427551, "orchestrator": 0.0564399652187616, "26t03": 0.0544469593586941, "observability": 0.05383767585839178, "full": 0.05383767585839178, "roadmap": 0.05383767585839178, "09": 0.05015319708329438, "00z": 0.04645414986083794, "00": 0.04441570903985659, "2025": 0.04379372849656454, "makefile": 0.04274170013964433, "prints": 0.04274170013964433, "enforces": 0.04274170013964433, "stacks": 0.04274170013964433, "gpt": 0.042622510355646695, "scripts": 0.04234352329576382, "it": 0.04059481900194448, "checks": 0.04059481900194448, "codex": 0.04052427228667371, "status": 0.03905811363573106, "compatibility": 0.038929568619002604, "strict": 0.038929568619002604, "across": 0.038929568619002604, "600000": 0.038929568619002604, "storage": 0.0375689599862119, "verify_mode": 0.036418581778545796, "baselines": 0.036418581778545796, "progress_pct": 0.03488602593504941, "new": 0.03375682846557018, "report": 0.033045558467030445, "utif": 0.032396219832779474, "sigma": 0.032396219832779474, "ci": 0.032396219832779474, "runs": 0.031798886193424726, "json": 0.030803375710189464, "foundation": 0.030730969449837615, "ops": 0.030730969449837615, "secrets": 0.03024933869507962, "perf": 0.029796916144210702, "done": 0.02691883792919589, "big_tasks": 0.026344501801314337, "summary": 0.025558229296405187, "memory_mb": 0.02484695929786545, "p0": 0.024624175990778274, "latency_ms": 0.02419762066361448, "updated_by": 0.02399315070698676, "when": 0.02399315070698676, "given": 0.023794133937716896, "created_at": 0.023600287024259727, "created_by": 0.023600287024259727, "budgets": 0.023600287024259727, "state": 0.02341134815870533, "sh": 0.02322707493041897}, "norm": 0.4177917119241172, "snippet": "e - task-security-hardening - task-observability-pipeline - task-release-hardening - task-utif-sigma-foundation progress_pct: 5 health: yellow tests_required: - make verify-full - make roadmap status verify_commands: - make verify-full - make roadmap status - make verify VERIFY_MODE=ci JSON=1 docs_updates: -…", "text": "e\n  - task-security-hardening\n  - task-observability-pipeline\n  - task-release-hardening\n  - task-utif-sigma-foundation\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - make roadmap status\n  verify_commands:\n  - make verify-full\n  - make roadmap status\n  - make verify VERIFY_MODE=ci JSON=1\n  docs_updates:\n  - docs/architecture/state-and-storage.md\n  - docs/architecture/security-and-secrets.md\n  - docs/architecture/observability.md\n  - docs/architecture/release-and-compatibility.md\n  artifacts:\n  - artifacts/verify/\n  - artifacts/perf/\n  - qa/baselines/\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\nbig_tasks:\n- id: task-qa-orchestrator\n  title: make verify Orchestrator\n  type: ops\n  status: done\n  priority: P0\n  size_points: 8\n  parent_epic: epic-qa-hardening\n  scope_paths:\n  - scripts/verify.py\n  - scripts/verify.sh\n  - Makefile\n  spec: 'Given the new pipeline\n\n    When make verify runs\n\n    Then it prints the summary, JSON report, and enforces strict checks across stacks\n\n    '\n  budgets:\n    latency_ms: 600000\n    memory_mb: "}
{"id": "architecture/manifest.yaml:375-430", "path": "architecture/manifest.yaml", "start": 9000, "end": 10200, "start_line": 375, "end_line": 430, "weights": {"perf": 0.15010476553850505, "verify": 0.11500754834726591, "probes": 0.0784445442849075, "budgets": 0.07133319837407827, "make": 0.07020514377464983, "performance": 0.06802127841182563, "artifacts": 0.06712449260910656, "runs": 0.0640759511266002, "md": 0.059810815883116084, "pipeline": 0.05836934027389488, "100": 0.05759801253874374, "prepush": 0.055496329194756396, "summary": 0.05150079286794428, "bundle_kb": 0.05053028879068757, "09": 0.05053028879068757, "memory_mb": 0.05006755708141308, "qa": 0.05006755708141308, "latency_ms": 0.048759115322170525, "when": 0.04834710067272519, "given": 0.04794607440081299, "risks": 0.04794607440081299, "spec": 0.04680342918309988, "00z": 0.04680342918309988, "hang": 0.04611167614150755, "stall": 0.04611167614150755, "contributing": 0.04611167614150755, "docs": 0.04474966173940438, "00": 0.04474966173940438, "2025": 0.04412300465067404, "prints": 0.043063066306107824, "enforces": 0.043063066306107824, "stacks": 0.043063066306107824, "collected": 0.043063066306107824, "compared": 0.043063066306107824, "it": 0.04090004320496662, "checks": 0.04090004320496662, "third": 0.04090004320496662, "party": 0.04090004320496662, "tools": 0.04090004320496662, "20t03": 0.04090004320496662, "profiles": 0.04090004320496662, "900000": 0.04090004320496662, "strict": 0.03922227214245375, "across": 0.03922227214245375, "600000": 0.03922227214245375, "contributor": 0.03922227214245375, "handbook": 0.03922227214245375, "tooling": 0.03922227214245375, "budget": 0.03785143336956688, "regressions": 0.03785143336956688, "4096": 0.03785143336956688, "2048": 0.03669240570169276, "then": 0.0360177941133404, "progress_pct": 0.035148326881929474, "community": 0.034802823534167145, "new": 0.03401063920591282, "can": 0.03401063920591282, "report": 0.033294021312647214, "ci": 0.03263980043302594, "without": 0.0320379755633001, "json": 0.031034980038837503, "green": 0.030962029370513084, "imagray": 0.030020953107701007, "are": 0.02808238837610627}, "norm": 0.4095664281970858, "snippet": "spec: 'Given the new pipeline When make verify runs Then it prints the summary, JSON report, and enforces strict checks across stacks ' budgets: latency_ms: 600000 memory_mb: 2048 bundle_kb: 0 risks: - Third-party tools can hang and stall the pipeline dependencies: [] progress_pct: 100 health: green tests_required: -…", "text": "spec: 'Given the new pipeline\n\n    When make verify runs\n\n    Then it prints the summary, JSON report, and enforces strict checks across stacks\n\n    '\n  budgets:\n    latency_ms: 600000\n    memory_mb: 2048\n    bundle_kb: 0\n  risks:\n  - Third-party tools can hang and stall the pipeline\n  dependencies: []\n  progress_pct: 100\n  health: green\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - CONTRIBUTING.md\n  - docs/community/contributor-handbook.md\n  artifacts:\n  - artifacts/verify/summary.json\n  audit:\n    created_at: '2025-09-20T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 100\n- id: task-qa-perf-probes\n  title: Performance Probes for verify\n  type: perf\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-qa-hardening\n  scope_paths:\n  - docs/architecture/perf-budget.md\n  - ci/**\n  - artifacts/perf/**\n  spec: 'Given performance budgets\n\n    When verify-full runs\n\n    Then profiles are collected and compared without regressions\n\n    '\n  budgets:\n    latency_ms: 900000\n    memory_mb: 4096\n    bundle_kb: 0\n  risks:\n  - Perf tooling "}
{"id": "architecture/manifest.yaml:418-475", "path": "architecture/manifest.yaml", "start": 10000, "end": 11200, "start_line": 418, "end_line": 475, "weights": {"baseline": 0.152308385253908, "qa": 0.12151432649321058, "marker": 0.1068632837589446, "verify": 0.09304138643665673, "perf": 0.08743328678812193, "full": 0.0789881229747208, "make": 0.06815535855495203, "runs": 0.06220512043677246, "orchestrator": 0.055204053571635436, "are": 0.05452492925579758, "bundle_kb": 0.049054951891689395, "memory_mb": 0.048605730597284236, "latency_ms": 0.04733549151714365, "when": 0.04693550649249964, "risks": 0.04654618901684765, "budgets": 0.046166984835778156, "00z": 0.04543690570330135, "environments": 0.0447653498308066, "21t03": 0.0447653498308066, "fixme": 0.0447653498308066, "xxx": 0.0447653498308066, "markers": 0.0447653498308066, "unless": 0.0447653498308066, "artifacts": 0.04344310227256046, "00": 0.04344310227256046, "2025": 0.04283474174116531, "task": 0.04222248848385852, "collected": 0.04180575050154993, "compared": 0.04180575050154993, "unavailable": 0.04180575050154993, "forbidden": 0.04180575050154993, "banned_markers": 0.04180575050154993, "30000": 0.04180575050154993, "large": 0.04180575050154993, "disturb": 0.04180575050154993, "profiles": 0.03970588135956613, "900000": 0.03970588135956613, "be": 0.03970588135956613, "drops": 0.03970588135956613, "tooling": 0.038077096313477, "04t03": 0.038077096313477, "regressions": 0.036746282030309455, "4096": 0.036746282030309455, "budget": 0.036746282030309455, "dependencies": 0.03586207671406465, "ts": 0.035621094586314864, "baselines": 0.035621094586314864, "code": 0.035621094586314864, "then": 0.034966179686673524, "may": 0.034646412888325644, "progress_pct": 0.03412209835982934, "blocked": 0.03378668270105278, "updated": 0.03378668270105278, "vendor": 0.03378668270105278, "new": 0.03301762784223653, "128": 0.03301762784223653, "can": 0.03301762784223653, "ci": 0.03168681355906898, "without": 0.03110256021838623, "ops": 0.030058028512979857, "imagray": 0.02914442892937397, "control": 0.028727214229812302, "100": 0.02795815937099605, "hardening": 0.026937999207673726}, "norm": 0.4124562146350852, "snippet": "ts When verify-full runs Then profiles are collected and compared without regressions ' budgets: latency_ms: 900000 memory_mb: 4096 bundle_kb: 0 risks: - Perf tooling may be unavailable in CI environments dependencies: - task-qa-orchestrator progress_pct: 100 health: yellow tests_required: - make verify-full…", "text": "ts\n\n    When verify-full runs\n\n    Then profiles are collected and compared without regressions\n\n    '\n  budgets:\n    latency_ms: 900000\n    memory_mb: 4096\n    bundle_kb: 0\n  risks:\n  - Perf tooling may be unavailable in CI environments\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 100\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/perf-budget.md\n  artifacts:\n  - artifacts/perf/\n  audit:\n    created_at: '2025-09-21T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-10-04T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-qa-marker-baseline\n  title: Forbidden Marker Control\n  type: ops\n  status: done\n  priority: P0\n  size_points: 5\n  parent_epic: epic-qa-hardening\n  scope_paths:\n  - qa/baselines/banned_markers.json\n  - scripts/verify.py\n  spec: 'Given a marker baseline\n\n    When make verify runs\n\n    Then new TODO/FIXME/XXX/??? markers are blocked unless baseline is updated\n\n    '\n  budgets:\n    latency_ms: 30000\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Large vendor code drops can disturb the baseline\n  dependencies:\n  - task-qa-orchestrator\n"}
{"id": "architecture/manifest.yaml:464-520", "path": "architecture/manifest.yaml", "start": 11000, "end": 12200, "start_line": 464, "end_line": 520, "weights": {"plugins": 0.12376828656918074, "plugin": 0.11014119946602288, "baseline": 0.07964217091521143, "sdk": 0.07914178939796002, "qa": 0.0762479208987932, "100": 0.0584773715088009, "orchestrator": 0.057732483506214155, "prepush": 0.056343601396203064, "progress_pct": 0.053527413839274285, "bundle_kb": 0.0513017435813851, "09": 0.0513017435813851, "memory_mb": 0.05083194726586214, "latency_ms": 0.049503529296554806, "is": 0.048678075536703266, "risks": 0.048678075536703266, "budgets": 0.04828150322520311, "make": 0.04751798535383423, "00z": 0.04751798535383423, "tests_required": 0.047150083803008884, "27t03": 0.04681567119710309, "developer": 0.04681567119710309, "apis": 0.04681567119710309, "00": 0.04543286268199071, "docs": 0.04543286268199071, "2025": 0.04479663830946296, "task": 0.04415634291823371, "30000": 0.043720517700094205, "large": 0.043720517700094205, "disturb": 0.043720517700094205, "banned_markers": 0.043720517700094205, "specification": 0.043720517700094205, "building": 0.043720517700094205, "unsafe": 0.043720517700094205, "might": 0.043720517700094205, "drops": 0.041524471345500455, "22t03": 0.041524471345500455, "use": 0.041524471345500455, "functionality": 0.041524471345500455, "require": 0.041524471345500455, "md": 0.04048263874022615, "they": 0.039821085457605716, "30": 0.039821085457605716, "legacy": 0.039821085457605716, "verify": 0.038921129593349535, "health": 0.03871054452262685, "13": 0.038429317848491566, "customization": 0.038429317848491566, "dependencies": 0.03750461457883097, "code": 0.0372525951017186, "baselines": 0.0372525951017186, "2048": 0.0372525951017186, "adapters": 0.0372525951017186, "updated": 0.03533416435148268, "vendor": 0.03533416435148268, "128": 0.03452988560600309, "can": 0.03452988560600309, "available": 0.03380232698154259, "256": 0.03380232698154259, "20": 0.03313811799688893, "without": 0.03252710496121308, "green": 0.0314347321089942, "imagray": 0.030479288269650642, "feature": 0.030479288269650642, "recipes": 0.029630237619954272}, "norm": 0.39205929174520726, "snippet": "baseline is updated ' budgets: latency_ms: 30000 memory_mb: 128 bundle_kb: 0 risks: - Large vendor code drops can disturb the baseline dependencies: - task-qa-orchestrator progress_pct: 100 health: green tests_required: - make verify-prepush verify_commands: - make verify-prepush docs_updates: [] artifacts: -…", "text": " baseline is updated\n\n    '\n  budgets:\n    latency_ms: 30000\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Large vendor code drops can disturb the baseline\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 100\n  health: green\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates: []\n  artifacts:\n  - qa/baselines/banned_markers.json\n  audit:\n    created_at: '2025-09-22T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-27T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 100\n- id: task-plugin-sdk\n  title: Plugin SDK and Specification\n  type: feature\n  status: planned\n  priority: P0\n  size_points: 13\n  parent_epic: epic-plugin-platform\n  scope_paths:\n  - plugins/sdk/**\n  - docs/architecture/customization-and-plugins.md\n  - docs/recipes/plugins.md\n  spec: 'Given a developer building a plugin\n\n    When they use the Shelldone SDK\n\n    Then functionality is available without unsafe APIs\n\n    '\n  budgets:\n    latency_ms: 30\n    memory_mb: 256\n    bundle_kb: 2048\n  risks:\n  - Legacy plugins might require adapters\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 20\n  health: yellow\n  tests_required:\n "}
{"id": "architecture/manifest.yaml:510-566", "path": "architecture/manifest.yaml", "start": 12000, "end": 13200, "start_line": 510, "end_line": 566, "weights": {"plugins": 0.2494407006240412, "examples": 0.13918200044265863, "prepush": 0.1135540274292708, "make": 0.095767016636189, "plugin": 0.08324132959643653, "they": 0.0802548029991746, "verify": 0.07844104579582753, "docs": 0.06867351936162443, "recipes": 0.05971632504944631, "progress_pct": 0.05393916317649947, "bundle_kb": 0.05169637237816498, "09": 0.05169637237816498, "10": 0.05169637237816498, "memory_mb": 0.05122296224483031, "risks": 0.04905252227160099, "00z": 0.0478835083180945, "tests_required": 0.04751277675533973, "verify_commands": 0.04751277675533973, "atency_ms": 0.04717579174477311, "contributors": 0.04717579174477311, "study": 0.04717579174477311, "launch": 0.04717579174477311, "minutes": 0.04717579174477311, "demand": 0.04717579174477311, "ongoing": 0.04717579174477311, "maintenance": 0.04717579174477311, "docs_updates": 0.047150769102875204, "00": 0.04578234624108295, "2025": 0.04514122783492037, "task": 0.04449600709452782, "might": 0.04405682937471032, "reference": 0.04405682937471032, "64": 0.04405682937471032, "yellow": 0.043364106494584304, "require": 0.04184389035585046, "22t03": 0.04184389035585046, "md": 0.04079404365361251, "30": 0.0401274014995873, "legacy": 0.0401274014995873, "sdk": 0.03987528619666447, "health": 0.039008317942031676, "customization": 0.03872492798578766, "themes": 0.03872492798578766, "within": 0.03872492798578766, "dependencies": 0.03779311161405275, "2048": 0.037539153525577976, "adapters": 0.037539153525577976, "1024": 0.035605965615724856, "new": 0.03479550011066466, "can": 0.03479550011066466, "256": 0.034062344881400614, "20": 0.033393026596865, "doc": 0.033393026596865, "imagray": 0.03071374433326334, "orchestrator": 0.02908828976659252, "26t03": 0.028061125207942343, "p1": 0.026605417518415202, "qa": 0.025611481122415156, "platform": 0.025611481122415156, "latency_ms": 0.02494216283787954, "updated_by": 0.024731401497970967, "when": 0.024731401497970967, "given": 0.024526261135800496, "created_at": 0.02432644970192926}, "norm": 0.47226183895118934, "snippet": "atency_ms: 30 memory_mb: 256 bundle_kb: 2048 risks: - Legacy plugins might require adapters dependencies: - task-qa-orchestrator progress_pct: 20 health: yellow tests_required: - make verify-prepush verify_commands: - make verify-prepush docs_updates: - docs/architecture/customization-and-plugins.md artifacts: -…", "text": "atency_ms: 30\n    memory_mb: 256\n    bundle_kb: 2048\n  risks:\n  - Legacy plugins might require adapters\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 20\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/customization-and-plugins.md\n  artifacts:\n  - plugins/sdk/\n  audit:\n    created_at: '2025-09-22T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-plugin-examples\n  title: Reference Plugins and Themes\n  type: doc\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-plugin-platform\n  scope_paths:\n  - plugins/examples/**\n  - docs/recipes/plugins.md\n  spec: 'Given new contributors\n\n    When they study the examples\n\n    Then they can launch plugins within minutes\n\n    '\n  budgets:\n    latency_ms: 10\n    memory_mb: 64\n    bundle_kb: 1024\n  risks:\n  - Examples demand ongoing maintenance\n  dependencies:\n  - task-plugin-sdk\n  progress_pct: 10\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/recipes/plugins."}
{"id": "architecture/manifest.yaml:556-613", "path": "architecture/manifest.yaml", "start": 13000, "end": 14200, "start_line": 556, "end_line": 613, "weights": {"prepush": 0.11183351186216063, "make": 0.09431600123261039, "docs": 0.09017734865667854, "mcp": 0.08594267431038699, "23t03": 0.08241978403425092, "verify": 0.07725254510195136, "09": 0.07636964101319828, "ai": 0.07307004988036876, "2025": 0.06668590475613237, "integration": 0.06343852693583624, "plugins": 0.06141532401728287, "bridge": 0.060496769141276274, "md": 0.06026392812465484, "progress_pct": 0.05312190312837069, "created_at": 0.04791573426137581, "00z": 0.04715800061630519, "tests_required": 0.04679288619844064, "verify_commands": 0.04679288619844064, "connecting": 0.04646100702136746, "auditable": 0.04646100702136746, "agreement": 0.04646100702136746, "docs_updates": 0.0464363635104074, "audit": 0.045414525922596295, "artifacts": 0.04508867432833927, "00": 0.04508867432833927, "task": 0.043821825168853155, "controls": 0.043389301656911676, "actions": 0.043389301656911676, "safe": 0.043389301656911676, "yellow": 0.042707074577999694, "architecture": 0.0424340669188682, "client": 0.04120989201712546, "it": 0.04120989201712546, "operations": 0.04120989201712546, "25": 0.03951941056777537, "notes": 0.03951941056777537, "health": 0.038417282821697867, "grpc": 0.038138186652669666, "mux": 0.038138186652669666, "traceability": 0.038138186652669666, "15": 0.038138186652669666, "dependencies": 0.037220488710809525, "an": 0.03506648128821387, "1024": 0.03506648128821387, "examples": 0.03426829556353337, "via": 0.033546248746833936, "256": 0.033546248746833936, "terminal": 0.03228068749938571, "on": 0.03171926346791812, "required": 0.03171926346791812, "imagray": 0.030248384570638137, "feature": 0.030248384570638137, "recipes": 0.029405766122833406, "orchestrator": 0.02864755810346233, "are": 0.02829513374259193, "shelldone": 0.027958377965540158, "26t03": 0.027635956644185642, "plugin": 0.027326699109941285, "roadmap": 0.027326699109941285, "in_progress": 0.02674366091951607, "automation": 0.026468148463676112, "p1": 0.026202305131772546, "10": 0.025456547004399425, "bundle_kb": 0.025456547004399425}, "norm": 0.3932577234027244, "snippet": "e dependencies: - task-plugin-sdk progress_pct: 10 health: yellow tests_required: - make verify-prepush verify_commands: - make verify-prepush docs_updates: - docs/recipes/plugins.md artifacts: - plugins/examples/ audit: created_at: '2025-09-23T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z'…", "text": "e\n  dependencies:\n  - task-plugin-sdk\n  progress_pct: 10\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/recipes/plugins.md\n  artifacts:\n  - plugins/examples/\n  audit:\n    created_at: '2025-09-23T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-mcp-bridge\n  title: MCP/gRPC Bridge\n  type: feature\n  status: in_progress\n  priority: P1\n  size_points: 8\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - docs/architecture/ai-integration.md\n  - shelldone-client/**\n  - mux/**\n  spec: 'Given an agent connecting via MCP\n\n    When it controls the terminal\n\n    Then actions are auditable with traceability\n\n    '\n  budgets:\n    latency_ms: 25\n    memory_mb: 256\n    bundle_kb: 1024\n  risks:\n  - Agreement on safe operations required\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 15\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/ai-integration.md\n  artifacts:\n  - docs/ROADMAP/notes/\n  audit:\n    created_at: '2025-09-23T03:0"}
{"id": "architecture/manifest.yaml:605-658", "path": "architecture/manifest.yaml", "start": 14000, "end": 15200, "start_line": 605, "end_line": 658, "weights": {"docs": 0.1322601113631285, "prepush": 0.10934832270966817, "09": 0.09956338383942887, "make": 0.09222009009410792, "00z": 0.09222009009410792, "00": 0.08817340757541901, "2025": 0.0869386610154022, "md": 0.07856630629584632, "notes": 0.07728240288809407, "communications": 0.07728240288809407, "verify": 0.07553582187746355, "ai": 0.07144627099413835, "community": 0.06857445229695157, "audit": 0.06660797135314123, "policy": 0.0643124956680363, "integration": 0.06202878189281765, "imagray": 0.05915239649369236, "agent": 0.055450372602091534, "26t03": 0.0540436485486297, "roadmap": 0.053438878259440735, "created_at": 0.046850940166678574, "created_by": 0.046850940166678574, "verify_commands": 0.045753044282919736, "constrain": 0.0454285401986704, "easily": 0.0454285401986704, "alignment": 0.0454285401986704, "docs_updates": 0.04540444432128723, "artifacts": 0.04408670378770951, "requests": 0.042425094953424745, "actions": 0.042425094953424745, "32": 0.042425094953424745, "requires": 0.042425094953424745, "legal": 0.042425094953424745, "compliance": 0.042425094953424745, "architecture": 0.041491087654004465, "updated_at": 0.040717965384810824, "23t03": 0.04029411663896711, "user": 0.04029411663896711, "approval": 0.038641201444047035, "access": 0.038641201444047035, "24t03": 0.038641201444047035, "documentation": 0.03515969307926381, "progress_pct": 0.034627610928123116, "an": 0.034287226148475784, "can": 0.03350677788434374, "256": 0.032800776552459845, "50": 0.03215624783401815, "doc": 0.03215624783401815, "policies": 0.03215624783401815, "bridge": 0.02957619824684618, "task": 0.02856533788784502, "mcp": 0.028010945701163168, "automation": 0.025879967386705532, "p1": 0.025620031684399826, "bundle_kb": 0.024890845959857216, "10": 0.024890845959857216, "memory_mb": 0.02466290774751089, "latency_ms": 0.024018379029069187, "updated_by": 0.023815423664712784, "when": 0.023815423664712784, "given": 0.02361788109373381, "risks": 0.02361788109373381, "budgets": 0.023425470083339287, "spec": 0.02305502252352698}, "norm": 0.43261809490027436, "snippet": "- make verify-prepush verify_commands: - make verify-prepush docs_updates: - docs/architecture/ai-integration.md artifacts: - docs/ROADMAP/notes/ audit: created_at: '2025-09-23T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 50 - id: task-agent-policy…", "text": " - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/ai-integration.md\n  artifacts:\n  - docs/ROADMAP/notes/\n  audit:\n    created_at: '2025-09-23T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 50\n- id: task-agent-policy\n  title: Agent Policy Documentation\n  type: doc\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - docs/community/communications.md\n  - docs/architecture/ai-integration.md\n  spec: 'Given approval policies for agents\n\n    When an agent requests access\n\n    Then the user can audit and constrain actions easily\n\n    '\n  budgets:\n    latency_ms: 5\n    memory_mb: 32\n    bundle_kb: 256\n  risks:\n  - Requires alignment with legal/compliance\n  dependencies:\n  - task-mcp-bridge\n  progress_pct: 10\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/community/communications.md\n  artifacts:\n  - docs/ROADMAP/notes/\n  audit:\n    created_at: '2025-09-24T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n"}
{"id": "architecture/manifest.yaml:650-704", "path": "architecture/manifest.yaml", "start": 15000, "end": 16200, "start_line": 650, "end_line": 704, "weights": {"animation": 0.19827335080218264, "docs": 0.11103927259964147, "09": 0.10030639416658876, "00z": 0.09290829972167589, "00": 0.08883141807971318, "2025": 0.08758745699312907, "md": 0.07915262201447203, "24t03": 0.07785913723800521, "framework": 0.0751379199724238, "artifacts": 0.06662356355978488, "engine": 0.06146193889967523, "imagray": 0.059593832288421404, "perf": 0.059593832288421404, "core": 0.05716817662427551, "26t03": 0.0544469593586941, "full": 0.05383767585839178, "updated_by": 0.04798630141397352, "created_at": 0.047200574048519454, "created_by": 0.047200574048519454, "make": 0.04645414986083794, "maintains": 0.0457675591553769, "smoothness": 0.0457675591553769, "specific": 0.0457675591553769, "behaviour": 0.0457675591553769, "docs_updates": 0.045743283458013255, "audit": 0.044736697177482916, "rendering": 0.04274170013964433, "gpu": 0.04274170013964433, "gpt": 0.042622510355646695, "architecture": 0.041800722636497034, "updated_at": 0.04102183079813031, "render": 0.04059481900194448, "loop": 0.04059481900194448, "termwiz": 0.04059481900194448, "effects": 0.04059481900194448, "active": 0.04059481900194448, "fps": 0.04059481900194448, "codex": 0.04052427228667371, "communications": 0.038929568619002604, "notes": 0.038929568619002604, "high": 0.038929568619002604, "16": 0.038929568619002604, "12": 0.038929568619002604, "animations": 0.038929568619002604, "metrics": 0.0389028716746917, "verify": 0.0380497610203641, "4096": 0.0375689599862119, "visual": 0.036418581778545796, "gui": 0.03542207884851204, "progress_pct": 0.03488602593504941, "community": 0.034543100970479336, "new": 0.03375682846557018, "256": 0.033045558467030445, "recipes": 0.028966874091149324, "task": 0.028778512051187147, "are": 0.027872818313598016, "shelldone": 0.027541088742173887, "roadmap": 0.02691883792919589, "plugin": 0.02691883792919589, "p1": 0.025811225950701313, "bundle_kb": 0.02507659854164719, "memory_mb": 0.02484695929786545, "platform": 0.02484695929786545, "latency_ms": 0.02419762066361448}, "norm": 0.44564135130434646, "snippet": "docs_updates: - docs/community/communications.md artifacts: - docs/ROADMAP/notes/ audit: created_at: '2025-09-24T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-animation-core title: Render Loop and Animation Core type: perf status: planned…", "text": " docs_updates:\n  - docs/community/communications.md\n  artifacts:\n  - docs/ROADMAP/notes/\n  audit:\n    created_at: '2025-09-24T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-animation-core\n  title: Render Loop and Animation Core\n  type: perf\n  status: planned\n  priority: P1\n  size_points: 8\n  parent_epic: epic-animation-engine\n  scope_paths:\n  - docs/architecture/animation-framework.md\n  - shelldone-gui/**\n  - termwiz/**\n  spec: 'Given the new animation engine\n\n    When visual effects are active\n\n    Then rendering maintains high FPS and smoothness\n\n    '\n  budgets:\n    latency_ms: 16\n    memory_mb: 256\n    bundle_kb: 4096\n  risks:\n  - Platform-specific GPU behaviour\n  dependencies:\n  - task-plugin-sdk\n  progress_pct: 12\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/animation-framework.md\n  - docs/recipes/animations.md\n  artifacts:\n  - artifacts/perf/\n  audit:\n    created_at: '2025-09-24T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n  "}
{"id": "architecture/manifest.yaml:695-749", "path": "architecture/manifest.yaml", "start": 16000, "end": 17200, "start_line": 695, "end_line": 749, "weights": {"animations": 0.15342829985136322, "animation": 0.13023837748770822, "toolkit": 0.11104942584159697, "09": 0.09883130013472717, "md": 0.09748576608400049, "00z": 0.09154200119635712, "00": 0.08752507369618799, "docs": 0.08752507369618799, "2025": 0.08629940615499482, "recipes": 0.08562267194589727, "effect": 0.08422629145165207, "they": 0.07671414992568161, "artifacts": 0.06564380527214099, "imagray": 0.05871745240182697, "26t03": 0.053646268779889775, "full": 0.05304594533106249, "progress_pct": 0.051559494212830376, "updated_by": 0.04728062051082685, "created_at": 0.04650644795957064, "created_by": 0.04650644795957064, "make": 0.04577100059817856, "creator": 0.04509450681485665, "develop": 0.04509450681485665, "share": 0.04509450681485665, "quickly": 0.04509450681485665, "presets": 0.04509450681485665, "designers": 0.04509450681485665, "audit": 0.044078804571931696, "task": 0.04253294795800454, "authoring": 0.042113145725826036, "building": 0.042113145725826036, "requires": 0.042113145725826036, "gpt": 0.04199570873276953, "updated_at": 0.040418568580510746, "use": 0.03999783636956294, "effects": 0.03999783636956294, "codex": 0.03992832710598734, "24t03": 0.038357074962840805, "25t03": 0.038357074962840805, "metrics": 0.03833077062065211, "verify": 0.0374902057112411, "framework": 0.03701647528053232, "ui": 0.03701647528053232, "2048": 0.035883014399449534, "manager": 0.03490116592426922, "an": 0.034035114191501695, "examples": 0.033260404517547096, "can": 0.033260404517547096, "128": 0.033260404517547096, "ide": 0.033260404517547096, "p2": 0.031919804835238604, "20": 0.031919804835238604, "id": 0.0306039408679, "engine": 0.03027904342851647, "plugins": 0.02980449547897551, "perf": 0.029358726200913485, "feature": 0.029358726200913485, "core": 0.028163734072253376, "file": 0.02543164909848512, "test": 0.025182372983222755, "bundle_kb": 0.024707825033681793, "memory_mb": 0.02448156283760272, "latency_ms": 0.023841773300914266, "when": 0.023640310255413424}, "norm": 0.45315996335980774, "snippet": "/animations.md artifacts: - artifacts/perf/ audit: created_at: '2025-09-24T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-animation-toolkit title: Effect Authoring Toolkit type: feature status: planned priority: P2 size_points: 5…", "text": "/animations.md\n  artifacts:\n  - artifacts/perf/\n  audit:\n    created_at: '2025-09-24T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-animation-toolkit\n  title: Effect Authoring Toolkit\n  type: feature\n  status: planned\n  priority: P2\n  size_points: 5\n  parent_epic: epic-animation-engine\n  scope_paths:\n  - docs/recipes/animations.md\n  - plugins/examples/**\n  - docs/architecture/animation-framework.md\n  spec: 'Given a creator building an effect\n\n    When they use the toolkit\n\n    Then they can develop, test, and share effects quickly\n\n    '\n  budgets:\n    latency_ms: 20\n    memory_mb: 128\n    bundle_kb: 2048\n  risks:\n  - Requires UI presets for designers\n  dependencies:\n  - task-animation-core\n  progress_pct: 8\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/recipes/animations.md\n  artifacts:\n  - docs/recipes/animations.md\n  audit:\n    created_at: '2025-09-25T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-ide-file-manager\n"}
{"id": "architecture/manifest.yaml:740-795", "path": "architecture/manifest.yaml", "start": 17000, "end": 18200, "start_line": 740, "end_line": 795, "weights": {"ide": 0.13111347867786682, "09": 0.09739896245161518, "workflows": 0.09437159690418369, "00z": 0.0902153055268447, "00": 0.08625659436725773, "2025": 0.08504869012376301, "recipes": 0.0843817636568263, "25t03": 0.07560235065139637, "file": 0.07518922342160818, "manager": 0.06879070385073353, "ux": 0.06555673933893341, "examples": 0.06555673933893341, "docs": 0.0646924457754433, "imagray": 0.057866474830786004, "feature": 0.057866474830786004, "md": 0.05764375733662637, "task": 0.05588870456317504, "26t03": 0.052868786623659486, "progress_pct": 0.05081225516626761, "updated_by": 0.04659539412661196, "created_at": 0.04583244146740295, "created_by": 0.04583244146740295, "state": 0.045465516714007455, "make": 0.04510765276342235, "switches": 0.04444096323782974, "browser": 0.04444096323782974, "panels": 0.04444096323782974, "respond": 0.04444096323782974, "reliably": 0.04444096323782974, "accumulate": 0.04444096323782974, "debt": 0.04444096323782974, "audit": 0.04343998131726602, "term": 0.04150281028052421, "projects": 0.04150281028052421, "instantly": 0.04150281028052421, "384": 0.04150281028052421, "6144": 0.04150281028052421, "gpt": 0.04138707527287432, "type": 0.041116174794437334, "updated_at": 0.03983279222427146, "user": 0.039418157581598265, "codex": 0.03934965569865419, "30": 0.03780117532569818, "persistent": 0.03780117532569818, "recovery": 0.03780117532569818, "sta": 0.03780117532569818, "metrics": 0.03777525220586005, "verify": 0.03694686939658543, "complexity": 0.03648000462429272, "dx": 0.03439535192536677, "can": 0.032778369669466706, "persistence": 0.032087716192623766, "title": 0.031898946291248974, "p2": 0.031457198968061234, "terminal": 0.030877179347238506, "mode": 0.030340165056269502, "id": 0.0301604054930029, "plugins": 0.029372546269135286, "bridge": 0.028933237415393002, "mcp": 0.027402012098963965, "prepush": 0.0267427963148645, "plugin": 0.02613858175733514, "full": 0.02613858175733514, "bundle_kb": 0.024349740612903795}, "norm": 0.4229072204772349, "snippet": "d audit: created_at: '2025-09-25T03:00:00Z' created_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-ide-file-manager title: File Manager and IDE UX type: feature status: planned priority: P2 size_points: 8 parent_epic: epic-ide-dx scope_paths: - term/** -…", "text": "d\n  audit:\n    created_at: '2025-09-25T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-ide-file-manager\n  title: File Manager and IDE UX\n  type: feature\n  status: planned\n  priority: P2\n  size_points: 8\n  parent_epic: epic-ide-dx\n  scope_paths:\n  - term/**\n  - docs/recipes/workflows.md\n  - plugins/examples/**\n  spec: 'Given IDE mode in the terminal\n\n    When the user switches projects\n\n    Then the file browser and panels respond instantly and reliably\n\n    '\n  budgets:\n    latency_ms: 30\n    memory_mb: 384\n    bundle_kb: 6144\n  risks:\n  - UX complexity can accumulate debt\n  dependencies:\n  - task-plugin-examples\n  - task-mcp-bridge\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/recipes/workflows.md\n  artifacts:\n  - docs/recipes/workflows.md\n  audit:\n    created_at: '2025-09-25T03:00:00Z'\n    created_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-state-persistence\n  title: Persistent State & Recovery\n  type: feature\n  sta"}
{"id": "architecture/manifest.yaml:787-837", "path": "architecture/manifest.yaml", "start": 18000, "end": 19200, "start_line": 787, "end_line": 837, "weights": {"state": 0.1206584866640967, "make": 0.11970877079523626, "roadmap": 0.08324132959643653, "storage": 0.07744985597157532, "docs": 0.06867351936162443, "artifacts": 0.06867351936162443, "md": 0.06119106548041877, "verify": 0.05883078434687065, "shelldone": 0.0567770137146354, "26t03": 0.056122250415884686, "full": 0.05549421973095769, "status": 0.053679868996799614, "09": 0.05169637237816498, "when": 0.04946280299594193, "00z": 0.0478835083180945, "ed_by": 0.04717579174477311, "infrastructure": 0.04717579174477311, "exits": 0.04717579174477311, "recovers": 0.04717579174477311, "settings": 0.04717579174477311, "restored": 0.04717579174477311, "corruption": 0.04717579174477311, "during": 0.04717579174477311, "abnormal": 0.04717579174477311, "shutdowns": 0.04717579174477311, "migration": 0.04717579174477311, "formats": 0.04717579174477311, "00": 0.04578234624108295, "2025": 0.04514122783492037, "task": 0.04449600709452782, "sessions": 0.04405682937471032, "deterministically": 0.04405682937471032, "change": 0.04405682937471032, "backup": 0.04405682937471032, "gpt": 0.04393397221274352, "architecture": 0.04308689871762002, "updated_at": 0.04228404097653432, "codex": 0.041771172972417524, "persistent": 0.0401274014995873, "recovery": 0.0401274014995873, "512": 0.0401274014995873, "snapshot": 0.03872492798578766, "complexity": 0.03872492798578766, "200": 0.0365119889669278, "progress_pct": 0.035959442117666315, "persistence": 0.034062344881400614, "resilience": 0.03220725213665532, "json": 0.0317511718858876, "imagray": 0.03071374433326334, "feature": 0.03071374433326334, "perf": 0.03071374433326334, "recipes": 0.029858162524723154, "release": 0.029463598721741993, "orchestrator": 0.02908828976659252, "are": 0.02873044349247796, "hardening": 0.0283885068573177, "sync": 0.026344636351679194, "bundle_kb": 0.02584818618908249, "10": 0.02584818618908249, "platform": 0.025611481122415156, "memory_mb": 0.025611481122415156, "qa": 0.025611481122415156, "p0": 0.025381842944340684, "latency_ms": 0.02494216283787954}, "norm": 0.3899965047246625, "snippet": "ed_by: imagray updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-state-persistence title: Persistent State & Recovery type: feature status: planned priority: P0 size_points: 8 parent_epic: epic-platform-resilience scope_paths: - docs/architecture/state-and-storage.md -…", "text": "ed_by: imagray\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-state-persistence\n  title: Persistent State & Recovery\n  type: feature\n  status: planned\n  priority: P0\n  size_points: 8\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/state-and-storage.md\n  - shelldone/**\n  spec: 'Given snapshot and sync infrastructure\n\n    When Shelldone exits or recovers\n\n    Then sessions, settings, and agents are restored deterministically\n\n    '\n  budgets:\n    latency_ms: 200\n    memory_mb: 512\n    bundle_kb: 0\n  risks:\n  - Data corruption during abnormal shutdowns\n  - Migration complexity when formats change\n  dependencies:\n  - task-qa-orchestrator\n  - task-release-hardening\n  progress_pct: 10\n  health: yellow\n  tests_required:\n  - make verify-full\n  - JSON=1 make roadmap status\n  verify_commands:\n  - make verify-full\n  - make roadmap status\n  - JSON=1 make roadmap status\n  artifacts:\n  - artifacts/verify/\n  - artifacts/perf/\n  docs_updates:\n  - docs/architecture/state-and-storage.md\n  - docs/recipes/state-backup.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: "}
{"id": "architecture/manifest.yaml:830-880", "path": "architecture/manifest.yaml", "start": 19000, "end": 20200, "start_line": 830, "end_line": 880, "weights": {"verify": 0.09656568137743919, "make": 0.09431600123261039, "security": 0.09212298602592431, "verify_mode": 0.07394075694432026, "state": 0.07129819666514806, "artifacts": 0.0676330114925089, "docs": 0.0676330114925089, "sandbox": 0.06709249749366787, "ci": 0.06577414329685531, "secrets": 0.06141532401728287, "plugins": 0.06141532401728287, "perf": 0.060496769141276274, "md": 0.06026392812465484, "26t03": 0.055271913288371284, "full": 0.05465339821988257, "09": 0.05091309400879885, "00z": 0.04715800061630519, "lua": 0.04646100702136746, "crates": 0.04646100702136746, "management": 0.04646100702136746, "sandboxing": 0.04646100702136746, "privileged": 0.04646100702136746, "audited": 0.04646100702136746, "leaks": 0.04646100702136746, "impact": 0.04646100702136746, "teams": 0.04646100702136746, "docs_upda": 0.04646100702136746, "00": 0.04508867432833927, "2025": 0.04445726983742158, "task": 0.043821825168853155, "backup": 0.043389301656911676, "model": 0.043389301656911676, "enforced": 0.043389301656911676, "overhead": 0.043389301656911676, "coordination": 0.043389301656911676, "legal": 0.043389301656911676, "gpt": 0.04326830596709589, "architecture": 0.0424340669188682, "operations": 0.04120989201712546, "codex": 0.04113827641222938, "storage": 0.038138186652669666, "api": 0.038138186652669666, "request": 0.03697037847216013, "baselines": 0.03697037847216013, "may": 0.03595877701288344, "progress_pct": 0.03541460208558046, "performance": 0.03426829556353337, "256": 0.033546248746833936, "persistence": 0.033546248746833936, "policies": 0.032887071648427656, "without": 0.03228068749938571, "resilience": 0.03171926346791812, "json": 0.03127009352398021, "bridge": 0.030248384570638137, "recipes": 0.029405766122833406, "100": 0.029017180559291356, "mcp": 0.02864755810346233, "are": 0.02829513374259193, "hardening": 0.027958377965540158, "plugin": 0.027326699109941285, "key": 0.026202305131772546, "bundle_kb": 0.025456547004399425, "platform": 0.02522342837813614, "memory_mb": 0.02522342837813614}, "norm": 0.38846263498036876, "snippet": "artifacts/perf/ docs_updates: - docs/architecture/state-and-storage.md - docs/recipes/state-backup.md audit: created_at: '2025-09-26T03:00:00Z' created_by: gpt-5-codex updated_at: '2025-09-26T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-security-hardening title: Secrets Model and Sandbox…", "text": "artifacts/perf/\n  docs_updates:\n  - docs/architecture/state-and-storage.md\n  - docs/recipes/state-backup.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-security-hardening\n  title: Secrets Model and Sandbox\n  type: perf\n  status: planned\n  priority: P0\n  size_points: 5\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/security-and-secrets.md\n  - lua-api-crates/**\n  - plugins/**\n  spec: 'Given key management and sandboxing\n\n    When plugins/agents request privileged operations\n\n    Then policies are enforced and audited without leaks\n\n    '\n  budgets:\n    latency_ms: 100\n    memory_mb: 256\n    bundle_kb: 0\n  risks:\n  - Sandbox overhead may impact plugin performance\n  - Coordination with security/legal teams\n  dependencies:\n  - task-state-persistence\n  - task-mcp-bridge\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  verify_commands:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  artifacts:\n  - artifacts/verify/\n  - qa/baselines/\n  docs_upda"}
{"id": "architecture/manifest.yaml:872-923", "path": "architecture/manifest.yaml", "start": 20000, "end": 21200, "start_line": 872, "end_line": 923, "weights": {"verify": 0.2017458551943046, "make": 0.20152411774162074, "ci": 0.1873853291047101, "full": 0.1297526720328147, "verify_mode": 0.10532568255377993, "observability": 0.07785160321968884, "artifacts": 0.06422703249648327, "docs": 0.06422703249648327, "json": 0.059390681225401275, "security": 0.05832246597324704, "md": 0.057229054046434816, "26t03": 0.05248843564075546, "09": 0.04834912524576581, "qa": 0.047906367567107484, "00z": 0.04478313727591572, "runbook": 0.04412124407784536, "traces": 0.04412124407784536, "slos": 0.04412124407784536, "archived": 0.04412124407784536, "300000": 0.04412124407784536, "collectors": 0.04412124407784536, "verify_c": 0.04412124407784536, "00": 0.042818021664322185, "2025": 0.042218414521867975, "enforced": 0.041204228911599576, "longer": 0.041204228911599576, "gpt": 0.041089326529904005, "architecture": 0.04029709952007628, "stack": 0.03913457371410475, "be": 0.03913457371410475, "codex": 0.03906656465046243, "unified": 0.037529224424074456, "runtime": 0.037529224424074456, "must": 0.037529224424074456, "metrics": 0.03750348780150135, "logs": 0.03621755854785896, "baselines": 0.035108560851259976, "progress_pct": 0.033631132915803025, "1024": 0.033300543381613174, "available": 0.03185686931354014, "runs": 0.030655041366323122, "resilience": 0.030121890487519364, "ops": 0.02962553889408806, "secrets": 0.02916123298662352, "pipeline": 0.027924900202978487, "task": 0.02774331377596459, "orchestrator": 0.02720487532127358, "are": 0.02687019894979953, "roadmap": 0.025950534406562947, "status": 0.025102097012891903, "bundle_kb": 0.024174562622882905, "platform": 0.023953183783553742, "memory_mb": 0.023953183783553742, "p0": 0.02373841426449129, "latency_ms": 0.023327202654131945, "updated_by": 0.023130087731915293, "when": 0.023130087731915293, "given": 0.022938229839237875, "risks": 0.022938229839237875, "created_at": 0.02275135583633672, "created_by": 0.02275135583633672, "budgets": 0.02275135583633672, "spec": 0.02239156863795786, "verify_commands": 0.022218204957532964}, "norm": 0.4833578014207893, "snippet": "- make verify-full - make verify VERIFY_MODE=ci JSON=1 verify_commands: - make verify-full - make verify VERIFY_MODE=ci JSON=1 artifacts: - artifacts/verify/ - qa/baselines/ docs_updates: - docs/architecture/security-and-secrets.md - docs/security/runbook.md audit: created_at: '2025-09-26T03:00:00Z' created_by:…", "text": " - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  verify_commands:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  artifacts:\n  - artifacts/verify/\n  - qa/baselines/\n  docs_updates:\n  - docs/architecture/security-and-secrets.md\n  - docs/security/runbook.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-observability-pipeline\n  title: Observability Stack\n  type: ops\n  status: planned\n  priority: P0\n  size_points: 5\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/observability.md\n  - scripts/verify.py\n  - ci/**\n  spec: 'Given unified metrics/logs/traces\n\n    When make verify-full or make verify-ci runs\n\n    Then SLOs are enforced and artifacts archived\n\n    '\n  budgets:\n    latency_ms: 300000\n    memory_mb: 1024\n    bundle_kb: 0\n  risks:\n  - Longer verify-full runtime\n  - Collectors must be available in CI\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  - JSON=1 make roadmap status\n  verify_c"}
{"id": "architecture/manifest.yaml:914-965", "path": "architecture/manifest.yaml", "start": 21000, "end": 22200, "start_line": 914, "end_line": 965, "weights": {"make": 0.21061543132394947, "ci": 0.13055920173210375, "verify": 0.11500754834726591, "verify_mode": 0.11007721710507826, "release": 0.08639701880811561, "migrations": 0.08180008640993323, "roadmap": 0.08136370562057704, "artifacts": 0.06712449260910656, "docs": 0.06712449260910656, "ship": 0.06658804262529443, "json": 0.062069960077675006, "md": 0.059810815883116084, "26t03": 0.05485633499296999, "full": 0.05424247041371803, "observability": 0.05424247041371803, "status": 0.05246904488408984, "09": 0.05053028879068757, "00z": 0.04680342918309988, "enterprise": 0.04611167614150755, "00": 0.04474966173940438, "2025": 0.04412300465067404, "fast": 0.043063066306107824, "grade": 0.043063066306107824, "signed": 0.043063066306107824, "executed": 0.043063066306107824, "rollback": 0.043063066306107824, "heterogeneous": 0.043063066306107824, "gpt": 0.042942980358320726, "architecture": 0.042115013784139864, "codex": 0.04082896606326525, "compatibility": 0.03922227214245375, "600000": 0.03922227214245375, "512": 0.03922227214245375, "delivery": 0.03785143336956688, "progress_pct": 0.035148326881929474, "self": 0.034802823534167145, "packages": 0.03401063920591282, "available": 0.033294021312647214, "runs": 0.0320379755633001, "resilience": 0.031480772765151814, "ops": 0.030962029370513084, "perf": 0.030020953107701007, "recipes": 0.02918467013694744, "pipeline": 0.02918467013694744, "task": 0.028994891841045693, "orchestrator": 0.028432162929752085, "are": 0.02808238837610627, "hardening": 0.027748164597378198, "update": 0.027748164597378198, "bundle_kb": 0.025265144395343785, "qa": 0.02503377854070654, "platform": 0.02503377854070654, "memory_mb": 0.02503377854070654, "p0": 0.024809320171160065, "latency_ms": 0.024379557661085263, "updated_by": 0.024173550336362596, "when": 0.024173550336362596, "given": 0.023973037200406496, "risks": 0.023973037200406496, "created_at": 0.023777732791359425, "created_by": 0.023777732791359425, "budgets": 0.023777732791359425, "spec": 0.02340171459154994, "tests_required": 0.023220529993211142}, "norm": 0.4431981779875554, "snippet": "in CI dependencies: - task-qa-orchestrator progress_pct: 5 health: yellow tests_required: - make verify-full - make verify VERIFY_MODE=ci JSON=1 - JSON=1 make roadmap status verify_commands: - make verify-full - make verify VERIFY_MODE=ci JSON=1 - make roadmap status - JSON=1 make roadmap status - make verify…", "text": "in CI\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  - JSON=1 make roadmap status\n  verify_commands:\n  - make verify-full\n  - make verify VERIFY_MODE=ci JSON=1\n  - make roadmap status\n  - JSON=1 make roadmap status\n  - make verify VERIFY_MODE=fast\n  artifacts:\n  - artifacts/perf/\n  - artifacts/verify/\n  docs_updates:\n  - docs/architecture/observability.md\n  - docs/recipes/observability.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-release-hardening\n  title: Release Pipeline & Migrations\n  type: ops\n  status: planned\n  priority: P0\n  size_points: 5\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/release-and-compatibility.md\n  - ci/**\n  - scripts/ship/**\n  spec: 'Given enterprise-grade delivery\n\n    When make ship or self-update runs\n\n    Then packages are signed, migrations executed, and rollback available\n\n    '\n  budgets:\n    latency_ms: 600000\n    memory_mb: 512\n    bundle_kb: 0\n  risks:\n  - Heterogeneous "}
{"id": "architecture/manifest.yaml:955-1003", "path": "architecture/manifest.yaml", "start": 22000, "end": 23200, "start_line": 955, "end_line": 1003, "weights": {"verify_mode": 0.1490103804068744, "policies": 0.0994143539906668, "verify": 0.09730282398337384, "make": 0.09503597070766846, "docs": 0.09086572536398142, "md": 0.0809652774804523, "ci": 0.06627623599377785, "architecture": 0.06413698664073209, "security": 0.06188414328459037, "release": 0.0584773715088009, "update": 0.056343601396203064, "prepush": 0.056343601396203064, "26t03": 0.05569383629057259, "09": 0.0513017435813851, "ai": 0.04908522434711795, "00z": 0.04751798535383423, "managers": 0.04681567119710309, "revocation": 0.04681567119710309, "processes": 0.04681567119710309, "guide": 0.04681567119710309, "artifacts": 0.04543286268199071, "00": 0.04543286268199071, "2025": 0.04479663830946296, "signed": 0.043720517700094205, "executed": 0.043720517700094205, "rollback": 0.043720517700094205, "heterogeneous": 0.043720517700094205, "increase": 0.043720517700094205, "reliable": 0.043720517700094205, "gpt": 0.04359859837905845, "migrations": 0.041524471345500455, "be": 0.041524471345500455, "gov": 0.041524471345500455, "codex": 0.04145230905659754, "600000": 0.039821085457605716, "512": 0.039821085457605716, "must": 0.039821085457605716, "keys": 0.039821085457605716, "compatibility": 0.039821085457605716, "access": 0.039821085457605716, "strict": 0.039821085457605716, "complexity": 0.038429317848491566, "agent": 0.038095675833497995, "progress_pct": 0.03568494255951619, "self": 0.03533416435148268, "packages": 0.03452988560600309, "available": 0.03380232698154259, "doc": 0.03313811799688893, "runs": 0.03252710496121308, "integration": 0.03196139525011596, "json": 0.03150879652798006, "secrets": 0.030942071642295184, "package": 0.03004296449988004, "pipeline": 0.029630237619954272, "recipes": 0.029630237619954272, "task": 0.02943756194548914, "are": 0.028511127129939955, "observability": 0.02753529986650572, "automation": 0.02667019539851333, "config": 0.026143532257391564, "bundle_kb": 0.02565087179069255, "memory_mb": 0.02541597363293107, "p0": 0.025188088418048007, "latency_ms": 0.024751764648277403}, "norm": 0.4075806662863977, "snippet": "or self-update runs Then packages are signed, migrations executed, and rollback available ' budgets: latency_ms: 600000 memory_mb: 512 bundle_kb: 0 risks: - Heterogeneous package managers increase complexity - Revocation processes must be reliable dependencies: - task-observability-pipeline progress_pct: 5 health:…", "text": " or self-update runs\n\n    Then packages are signed, migrations executed, and rollback available\n\n    '\n  budgets:\n    latency_ms: 600000\n    memory_mb: 512\n    bundle_kb: 0\n  risks:\n  - Heterogeneous package managers increase complexity\n  - Revocation processes must be reliable\n  dependencies:\n  - task-observability-pipeline\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify VERIFY_MODE=prepush\n  - make verify VERIFY_MODE=ci JSON=1\n  verify_commands:\n  - make verify VERIFY_MODE=prepush\n  - make verify VERIFY_MODE=ci JSON=1\n  artifacts:\n  - artifacts/verify/\n  - release/keys/\n  docs_updates:\n  - docs/architecture/release-and-compatibility.md\n  - docs/recipes/update-guide.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-security-agent-gov\n  title: Agent Access Policies\n  type: doc\n  status: planned\n  priority: P0\n  size_points: 5\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - docs/architecture/security-and-secrets.md\n  - docs/architecture/ai-integration.md\n  - config/policies/**\n  spec: 'Given strict policies for agents\n\n  "}
{"id": "architecture/manifest.yaml:996-1046", "path": "architecture/manifest.yaml", "start": 23000, "end": 24200, "start_line": 996, "end_line": 1046, "weights": {"docs": 0.11272168582084817, "make": 0.09431600123261039, "security": 0.09212298602592431, "secrets": 0.09212298602592431, "architecture": 0.0848681338377364, "md": 0.08035190416620647, "approval": 0.07903882113555075, "ai": 0.07307004988036876, "an": 0.07013296257642775, "policies": 0.06577414329685531, "integration": 0.06343852693583624, "verify": 0.057939408826463513, "26t03": 0.055271913288371284, "full": 0.05465339821988257, "roadmap": 0.05465339821988257, "observability": 0.05465339821988257, "plugin": 0.05465339821988257, "09": 0.05091309400879885, "00z": 0.04715800061630519, "arent_epic": 0.04646100702136746, "decisions": 0.04646100702136746, "noisy": 0.04646100702136746, "archite": 0.04646100702136746, "scope_paths": 0.04608803747669983, "artifacts": 0.04508867432833927, "00": 0.04508867432833927, "2025": 0.04445726983742158, "requests": 0.043389301656911676, "executes": 0.043389301656911676, "logged": 0.043389301656911676, "safe": 0.043389301656911676, "gpt": 0.04326830596709589, "become": 0.04120989201712546, "codex": 0.04113827641222938, "status": 0.03964990323627244, "strict": 0.03951941056777537, "automatically": 0.03951941056777537, "reporting": 0.03951941056777537, "remain": 0.038138186652669666, "baselines": 0.03697037847216013, "may": 0.03595877701288344, "epic": 0.03558580746821582, "progress_pct": 0.03541460208558046, "128": 0.03426829556353337, "ux": 0.03426829556353337, "policy": 0.032887071648427656, "50": 0.032887071648427656, "doc": 0.032887071648427656, "required": 0.03171926346791812, "task": 0.02921455011256877, "are": 0.02829513374259193, "hardening": 0.027958377965540158, "action": 0.0270295724951437, "automation": 0.026468148463676112, "p1": 0.026202305131772546, "config": 0.025945475194835567, "bundle_kb": 0.025456547004399425, "memory_mb": 0.02522342837813614, "qa": 0.02522342837813614, "reports": 0.02522342837813614, "platform": 0.02522342837813614, "latency_ms": 0.02456425127972985, "when": 0.024356683293456256, "updated_by": 0.024356683293456256}, "norm": 0.39945117801093316, "snippet": "arent_epic: epic-ai-automation scope_paths: - docs/architecture/security-and-secrets.md - docs/architecture/ai-integration.md - config/policies/** spec: 'Given strict policies for agents When an agent requests an approval-required action Then the policy executes automatically, decisions are logged, and secrets remain…", "text": "arent_epic: epic-ai-automation\n  scope_paths:\n  - docs/architecture/security-and-secrets.md\n  - docs/architecture/ai-integration.md\n  - config/policies/**\n  spec: 'Given strict policies for agents\n\n    When an agent requests an approval-required action\n\n    Then the policy executes automatically, decisions are logged, and secrets remain\n    safe\n\n    '\n  budgets:\n    latency_ms: 50\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Approval UX may become noisy\n  dependencies:\n  - task-security-hardening\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - make verify-full\n  - make roadmap status\n  verify_commands:\n  - make verify-full\n  - make roadmap status\n  artifacts:\n  - qa/baselines/\n  - artifacts/verify/\n  docs_updates:\n  - docs/architecture/security-and-secrets.md\n  - docs/architecture/ai-integration.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-observability-reports\n  title: Plugin Observability Reporting\n  type: doc\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-plugin-platform\n  scope_paths:\n  - docs/archite"}
{"id": "architecture/manifest.yaml:1038-1089", "path": "architecture/manifest.yaml", "start": 24000, "end": 25200, "start_line": 1038, "end_line": 1089, "weights": {"observability": 0.19573542618283524, "plugins": 0.125687174733044, "docs": 0.0922744962998571, "md": 0.08222055310030428, "artifacts": 0.06920587222489283, "architecture": 0.06513135852663492, "verify": 0.05928683693870685, "26t03": 0.056557306620658984, "plugin": 0.05592440748081007, "full": 0.05592440748081007, "p1": 0.053623322130139164, "09": 0.052097119450863934, "make": 0.04825469830505647, "00z": 0.04825469830505647, "ecosystem": 0.047541495556748095, "captures": 0.047541495556748095, "their": 0.047541495556748095, "footprint": 0.047541495556748095, "many": 0.047541495556748095, "create": 0.047541495556748095, "significant": 0.047541495556748095, "parent_epic": 0.04681143593194, "00": 0.04613724814992855, "2025": 0.04549115983364068, "task": 0.0448409373820823, "extensible": 0.044398355183816594, "leaking": 0.044398355183816594, "gpt": 0.04427454564074928, "type": 0.04398474512893296, "planned": 0.04342090568442327, "third": 0.04216826159891907, "party": 0.04216826159891907, "visualisation": 0.04216826159891907, "codex": 0.04209498051483936, "reporting": 0.04043846662749108, "customization": 0.03902512122598756, "priority": 0.03828358574714509, "visual": 0.037830154715698734, "size_points": 0.037698464383069945, "epic": 0.0364133843860813, "progress_pct": 0.03623819748291954, "an": 0.03588198085305605, "telemetry": 0.03506523266966205, "128": 0.03506523266966205, "can": 0.03506523266966205, "performance": 0.03506523266966205, "animation": 0.034326394066527745, "title": 0.03412445417203379, "doc": 0.03365188726815853, "without": 0.03303140116216212, "id": 0.032264619829724034, "engine": 0.03192209229673054, "load": 0.030951835374606468, "perf": 0.030951835374606468, "feature": 0.030951835374606468, "recipes": 0.03008962114894581, "pipeline": 0.03008962114894581, "100": 0.029691998711833017, "status": 0.027047996006139337, "bundle_kb": 0.026048559725431967, "reports": 0.02581001973576721, "platform": 0.02581001973576721, "memory_mb": 0.02581001973576721, "latency_ms": 0.025135512937397984}, "norm": 0.41861222597656655, "snippet": "id: task-observability-reports title: Plugin Observability Reporting type: doc status: planned priority: P1 size_points: 5 parent_epic: epic-plugin-platform scope_paths: - docs/architecture/observability.md - docs/recipes/plugins.md spec: 'Given an extensible ecosystem When third-party plugins run Then…", "text": "id: task-observability-reports\n  title: Plugin Observability Reporting\n  type: doc\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-plugin-platform\n  scope_paths:\n  - docs/architecture/observability.md\n  - docs/recipes/plugins.md\n  spec: 'Given an extensible ecosystem\n\n    When third-party plugins run\n\n    Then telemetry/observability captures their footprint without leaking data\n\n    '\n  budgets:\n    latency_ms: 100\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Many plugins can create significant load\n  dependencies:\n  - task-observability-pipeline\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  artifacts:\n  - artifacts/perf/\n  - artifacts/verify/\n  docs_updates:\n  - docs/architecture/customization-and-plugins.md\n  - docs/architecture/observability.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-observability-visual\n  title: Performance Visualisation\n  type: feature\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-animation-engine\n "}
{"id": "architecture/manifest.yaml:1080-1133", "path": "architecture/manifest.yaml", "start": 25000, "end": 26200, "start_line": 1080, "end_line": 1133, "weights": {"observability": 0.11184881496162014, "ui": 0.07805024245197512, "docs": 0.06920587222489283, "animation": 0.06865278813305549, "architecture": 0.06513135852663492, "feature": 0.061903670749212936, "perf": 0.061903670749212936, "md": 0.061665414825228214, "26t03": 0.056557306620658984, "full": 0.05592440748081007, "progress_pct": 0.054357296224379306, "sync": 0.05309771667780302, "09": 0.052097119450863934, "state": 0.04863752950800797, "make": 0.04825469830505647, "00z": 0.04825469830505647, "termwindow": 0.047541495556748095, "visually": 0.047541495556748095, "analyse": 0.047541495556748095, "trace": 0.047541495556748095, "overlays": 0.047541495556748095, "meaningful": 0.047541495556748095, "insights": 0.047541495556748095, "diagnostics": 0.047541495556748095, "scope_paths": 0.047159852301739365, "parent_epic": 0.04681143593194, "artifacts": 0.04613724814992855, "00": 0.04613724814992855, "2025": 0.04549115983364068, "task": 0.0448409373820823, "rich": 0.044398355183816594, "users": 0.044398355183816594, "rendering": 0.044398355183816594, "overhead": 0.044398355183816594, "gpt": 0.04427454564074928, "type": 0.04398474512893296, "planned": 0.04342090568442327, "visualisation": 0.04216826159891907, "dashboards": 0.04216826159891907, "fps": 0.04216826159891907, "drops": 0.04216826159891907, "codex": 0.04209498051483936, "metrics": 0.040410734917896804, "verify": 0.0395245579591379, "present": 0.03902512122598756, "framework": 0.03902512122598756, "priority": 0.03828358574714509, "visual": 0.037830154715698734, "size_points": 0.037698464383069945, "gui": 0.03679502764109003, "dx": 0.03679502764109003, "epic": 0.0364133843860813, "performance": 0.03506523266966205, "128": 0.03506523266966205, "ide": 0.03506523266966205, "title": 0.03412445417203379, "20": 0.03365188726815853, "p2": 0.03365188726815853, "terminal": 0.03303140116216212, "without": 0.03303140116216212, "src": 0.0324569207578697, "id": 0.032264619829724034, "engine": 0.03192209229673054, "pipeline": 0.03008962114894581}, "norm": 0.38333610784425864, "snippet": "metrics: progress_pct: 0 - id: task-observability-visual title: Performance Visualisation type: feature status: planned priority: P1 size_points: 5 parent_epic: epic-animation-engine scope_paths: - docs/architecture/observability.md - shelldone-gui/src/termwindow/** spec: 'Given a visually rich terminal When users…", "text": "metrics:\n    progress_pct: 0\n- id: task-observability-visual\n  title: Performance Visualisation\n  type: feature\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-animation-engine\n  scope_paths:\n  - docs/architecture/observability.md\n  - shelldone-gui/src/termwindow/**\n  spec: 'Given a visually rich terminal\n\n    When users analyse perf/trace data\n\n    Then overlays and dashboards present meaningful insights without FPS drops\n\n    '\n  budgets:\n    latency_ms: 20\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Rendering overhead from diagnostics\n  dependencies:\n  - task-observability-pipeline\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  artifacts:\n  - artifacts/perf/\n  docs_updates:\n  - docs/architecture/animation-framework.md\n  - docs/architecture/observability.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-state-sync-ui\n  title: State Sync UI\n  type: feature\n  status: planned\n  priority: P2\n  size_points: 5\n  parent_epic: epic-ide-dx\n  scope_paths:\n  - "}
{"id": "architecture/manifest.yaml:1122-1176", "path": "architecture/manifest.yaml", "start": 26000, "end": 27200, "start_line": 1122, "end_line": 1176, "weights": {"state": 0.11533531813479832, "ui": 0.11104942584159697, "utif": 0.09575941450571582, "docs": 0.08752507369618799, "storage": 0.07403295056106464, "workflows": 0.06383960967047721, "architecture": 0.06177900919070518, "codex": 0.059892490658981015, "md": 0.05849145965040029, "verify": 0.05623530856686165, "26t03": 0.053646268779889775, "full": 0.05304594533106249, "progress_pct": 0.051559494212830376, "sync": 0.05036474596644551, "09": 0.049415650067363585, "make": 0.04577100059817856, "00z": 0.04577100059817856, "multi": 0.04509450681485665, "device": 0.04509450681485665, "synchronise": 0.04509450681485665, "intuitive": 0.04509450681485665, "lets": 0.04509450681485665, "view": 0.04509450681485665, "choose": 0.04509450681485665, "snapshots": 0.04509450681485665, "resolution": 0.04509450681485665, "si": 0.04509450681485665, "scope_paths": 0.04473250696267925, "parent_epic": 0.044402023788384266, "artifacts": 0.043762536848093996, "00": 0.043762536848093996, "2025": 0.04314970307749741, "task": 0.04253294795800454, "users": 0.042113145725826036, "sessions": 0.042113145725826036, "them": 0.042113145725826036, "gpt": 0.04199570873276953, "type": 0.04172082442376729, "planned": 0.041186006127136784, "merge": 0.03999783636956294, "conflict": 0.038357074962840805, "foundations": 0.038357074962840805, "metrics": 0.03833077062065211, "complexity": 0.03701647528053232, "priority": 0.03631310706898321, "size_points": 0.03575810224570605, "dx": 0.03490116592426922, "gui": 0.03490116592426922, "epic": 0.03453916607209182, "an": 0.034035114191501695, "ide": 0.033260404517547096, "ux": 0.033260404517547096, "256": 0.032559594371927056, "persistence": 0.032559594371927056, "title": 0.03236804844259087, "p2": 0.031919804835238604, "sigma": 0.031919804835238604, "src": 0.030786343954155818, "resilience": 0.030786343954155818, "id": 0.0306039408679, "foundation": 0.03027904342851647, "ops": 0.03027904342851647, "feature": 0.029358726200913485, "recipes": 0.028540890648632425}, "norm": 0.3929178192804831, "snippet": "-5-codex metrics: progress_pct: 0 - id: task-state-sync-ui title: State Sync UI type: feature status: planned priority: P2 size_points: 5 parent_epic: epic-ide-dx scope_paths: - docs/architecture/state-and-storage.md - shelldone-gui/src/** spec: 'Given multi-device workflows When users synchronise sessions Then an…", "text": "-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-state-sync-ui\n  title: State Sync UI\n  type: feature\n  status: planned\n  priority: P2\n  size_points: 5\n  parent_epic: epic-ide-dx\n  scope_paths:\n  - docs/architecture/state-and-storage.md\n  - shelldone-gui/src/**\n  spec: 'Given multi-device workflows\n\n    When users synchronise sessions\n\n    Then an intuitive UI/CLI lets them view, choose, and merge snapshots\n\n    '\n  budgets:\n    latency_ms: 100\n    memory_mb: 256\n    bundle_kb: 0\n  risks:\n  - Conflict resolution and UX complexity\n  dependencies:\n  - task-state-persistence\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-full\n  verify_commands:\n  - make verify-full\n  artifacts:\n  - artifacts/verify/\n  docs_updates:\n  - docs/architecture/state-and-storage.md\n  - docs/recipes/workflows.md\n  audit:\n    created_at: '2025-09-26T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-09-26T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-utif-sigma-foundation\n  title: UTIF-Σ Foundations\n  type: ops\n  status: planned\n  priority: P0\n  size_points: 8\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/utif-si"}
{"id": "architecture/manifest.yaml:1168-1220", "path": "architecture/manifest.yaml", "start": 27000, "end": 28200, "start_line": 1168, "end_line": 1220, "weights": {"utif": 0.18874319380836738, "sigma": 0.12582879587224494, "perf": 0.11573294966157201, "25": 0.07560235065139637, "03t03": 0.07296000924858544, "persona": 0.07072594142500198, "make": 0.06766147914513353, "docs": 0.0646924457754433, "artifacts": 0.0646924457754433, "policies": 0.06291439793612247, "architecture": 0.06088366123141959, "engine": 0.059680433424322325, "md": 0.05764375733662637, "verify": 0.055420304094878144, "full": 0.05227716351467028, "10": 0.04869948122580759, "platform": 0.04825351515817348, "00z": 0.04510765276342235, "pty": 0.04444096323782974, "ack": 0.04444096323782974, "p99": 0.04444096323782974, "ms": 0.04444096323782974, "gate": 0.04444096323782974, "esc": 0.04444096323782974, "osc": 0.04444096323782974, "handshake": 0.04444096323782974, "blocking": 0.04444096323782974, "k6": 0.04444096323782974, "utif_exec": 0.04444096323782974, "00": 0.043128297183628865, "2025": 0.042524345061881505, "cap": 0.04150281028052421, "enabled": 0.04150281028052421, "execute": 0.04150281028052421, "unsafe": 0.04150281028052421, "cross": 0.04150281028052421, "gpt": 0.04138707527287432, "type": 0.041116174794437334, "ask": 0.039418157581598265, "codex": 0.03934965569865419, "foundations": 0.03780117532569818, "drift": 0.03648000462429272, "regressions": 0.03648000462429272, "budget": 0.03648000462429272, "commands": 0.03536297071250099, "js": 0.03536297071250099, "verify_mode": 0.03536297071250099, "progress_pct": 0.03387483677751174, "128": 0.032778369669466706, "telemetry": 0.032778369669466706, "title": 0.031898946291248974, "policy": 0.031457198968061234, "workflows": 0.031457198968061234, "ci": 0.031457198968061234, "resilience": 0.030340165056269502, "src": 0.030340165056269502, "foundation": 0.029840216712161163, "ops": 0.029840216712161163, "plane": 0.029840216712161163, "feature": 0.028933237415393002, "control": 0.02851904601075569, "task": 0.02794435228158752, "orchestrator": 0.027402012098963965, "are": 0.02706491053639228}, "norm": 0.43165142984450394, "snippet": "ask-utif-sigma-foundation title: UTIF-Σ Foundations type: ops status: planned priority: P0 size_points: 8 parent_epic: epic-platform-resilience scope_paths: - docs/architecture/utif-sigma.md - scripts/perf/** - policies/** - shelldone-*/src/** spec: 'Given the UTIF-Σ control plane When Σ-pty, Σ-cap, and ACK are…", "text": "ask-utif-sigma-foundation\n  title: UTIF-Σ Foundations\n  type: ops\n  status: planned\n  priority: P0\n  size_points: 8\n  parent_epic: epic-platform-resilience\n  scope_paths:\n  - docs/architecture/utif-sigma.md\n  - scripts/perf/**\n  - policies/**\n  - shelldone-*/src/**\n  spec: 'Given the UTIF-Σ control plane\n\n    When Σ-pty, Σ-cap, and ACK are enabled\n\n    Then commands execute with p99 ≤ 25 ms and policies gate unsafe ESC/OSC\n\n    '\n  budgets:\n    latency_ms: 25\n    memory_mb: 128\n    bundle_kb: 0\n  risks:\n  - Cross-platform handshake drift\n  - Policy regressions blocking workflows\n  dependencies:\n  - task-qa-orchestrator\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-full\n  - k6 run perf/utif_exec.js\n  verify_commands:\n  - make verify-full\n  - make verify VERIFY_MODE=ci\n  docs_updates:\n  - docs/architecture/utif-sigma.md\n  - docs/architecture/perf-budget.md\n  artifacts:\n  - artifacts/perf/utif-sigma/\n  - artifacts/telemetry/\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-persona-engine\n  title: Persona Engine\n  type: feature\n "}
{"id": "architecture/manifest.yaml:1211-1263", "path": "architecture/manifest.yaml", "start": 28000, "end": 29200, "start_line": 1211, "end_line": 1263, "weights": {"personas": 0.16722300200619972, "03t03": 0.11023884609092838, "persona": 0.1068632837589446, "utif": 0.09506044067720694, "sigma": 0.09506044067720694, "00z": 0.0908738114066027, "hints": 0.0895306996616132, "gpt": 0.08337834142564463, "codex": 0.07927375892575587, "10": 0.0735824278375341, "gui": 0.06929282577665129, "ux": 0.06603525568447306, "00": 0.06516465340884069, "docs": 0.06516465340884069, "2025": 0.06425211261174797, "architecture": 0.06132806751778032, "engine": 0.060116057025959714, "md": 0.05806451468944847, "shelldone": 0.05387599841534745, "full": 0.05265874864981386, "config": 0.04999712008347876, "updated_by": 0.04693550649249964, "ai": 0.04693550649249964, "created_by": 0.046166984835778156, "make": 0.04543690570330135, "nova": 0.0447653498308066, "flux": 0.0447653498308066, "negotiate": 0.0447653498308066, "adapt": 0.0447653498308066, "cognitive": 0.0447653498308066, "overload": 0.0447653498308066, "192": 0.0447653498308066, "fatigue": 0.0447653498308066, "misfire": 0.0447653498308066, "consent": 0.0447653498308066, "progress_": 0.0447653498308066, "artifacts": 0.04344310227256046, "switch": 0.04180575050154993, "prompts": 0.04180575050154993, "complex": 0.04180575050154993, "scenarios": 0.04180575050154993, "updated_at": 0.04012354253247782, "flows": 0.03970588135956613, "metrics": 0.03805098397378604, "verify": 0.03721655457466269, "40": 0.034646412888325644, "progress_pct": 0.03412209835982934, "policy": 0.03168681355906898, "without": 0.03110256021838623, "integration": 0.030561626115074386, "foundation": 0.030058028512979857, "cargo": 0.029586944417085176, "feature": 0.02914442892937397, "task": 0.028148325655905675, "core": 0.02795815937099605, "automation": 0.025502157643833914, "test": 0.02499856004173938, "bundle_kb": 0.024527475945844698, "memory_mb": 0.024302865298642118, "p0": 0.024084960458133495, "latency_ms": 0.023667745758571824, "when": 0.02346775324624982, "given": 0.023273094508423825, "risks": 0.023273094508423825}, "norm": 0.4533159400949368, "snippet": "0:00Z' created_by: gpt-5-codex updated_at: '2025-10-03T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-persona-engine title: Persona Engine type: feature status: planned priority: P0 size_points: 8 parent_epic: epic-ai-automation scope_paths: - config/personas/** - docs/architecture/utif-…", "text": "0:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-persona-engine\n  title: Persona Engine\n  type: feature\n  status: planned\n  priority: P0\n  size_points: 8\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - config/personas/**\n  - docs/architecture/utif-sigma.md\n  - shelldone-gui/**\n  spec: 'Given personas Nova/Core/Flux\n\n    When personas switch or negotiate\n\n    Then hints and policy prompts adapt without cognitive overload\n\n    '\n  budgets:\n    latency_ms: 40\n    memory_mb: 192\n    bundle_kb: 0\n  risks:\n  - UX fatigue if hints misfire\n  - Complex consent flows for agents\n  dependencies:\n  - task-utif-sigma-foundation\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-full\n  - cargo test -p shelldone-gui -- persona scenarios\n  verify_commands:\n  - make verify-full\n  docs_updates:\n  - docs/architecture/utif-sigma.md\n  - docs/architecture/ai-integration.md\n  artifacts:\n  - config/personas/\n  - artifacts/ux/\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_"}
{"id": "architecture/manifest.yaml:1255-1305", "path": "architecture/manifest.yaml", "start": 29000, "end": 30200, "start_line": 1255, "end_line": 1305, "weights": {"microsoft": 0.2535229098350127, "03t03": 0.10865267564357689, "agents": 0.10481932021411167, "agentd": 0.10244371005109239, "smoke": 0.08824248815569072, "adapter": 0.08240845782319915, "md": 0.07630540539524643, "readme": 0.07505844884814891, "10": 0.07252368786864873, "api": 0.07243511709571793, "ai": 0.06939026319574589, "00z": 0.06717470591387358, "00": 0.06422703249648327, "2025": 0.06332762178280196, "gpt": 0.061633989794856014, "integration": 0.06024378097503873, "bridge": 0.057450169256463804, "sdk": 0.055940149700356635, "agent": 0.053854678426491776, "created_at": 0.04550271167267344, "created_by": 0.04550271167267344, "nfig": 0.04412124407784536, "parity": 0.04412124407784536, "recognises": 0.04412124407784536, "surface": 0.04412124407784536, "breaking": 0.04412124407784536, "leakage": 0.04412124407784536, "audit": 0.043127463466062665, "artifacts": 0.042818021664322185, "docs": 0.042818021664322185, "py": 0.04251509491327424, "personas": 0.041204228911599576, "pass": 0.041204228911599576, "changes": 0.041204228911599576, "scripts": 0.04082037497577232, "architecture": 0.04029709952007628, "codex": 0.03906656465046243, "installed": 0.03621755854785896, "tests": 0.03621755854785896, "progress_pct": 0.033631132915803025, "1024": 0.033300543381613174, "ux": 0.03254255406033385, "128": 0.03254255406033385, "50": 0.031230888184118347, "secrets": 0.02916123298662352, "feature": 0.028725084628231902, "package": 0.028313873017872557, "lock": 0.027924900202978487, "task": 0.02774331377596459, "mcp": 0.02720487532127358, "shelldone": 0.02655040209677195, "prepush": 0.02655040209677195, "automation": 0.025135220123778754, "p1": 0.024882764585568175, "key": 0.024882764585568175, "bundle_kb": 0.024174562622882905, "memory_mb": 0.023953183783553742, "latency_ms": 0.023327202654131945, "updated_by": 0.023130087731915293, "when": 0.023130087731915293, "given": 0.022938229839237875, "is": 0.022938229839237875, "risks": 0.022938229839237875, "budgets": 0.02275135583633672}, "norm": 0.47144457951619023, "snippet": "nfig/personas/ - artifacts/ux/ audit: created_at: '2025-10-03T03:00:00Z' created_by: gpt-5-codex updated_at: '2025-10-03T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-agent-microsoft title: Microsoft Agent SDK Adapter type: feature status: planned priority: P1 size_points: 5 parent_epic: epic-…", "text": "nfig/personas/\n  - artifacts/ux/\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-agent-microsoft\n  title: Microsoft Agent SDK Adapter\n  type: feature\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - agents/microsoft/**\n  - docs/architecture/ai-integration.md\n  - scripts/agentd.py\n  spec: 'Given parity with Microsoft Agent SDK\n\n    When agents/microsoft is installed\n\n    Then shelldone-agentd recognises the adapter and smoke tests pass\n\n    '\n  budgets:\n    latency_ms: 50\n    memory_mb: 128\n    bundle_kb: 1024\n  risks:\n  - SDK surface changes breaking bridge API\n  - API key leakage if secrets не защищены\n  dependencies:\n  - task-mcp-bridge\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - python3 scripts/agentd.py smoke\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - agents/README.md\n  - docs/architecture/ai-integration.md\n  artifacts:\n  - agents/microsoft/package-lock.json\n  - agents/microsoft/README.md\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-"}
{"id": "architecture/manifest.yaml:1298-1347", "path": "architecture/manifest.yaml", "start": 30000, "end": 31200, "start_line": 1298, "end_line": 1347, "weights": {"marketplace": 0.1781054729315743, "md": 0.1354838676087131, "docs": 0.13032930681768137, "architecture": 0.10221344586296718, "utif": 0.09506044067720694, "sigma": 0.09506044067720694, "capability": 0.08361150100309986, "plugin": 0.0789881229747208, "microsoft": 0.07349256406061891, "03t03": 0.07349256406061891, "hooks": 0.07349256406061891, "plugins": 0.05917388883417035, "prepush": 0.05387599841534745, "10": 0.049054951891689395, "00z": 0.04543690570330135, "make": 0.04543690570330135, "dme": 0.0447653498308066, "bundles": 0.0447653498308066, "activation": 0.0447653498308066, "unsandboxed": 0.0447653498308066, "slipping": 0.0447653498308066, "store": 0.0447653498308066, "00": 0.04344310227256046, "2025": 0.04283474174116531, "agents": 0.04253981170733291, "task": 0.04222248848385852, "cap": 0.04180575050154993, "before": 0.04180575050154993, "vs": 0.04180575050154993, "gpt": 0.04168917071282231, "third": 0.03970588135956613, "party": 0.03970588135956613, "profiles": 0.03970588135956613, "codex": 0.03963687946287794, "readme": 0.038077096313477, "they": 0.038077096313477, "60": 0.038077096313477, "capabilities": 0.038077096313477, "verify": 0.03721655457466269, "installed": 0.036746282030309455, "drift": 0.036746282030309455, "updates": 0.035621094586314864, "progress_pct": 0.03412209835982934, "1024": 0.03378668270105278, "registry": 0.03301762784223653, "128": 0.03301762784223653, "via": 0.03232193309913926, "policies": 0.03168681355906898, "policy": 0.03168681355906898, "integration": 0.030561626115074386, "foundation": 0.030058028512979857, "feature": 0.02914442892937397, "package": 0.028727214229812302, "lock": 0.028332562979664303, "recipes": 0.028332562979664303, "are": 0.02726246462789879, "p1": 0.025246016623313695, "bundle_kb": 0.024527475945844698, "platform": 0.024302865298642118, "memory_mb": 0.024302865298642118, "latency_ms": 0.023667745758571824, "ai": 0.02346775324624982, "updated_by": 0.02346775324624982, "when": 0.02346775324624982}, "norm": 0.44694879508298285, "snippet": "DME.md - docs/architecture/ai-integration.md artifacts: - agents/microsoft/package-lock.json - agents/microsoft/README.md audit: created_at: '2025-10-03T03:00:00Z' created_by: gpt-5-codex updated_at: '2025-10-03T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 0 - id: task-marketplace-hooks title: Capability…", "text": "DME.md\n  - docs/architecture/ai-integration.md\n  artifacts:\n  - agents/microsoft/package-lock.json\n  - agents/microsoft/README.md\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-marketplace-hooks\n  title: Capability Marketplace Hooks\n  type: feature\n  status: planned\n  priority: P1\n  size_points: 5\n  parent_epic: epic-plugin-platform\n  scope_paths:\n  - docs/architecture/utif-sigma.md\n  - docs/architecture/plugin-marketplace.md\n  - docs/recipes/plugins.md\n  - plugins/registry/**\n  spec: 'Given third-party capability bundles\n\n    When they are installed via marketplace\n\n    Then Σ-cap updates profiles and policies before activation\n\n    '\n  budgets:\n    latency_ms: 60\n    memory_mb: 128\n    bundle_kb: 1024\n  risks:\n  - Unsandboxed capabilities slipping in\n  - Marketplace drift vs policy store\n  dependencies:\n  - task-plugin-sdk\n  - task-utif-sigma-foundation\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/utif-sigma.md\n  - docs/architecture/"}
{"id": "architecture/manifest.yaml:1338-1383", "path": "architecture/manifest.yaml", "start": 31000, "end": 32200, "start_line": 1338, "end_line": 1383, "weights": {"termbridge": 0.1857721762230785, "adapters": 0.11007721710507826, "agentd": 0.107065230805277, "src": 0.09444231829545544, "docs": 0.08949932347880876, "shelldone": 0.0832444937921346, "md": 0.07974775451082144, "03t03": 0.07570286673913376, "terminals": 0.07338481140338551, "rs": 0.06960564706833429, "discovery": 0.0640759511266002, "terminal": 0.0640759511266002, "architecture": 0.06317252067620979, "plugins": 0.060953554663769456, "mcp": 0.05686432585950417, "prepush": 0.055496329194756396, "10": 0.05053028879068757, "make": 0.04680342918309988, "00z": 0.04680342918309988, "ation": 0.04611167614150755, "advertise": 0.04611167614150755, "boots": 0.04611167614150755, "discovered": 0.04611167614150755, "cau": 0.04611167614150755, "artifacts": 0.04474966173940438, "00": 0.04474966173940438, "2025": 0.04412300465067404, "receives": 0.043063066306107824, "endpoints": 0.043063066306107824, "validated": 0.043063066306107824, "against": 0.043063066306107824, "exposed": 0.043063066306107824, "runners": 0.043063066306107824, "partial": 0.043063066306107824, "gpt": 0.042942980358320726, "external": 0.04090004320496662, "85": 0.04090004320496662, "codex": 0.04082896606326525, "mod": 0.03922227214245375, "capabilities": 0.03922227214245375, "diff_coverage_pct": 0.03922227214245375, "verify": 0.03833584944908864, "grpc": 0.03785143336956688, "drift": 0.03785143336956688, "metadata": 0.03785143336956688, "marketplace": 0.03669240570169276, "updates": 0.03669240570169276, "error_rate_pct": 0.03669240570169276, "200": 0.03568841026842567, "progress_pct": 0.035148326881929474, "registry": 0.03401063920591282, "utif": 0.03263980043302594, "sigma": 0.03263980043302594, "policy": 0.03263980043302594, "without": 0.0320379755633001, "feature": 0.030020953107701007, "to": 0.030020953107701007, "recipes": 0.02918467013694744, "are": 0.02808238837610627, "plugin": 0.027121235206859017, "in_progress": 0.026542580762226473, "automation": 0.026269139828610875, "p0": 0.024809320171160065, "latency_ms": 0.024379557661085263}, "norm": 0.44603912511686317, "snippet": "ation progress_pct: 0 health: yellow tests_required: - make verify-prepush verify_commands: - make verify-prepush docs_updates: - docs/architecture/utif-sigma.md - docs/architecture/plugin-marketplace.md - docs/recipes/plugins.md artifacts: - artifacts/plugins/ audit: created_at: '2025-10-03T03:00:00Z' created_by:…", "text": "ation\n  progress_pct: 0\n  health: yellow\n  tests_required:\n  - make verify-prepush\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/utif-sigma.md\n  - docs/architecture/plugin-marketplace.md\n  - docs/recipes/plugins.md\n  artifacts:\n  - artifacts/plugins/\n  audit:\n    created_at: '2025-10-03T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-03T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\n- id: task-termbridge-discovery\n  title: TermBridge Discovery Registry\n  type: feature\n  status: in_progress\n  priority: P0\n  size_points: 5\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - docs/architecture/termbridge.md\n  - shelldone-agentd/src/adapters/termbridge/mod.rs\n  - shelldone-agentd/src/adapters/termbridge/terminals/**\n  - shelldone-agentd/src/adapters/mcp/grpc.rs\n  spec: 'Given external terminals advertise capabilities\n\n    When TermBridge boots or receives MCP updates\n\n    Then terminal endpoints are discovered, validated against policy, and exposed\n    to command runners without drift\n\n    '\n  budgets:\n    latency_ms: 200\n    error_rate_pct: 1.0\n    diff_coverage_pct: 85\n  risks:\n  - Partial terminal metadata cau"}
{"id": "architecture/manifest.yaml:1374-1418", "path": "architecture/manifest.yaml", "start": 32000, "end": 33200, "start_line": 1374, "end_line": 1418, "weights": {"termbridge": 0.19454881446983813, "docs": 0.11715954746733824, "shelldone": 0.11623640602996223, "agentd": 0.11212343068584127, "architecture": 0.11026174868682288, "md": 0.1043942062001895, "28": 0.09658036105229141, "04t22": 0.0821505857471866, "test": 0.08090085178862114, "policy": 0.0683636764975189, "cargo": 0.06383325015969558, "security": 0.06383325015969558, "secrets": 0.06383325015969558, "core": 0.060319178485456044, "10": 0.052917546528830295, "00z": 0.04901461481379752, "ated": 0.048290180526145705, "causing": 0.048290180526145705, "mismatched": 0.048290180526145705, "misconfiguration": 0.048290180526145705, "agen": 0.048290180526145705, "artifacts": 0.0468638189869353, "2025": 0.04620755605149329, "against": 0.04509754187962473, "exposed": 0.04509754187962473, "runners": 0.04509754187962473, "partial": 0.04509754187962473, "leaking": 0.04509754187962473, "unmanaged": 0.04509754187962473, "gpt": 0.044971782579973675, "85": 0.04283232871071307, "bindings": 0.04283232871071307, "e2e_mcp_grpc": 0.04283232871071307, "codex": 0.04275789359381321, "diff_coverage_pct": 0.0410752928735933, "25": 0.0410752928735933, "verify": 0.040146991942746374, "drift": 0.03963969006419209, "metadata": 0.03963969006419209, "app": 0.03963969006419209, "error_rate_pct": 0.03842590518366249, "terminals": 0.03842590518366249, "200": 0.03737447689528042, "progress_pct": 0.036808877758241106, "50": 0.03418183824875945, "without": 0.03355158070802294, "terminal": 0.03355158070802294, "discovery": 0.03355158070802294, "src": 0.032968053368229853, "to": 0.03143926585294673, "bridge": 0.03143926585294673, "feature": 0.03143926585294673, "task": 0.03036472925085888, "mcp": 0.029775414721708877, "orchestrator": 0.029775414721708877, "prepush": 0.029059101507490557, "observability": 0.028402553405608263, "in_progress": 0.02779656095571749, "automation": 0.027510201552797216, "p0": 0.025981414037514083, "latency_ms": 0.025531347786805828, "updated_by": 0.025315607832568705, "ai": 0.025315607832568705, "risks": 0.025105621635071372}, "norm": 0.4687640825539267, "snippet": "ated against policy, and exposed to command runners without drift ' budgets: latency_ms: 200 error_rate_pct: 1.0 diff_coverage_pct: 85 risks: - Partial terminal metadata causing mismatched bindings - Policy misconfiguration leaking unmanaged terminals dependencies: - task-mcp-bridge progress_pct: 50 health: yellow…", "text": "ated against policy, and exposed\n    to command runners without drift\n\n    '\n  budgets:\n    latency_ms: 200\n    error_rate_pct: 1.0\n    diff_coverage_pct: 85\n  risks:\n  - Partial terminal metadata causing mismatched bindings\n  - Policy misconfiguration leaking unmanaged terminals\n  dependencies:\n  - task-mcp-bridge\n  progress_pct: 50\n  health: yellow\n  tests_required:\n  - cargo test -p shelldone-agentd termbridge::discovery\n  - cargo test -p shelldone-agentd --test e2e_mcp_grpc\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  - docs/architecture/security-and-secrets.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T22:28:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T22:28:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 25\n- id: task-termbridge-core\n  title: TermBridge Core Orchestrator\n  type: feature\n  status: in_progress\n  priority: P0\n  size_points: 8\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - docs/architecture/termbridge.md\n  - docs/architecture/observability.md\n  - docs/architecture/security-and-secrets.md\n  - shelldone-agentd/src/app/termbridge/**\n  - shelldone-agen"}
{"id": "architecture/manifest.yaml:1412-1451", "path": "architecture/manifest.yaml", "start": 33000, "end": 34200, "start_line": 1412, "end_line": 1451, "weights": {"termbridge": 0.22345464607711382, "agentd": 0.14718011056436012, "docs": 0.13841174444978566, "architecture": 0.13026271705326983, "md": 0.12333082965045643, "shelldone": 0.11443429120779226, "runner": 0.08879671036763319, "test": 0.07964657501670454, "adapters": 0.07566030943139747, "terminals": 0.07566030943139747, "src": 0.0649138415157394, "security": 0.062843587366522, "secrets": 0.062843587366522, "cargo": 0.062843587366522, "observability": 0.05592440748081007, "invoked": 0.047541495556748095, "persist": 0.047541495556748095, "capture": 0.047541495556748095, "outcomes": 0.047541495556748095, "250": 0.047541495556748095, "90": 0.047541495556748095, "remaining": 0.047541495556748095, "still": 0.047541495556748095, "stubbed": 0.047541495556748095, "quirks": 0.047541495556748095, "65": 0.047541495556748095, "e2e_ack": 0.047541495556748095, "artifacts": 0.04613724814992855, "orchestrates": 0.044398355183816594, "wezterm": 0.044398355183816594, "spawn": 0.044398355183816594, "send_text": 0.044398355183816594, "deterministically": 0.044398355183816594, "kitty": 0.044398355183816594, "wt": 0.044398355183816594, "konsole": 0.044398355183816594, "needs": 0.044398355183816594, "cross": 0.044398355183816594, "validation": 0.044398355183816594, "windows": 0.044398355183816594, "external": 0.04216826159891907, "flows": 0.04216826159891907, "bindings": 0.04216826159891907, "command": 0.04111027655015214, "focus": 0.04043846662749108, "http": 0.04043846662749108, "through": 0.04043846662749108, "diff_coverage_pct": 0.04043846662749108, "04t03": 0.04043846662749108, "verify": 0.0395245579591379, "app": 0.03902512122598756, "persona": 0.037830154715698734, "error_rate_pct": 0.037830154715698734, "telemetry": 0.03506523266966205, "via": 0.034326394066527745, "policy": 0.03365188726815853, "runs": 0.03303140116216212, "discovery": 0.03303140116216212, "on": 0.0324569207578697, "cli": 0.029313780384938197, "are": 0.028953160108698715, "prepush": 0.028608572801948066, "10": 0.026048559725431967, "platform": 0.02581001973576721}, "norm": 0.515347457873933, "snippet": "on scope_paths: - docs/architecture/termbridge.md - docs/architecture/observability.md - docs/architecture/security-and-secrets.md - shelldone-agentd/src/app/termbridge/** - shelldone-agentd/src/adapters/termbridge/terminals/** spec: 'Given TermBridge orchestrates external terminals When wezterm spawn/focus/send_text…", "text": "on\n  scope_paths:\n  - docs/architecture/termbridge.md\n  - docs/architecture/observability.md\n  - docs/architecture/security-and-secrets.md\n  - shelldone-agentd/src/app/termbridge/**\n  - shelldone-agentd/src/adapters/termbridge/terminals/**\n  spec: 'Given TermBridge orchestrates external terminals\n\n    When wezterm spawn/focus/send_text are invoked via HTTP or persona flows\n\n    Then bindings persist, CLI runs through the command runner, and policy/telemetry\n    capture outcomes deterministically\n\n    '\n  budgets:\n    latency_ms: 250\n    error_rate_pct: 1.0\n    diff_coverage_pct: 90\n  risks:\n  - Remaining adapters (kitty/WT/Konsole) still stubbed\n  - Command runner needs cross-platform validation (Windows quirks)\n  dependencies:\n  - task-termbridge-discovery\n  progress_pct: 65\n  health: yellow\n  tests_required:\n  - cargo test -p shelldone-agentd termbridge\n  - cargo test -p shelldone-agentd --test e2e_ack\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  - docs/architecture/observability.md\n  - docs/architecture/security-and-secrets.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T03:00:00Z'\n    created_by: gpt"}
{"id": "architecture/manifest.yaml:1444-1491", "path": "architecture/manifest.yaml", "start": 34000, "end": 35200, "start_line": 1444, "end_line": 1491, "weights": {"termbridge": 0.15481014685256542, "md": 0.0996846931385268, "ci": 0.09791940129907782, "docs": 0.08949932347880876, "termbridge_matrix": 0.08612613261221565, "architecture": 0.08423002756827973, "matrix": 0.08180008640993323, "04t03": 0.0784445442849075, "tests": 0.07570286673913376, "cli": 0.05686432585950417, "observability": 0.05424247041371803, "10": 0.05053028879068757, "00z": 0.04680342918309988, "ermbridge": 0.04611167614150755, "clipboard": 0.04611167614150755, "caught": 0.04611167614150755, "300": 0.04611167614150755, "binaries": 0.04611167614150755, "headless": 0.04611167614150755, "quoting": 0.04611167614150755, "differ": 0.04611167614150755, "shells": 0.04611167614150755, "artifacts": 0.04474966173940438, "00": 0.04474966173940438, "py": 0.044433069119888105, "2025": 0.04412300465067404, "runner": 0.043063066306107824, "executes": 0.043063066306107824, "wezterm": 0.043063066306107824, "kitty": 0.043063066306107824, "wt": 0.043063066306107824, "konsole": 0.043063066306107824, "spawn": 0.043063066306107824, "send_text": 0.043063066306107824, "before": 0.043063066306107824, "unavailable": 0.043063066306107824, "windows": 0.043063066306107824, "gpt": 0.042942980358320726, "scripts": 0.042661895651371066, "deterministic": 0.04090004320496662, "85": 0.04090004320496662, "codex": 0.04082896606326525, "suite": 0.03922227214245375, "focus": 0.03922227214245375, "diff_coverage_pct": 0.03922227214245375, "across": 0.03922227214245375, "verify": 0.03833584944908864, "regressions": 0.03785143336956688, "error_rate_pct": 0.03669240570169276, "dry": 0.03669240570169276, "may": 0.03568841026842567, "progress_pct": 0.035148326881929474, "50": 0.03263980043302594, "terminal": 0.0320379755633001, "ops": 0.030962029370513084, "security": 0.030476777331884728, "secrets": 0.030476777331884728, "task": 0.028994891841045693, "release": 0.02879900626937187, "core": 0.02879900626937187, "are": 0.02808238837610627, "hardening": 0.027748164597378198, "prepush": 0.027748164597378198, "test": 0.02575039643397214}, "norm": 0.41988624505180244, "snippet": "ermbridge.md - docs/architecture/observability.md - docs/architecture/security-and-secrets.md artifacts: - artifacts/verify/ audit: created_at: '2025-10-04T03:00:00Z' created_by: gpt-5-codex updated_at: '2025-10-04T03:00:00Z' updated_by: gpt-5-codex metrics: progress_pct: 50 - id: task-termbridge-test-suite title:…", "text": "ermbridge.md\n  - docs/architecture/observability.md\n  - docs/architecture/security-and-secrets.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 50\n- id: task-termbridge-test-suite\n  title: TermBridge CLI Matrix\n  type: ops\n  status: planned\n  priority: P0\n  size_points: 5\n  parent_epic: epic-qa-hardening\n  scope_paths:\n  - scripts/tests/termbridge_matrix.py\n  - ci/**\n  spec: 'Given a deterministic command runner\n\n    When CI executes termbridge matrix (wezterm, kitty, WT, Konsole)\n\n    Then spawn/focus/send_text/clipboard regressions are caught before release\n\n    '\n  budgets:\n    latency_ms: 300\n    error_rate_pct: 0.5\n    diff_coverage_pct: 85\n  risks:\n  - Terminal binaries unavailable in headless CI\n  - Windows CLI quoting may differ across shells\n  dependencies:\n  - task-termbridge-core\n  progress_pct: 5\n  health: yellow\n  tests_required:\n  - scripts/tests/termbridge_matrix.py --dry-run\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  - docs/architecture/observability.md\n "}
{"id": "architecture/manifest.yaml:1484-1529", "path": "architecture/manifest.yaml", "start": 35000, "end": 36200, "start_line": 1484, "end_line": 1529, "weights": {"termbridge": 0.28508883966541665, "registry": 0.17397750055332328, "agentd": 0.1095359669007834, "docs": 0.0915646924821659, "architecture": 0.08617379743524003, "shelldone": 0.0851655205719531, "md": 0.08158808730722503, "04t03": 0.0802548029991746, "adapters": 0.07507830705115595, "terminals": 0.07507830705115595, "rs": 0.07121193123144971, "artifacts": 0.06867351936162443, "discovery": 0.06555462692182945, "src": 0.06441450427331064, "verify": 0.05883078434687065, "mcp": 0.05817657953318504, "prepush": 0.0567770137146354, "10": 0.05169637237816498, "make": 0.0478835083180945, "00z": 0.0478835083180945, "tests_required": 0.04751277675533973, "verify_commands": 0.04751277675533973, "advertised": 0.04717579174477311, "docs_updates": 0.047150769102875204, "00": 0.04578234624108295, "2025": 0.04514122783492037, "task": 0.04449600709452782, "termbridge_matrix": 0.04405682937471032, "service": 0.04405682937471032, "validated": 0.04405682937471032, "gpt": 0.04393397221274352, "become": 0.04184389035585046, "codex": 0.041771172972417524, "mod": 0.0401274014995873, "60": 0.0401274014995873, "tests": 0.03872492798578766, "ids": 0.03872492798578766, "dry": 0.037539153525577976, "progress_pct": 0.035959442117666315, "telemetry": 0.03479550011066466, "available": 0.034062344881400614, "policies": 0.033393026596865, "runs": 0.032777313460914725, "cargo": 0.03118008757800515, "feature": 0.03071374433326334, "bridge": 0.03071374433326334, "observability": 0.027747109865478844, "in_progress": 0.027155101856739396, "automation": 0.026875350747732667, "sync": 0.026344636351679194, "test": 0.026344636351679194, "p0": 0.025381842944340684, "big_task": 0.025381842944340684, "updated_by": 0.024731401497970967, "ai": 0.024731401497970967, "when": 0.024731401497970967, "given": 0.024526261135800496, "created_at": 0.02432644970192926, "created_by": 0.02432644970192926, "spec": 0.02394175415904725, "scope_paths": 0.0233985421035553, "parent_epic": 0.023225673981616388, "audit": 0.023056605468395042, "py": 0.02272922381901969}, "norm": 0.5103325279011496, "snippet": "tests_required: - scripts/tests/termbridge_matrix.py --dry-run verify_commands: - make verify-prepush docs_updates: - docs/architecture/termbridge.md - docs/architecture/observability.md artifacts: - artifacts/verify/ audit: created_at: '2025-10-04T03:00:00Z' created_by: gpt-5-codex updated_at: '2025-10-04T03:00:00Z'…", "text": "tests_required:\n  - scripts/tests/termbridge_matrix.py --dry-run\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  - docs/architecture/observability.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T03:00:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T03:00:00Z'\n    updated_by: gpt-5-codex\n  metrics:\n    progress_pct: 0\ntasks:\n- id: task-termbridge-discovery-registry\n  title: TermBridge Registry Service\n  type: feature\n  status: in_progress\n  priority: P0\n  size_points: 5\n  big_task: task-termbridge-discovery\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - shelldone-agentd/src/adapters/termbridge/registry.rs\n  - shelldone-agentd/src/adapters/termbridge/mod.rs\n  - docs/architecture/termbridge.md\n  spec: 'Given MCP advertised terminals\n\n    When registry sync runs\n\n    Then terminals become available with validated policies and telemetry IDs'\n  dependencies:\n  - task-mcp-bridge\n  progress_pct: 60\n  health: yellow\n  tests_required:\n  - cargo test -p shelldone-agentd termbridge::registry\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  artifacts:\n  "}
{"id": "architecture/manifest.yaml:1521-1566", "path": "architecture/manifest.yaml", "start": 36000, "end": 37200, "start_line": 1521, "end_line": 1566, "weights": {"termbridge": 0.28291258898094784, "agentd": 0.14493308597559126, "mcp": 0.11546496701242831, "shelldone": 0.11268720279240613, "discovery": 0.09758131488363925, "artifacts": 0.09086572536398142, "45": 0.08304894269100091, "04t22": 0.07964217091521143, "test": 0.07843059677217469, "verify": 0.07784225918669907, "adapters": 0.0745051902034372, "terminals": 0.0745051902034372, "registry": 0.06905977121200618, "src": 0.06392279050023192, "cargo": 0.06188414328459037, "prepush": 0.056343601396203064, "sync": 0.05228706451478313, "10": 0.0513017435813851, "make": 0.04751798535383423, "00z": 0.04751798535383423, "tests_required": 0.047150083803008884, "verify_commands": 0.047150083803008884, "unregister": 0.04681567119710309, "restarting": 0.04681567119710309, "docs_updates": 0.046790839567738746, "audit": 0.04576120169299779, "docs": 0.04543286268199071, "2025": 0.04479663830946296, "task": 0.04415634291823371, "receives": 0.043720517700094205, "delta": 0.043720517700094205, "register": 0.043720517700094205, "gpt": 0.04359859837905845, "architecture": 0.04275799109382139, "planned": 0.04275799109382139, "watcher": 0.041524471345500455, "e2e_mcp_grpc": 0.041524471345500455, "codex": 0.04145230905659754, "md": 0.04048263874022615, "capabilities": 0.039821085457605716, "health": 0.03871054452262685, "grpc": 0.038429317848491566, "mux": 0.038429317848491566, "updates": 0.0372525951017186, "rs": 0.03533416435148268, "new": 0.03452988560600309, "without": 0.03252710496121308, "plane": 0.0314347321089942, "feature": 0.030479288269650642, "control": 0.03004296449988004, "core": 0.02923868575440045, "automation": 0.02667019539851333, "p1": 0.026402322728198292, "platform": 0.02541597363293107, "system": 0.025188088418048007, "big_task": 0.025188088418048007, "updated_by": 0.024542612173558975, "ai": 0.024542612173558975, "when": 0.024542612173558975, "given": 0.024339037768351633, "created_at": 0.024140751612601555, "created_by": 0.024140751612601555, "spec": 0.023758992676917116, "scope_paths": 0.02321992727833732}, "norm": 0.5166921212059808, "snippet": "health: yellow tests_required: - cargo test -p shelldone-agentd termbridge::registry verify_commands: - make verify-prepush docs_updates: - docs/architecture/termbridge.md artifacts: - artifacts/verify/ audit: created_at: '2025-10-04T22:45:00Z' created_by: gpt-5-codex updated_at: '2025-10-04T22:45:00Z' updated_by:…", "text": " health: yellow\n  tests_required:\n  - cargo test -p shelldone-agentd termbridge::registry\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T22:45:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T22:45:00Z'\n    updated_by: gpt-5-codex\n  owner: platform-core\n  system: control-plane\n- id: task-termbridge-discovery-mcp-sync\n  title: TermBridge MCP Sync Watcher\n  type: feature\n  status: planned\n  priority: P1\n  size_points: 5\n  big_task: task-termbridge-discovery\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - shelldone-agentd/src/adapters/mcp/grpc.rs\n  - shelldone-agentd/src/adapters/termbridge/terminals/**\n  spec: 'Given MCP capabilities updates\n\n    When TermBridge receives a delta\n\n    Then new terminals register/unregister without restarting the mux'\n  dependencies:\n  - task-termbridge-discovery-registry\n  progress_pct: 0\n  health: planned\n  tests_required:\n  - cargo test -p shelldone-agentd --test e2e_mcp_grpc\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n  "}
{"id": "architecture/manifest.yaml:1557-1602", "path": "architecture/manifest.yaml", "start": 37000, "end": 38200, "start_line": 1557, "end_line": 1602, "weights": {"termbridge": 0.24769623496410467, "telemetry": 0.20406383523547691, "45": 0.12270012961489984, "04t22": 0.11766681642736126, "agentd": 0.107065230805277, "artifacts": 0.08949932347880876, "core": 0.08639701880811561, "shelldone": 0.0832444937921346, "test": 0.07725118930191642, "10": 0.07579543318603137, "00z": 0.07020514377464983, "docs": 0.06712449260910656, "2025": 0.06618450697601107, "architecture": 0.06317252067620979, "cargo": 0.060953554663769456, "md": 0.059810815883116084, "verify": 0.057503774173632956, "prepush": 0.055496329194756396, "observability": 0.05424247041371803, "created_at": 0.04755546558271885, "make": 0.04680342918309988, "verify_commands": 0.046441059986422284, "traffic": 0.04611167614150755, "span": 0.04611167614150755, "tenant": 0.04611167614150755, "docs_updates": 0.046087217920103576, "audit": 0.04507306332167451, "task": 0.04349233776156854, "ed": 0.043063066306107824, "emits": 0.043063066306107824, "gpt": 0.042942980358320726, "e2e_mcp_grpc": 0.04090004320496662, "execution": 0.04090004320496662, "flows": 0.04090004320496662, "labels": 0.04090004320496662, "codex": 0.04082896606326525, "through": 0.03922227214245375, "app": 0.03785143336956688, "mux": 0.03785143336956688, "40": 0.03568841026842567, "rs": 0.034802823534167145, "registry": 0.03401063920591282, "terminal": 0.0320379755633001, "discovery": 0.0320379755633001, "integration": 0.031480772765151814, "src": 0.031480772765151814, "plane": 0.030962029370513084, "ops": 0.030962029370513084, "control": 0.029591190597626205, "in_progress": 0.026542580762226473, "automation": 0.026269139828610875, "p1": 0.0260052953187517, "platform": 0.02503377854070654, "system": 0.024809320171160065, "big_task": 0.024809320171160065, "updated_by": 0.024173550336362596, "ai": 0.024173550336362596, "when": 0.024173550336362596, "given": 0.023973037200406496, "created_by": 0.023777732791359425, "spec": 0.02340171459154994, "tests_required": 0.023220529993211142, "scope_paths": 0.022870755439565328, "parent_epic": 0.02270178659857241}, "norm": 0.5183335532366795, "snippet": "ed: - cargo test -p shelldone-agentd --test e2e_mcp_grpc verify_commands: - make verify-prepush docs_updates: - docs/architecture/termbridge.md artifacts: - artifacts/verify/ audit: created_at: '2025-10-04T22:45:00Z' created_by: gpt-5-codex updated_at: '2025-10-04T22:45:00Z' updated_by: gpt-5-codex owner: platform-…", "text": "ed:\n  - cargo test -p shelldone-agentd --test e2e_mcp_grpc\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/termbridge.md\n  artifacts:\n  - artifacts/verify/\n  audit:\n    created_at: '2025-10-04T22:45:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T22:45:00Z'\n    updated_by: gpt-5-codex\n  owner: platform-core\n  system: control-plane\n- id: task-termbridge-core-telemetry\n  title: TermBridge Telemetry Integration\n  type: ops\n  status: in_progress\n  priority: P1\n  size_points: 5\n  big_task: task-termbridge-core\n  parent_epic: epic-ai-automation\n  scope_paths:\n  - shelldone-agentd/src/app/termbridge/telemetry.rs\n  - docs/architecture/observability.md\n  spec: 'Given TermBridge command execution\n\n    When traffic flows through mux\n\n    Then telemetry emits span + metrics with tenant/terminal labels'\n  dependencies:\n  - task-termbridge-discovery-registry\n  progress_pct: 40\n  health: yellow\n  tests_required:\n  - cargo test -p shelldone-agentd termbridge::telemetry\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/observability.md\n  artifacts:\n  - artifacts/telemetry/\n  audit:\n    created_at: '2025-10-04T22:45:00Z'\n  "}
{"id": "architecture/manifest.yaml:1593-1607", "path": "architecture/manifest.yaml", "start": 38000, "end": 38346, "start_line": 1593, "end_line": 1607, "weights": {"45": 0.2789592690390031, "04t22": 0.26751600999724867, "telemetry": 0.23197000073776436, "observability": 0.1849807324365256, "10": 0.17232124126054993, "00z": 0.15961169439364833, "ge": 0.1572526391492437, "artifacts": 0.15260782080360982, "2025": 0.15047075944973456, "gpt": 0.14644657404247838, "guild": 0.13947963451950154, "codex": 0.13923724324139175, "plane": 0.10558845913533949, "control": 0.10091354742267399, "prepush": 0.09462835619105898, "system": 0.08460614314780228, "updated_by": 0.08243800499323654, "created_at": 0.08108816567309753, "created_by": 0.08108816567309753, "make": 0.07980584719682417, "verify_commands": 0.07918796125889953, "docs_updates": 0.07858461517145866, "audit": 0.0768553515613168, "owner": 0.0768553515613168, "docs": 0.07630391040180491, "architecture": 0.07181149786270002, "updated_at": 0.07047340162755719, "md": 0.06799007275602084, "verify": 0.0653675381631896}, "norm": 0.7323868452449374, "snippet": "ge::telemetry verify_commands: - make verify-prepush docs_updates: - docs/architecture/observability.md artifacts: - artifacts/telemetry/ audit: created_at: '2025-10-04T22:45:00Z' created_by: gpt-5-codex updated_at: '2025-10-04T22:45:00Z' updated_by: gpt-5-codex owner: observability-guild system: control-plane", "text": "ge::telemetry\n  verify_commands:\n  - make verify-prepush\n  docs_updates:\n  - docs/architecture/observability.md\n  artifacts:\n  - artifacts/telemetry/\n  audit:\n    created_at: '2025-10-04T22:45:00Z'\n    created_by: gpt-5-codex\n    updated_at: '2025-10-04T22:45:00Z'\n    updated_by: gpt-5-codex\n  owner: observability-guild\n  system: control-plane\n"}
{"id": "data/tasks.board.json:1-48", "path": "data/tasks.board.json", "start": 0, "end": 1200, "start_line": 1, "end_line": 48, "weights": {"qa": 0.26484599797042946, "probes": 0.17783734755498917, "orchestrator": 0.17188534862077398, "null": 0.13155338521164203, "task": 0.10955456292213288, "epic": 0.10675742240464746, "perf": 0.09074515371191441, "unassigned": 0.08488540122777578, "hardening": 0.08387513389662048, "roadmap_phase": 0.08198009732982385, "failure_criteria": 0.08023098275854822, "success_criteria": 0.07940444539102834, "comments": 0.07783642558450671, "blockers": 0.07709120233852965, "big_task": 0.07499180869918838, "system": 0.07499180869918838, "conflicts": 0.0743330010429781, "33": 0.06969151053205119, "owner": 0.06812178888389445, "00": 0.0676330114925089, "04t23": 0.06508395248536751, "25": 0.05927911585166307, "metrics": 0.059238463686462364, "verify": 0.057939408826463513, "priority": 0.05612025637933769, "dependencies": 0.055830733066214284, "size_points": 0.055262521652454814, "progress_pct": 0.05312190312837069, "performance": 0.05140244334530006, "title": 0.050023347593094986, "id": 0.04729699952311819, "green": 0.04679488529861637, "100": 0.043525770838937036, "version": 0.040990048664911925, "done": 0.040990048664911925, "status": 0.03964990323627244, "p1": 0.03930345769765882, "10": 0.03818482050659914, "p0": 0.03749590434959419, "make": 0.03536850046222889, "2025": 0.033342952378066185, "planned": 0.03182555018915115, "updated_at": 0.031232530266758304, "tasks": 0.030668928662901804, "health": 0.028812962116273398}, "norm": 0.5572175713738238, "snippet": "{ \"version\": \"0.1.0\", \"updated_at\": \"2025-10-04T23:25:33+00:00\", \"tasks\": [ { \"id\": \"task-qa-orchestrator\", \"title\": \"make verify Orchestrator\", \"epic\": \"epic-qa-hardening\", \"status\": \"done\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [],…", "text": "{\n  \"version\": \"0.1.0\",\n  \"updated_at\": \"2025-10-04T23:25:33+00:00\",\n  \"tasks\": [\n    {\n      \"id\": \"task-qa-orchestrator\",\n      \"title\": \"make verify Orchestrator\",\n      \"epic\": \"epic-qa-hardening\",\n      \"status\": \"done\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-qa-orchestrator\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 100,\n        \"health\": \"green\"\n      }\n    },\n    {\n      \"id\": \"task-qa-perf-probes\",\n      \"title\": \"Performance Probes for verify\",\n      \"epic\": \"epic-qa-hardening\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-qa-perf-probes\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n     "}
{"id": "data/tasks.board.json:40-88", "path": "data/tasks.board.json", "start": 1000, "end": 2200, "start_line": 40, "end_line": 88, "weights": {"qa": 0.23502300324098613, "marker": 0.17223846911735777, "null": 0.13619644586617058, "task": 0.1361054334656145, "plugin": 0.12731026879454999, "baseline": 0.12274263988109058, "epic": 0.11052533143069383, "orchestrator": 0.08897594516840064, "unassigned": 0.08788135656522669, "roadmap_phase": 0.08487351252969999, "failure_criteria": 0.08306266450296755, "success_criteria": 0.08220695522835875, "comments": 0.08058359354631282, "blockers": 0.07981206830341891, "big_task": 0.07763857841798326, "system": 0.07763857841798326, "p0": 0.07763857841798326, "icts": 0.07215121090377064, "owner": 0.07052608731509072, "forbidden": 0.06738103316132166, "specification": 0.06738103316132166, "probes": 0.06137131994054529, "conflict": 0.06137131994054529, "metrics": 0.06132923299304338, "sdk": 0.06098573183019272, "health": 0.0596597803819308, "priority": 0.05810097131037313, "dependencies": 0.057801229527374785, "size_points": 0.05721296359312968, "progress_pct": 0.054996793827019066, "title": 0.05178887750814539, "id": 0.048966305388640004, "green": 0.04844646948562636, "perf": 0.046973961921461575, "control": 0.04630150999393277, "100": 0.0450619745156054, "hardening": 0.043417716370015305, "done": 0.042436756264849995, "status": 0.04104931158578794, "platform": 0.039170500540164355, "conflicts": 0.03847825936342396, "yellow": 0.03316078731938799, "planned": 0.03294880490170943}, "norm": 0.5551033830983336, "snippet": "icts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-qa-perf-probes\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-qa-marker-baseline\", \"title\": \"Forbidden Marker Control\", \"epic\": \"epic-qa-hardening\", \"status\": \"done\", \"priority\": \"P0\",…", "text": "icts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-qa-perf-probes\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-qa-marker-baseline\",\n      \"title\": \"Forbidden Marker Control\",\n      \"epic\": \"epic-qa-hardening\",\n      \"status\": \"done\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-qa-marker-baseline\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 100,\n        \"health\": \"green\"\n      }\n    },\n    {\n      \"id\": \"task-plugin-sdk\",\n      \"title\": \"Plugin SDK and Specification\",\n      \"epic\": \"epic-plugin-platform\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflict"}
{"id": "data/tasks.board.json:80-129", "path": "data/tasks.board.json", "start": 2000, "end": 3200, "start_line": 80, "end_line": 129, "weights": {"plugin": 0.2172966435248343, "null": 0.13947828793523492, "task": 0.13938508246478593, "epic": 0.11318859242902381, "examples": 0.10899795215388929, "bridge": 0.09621172923672854, "mcp": 0.09111994384715728, "unassigned": 0.08999897961499119, "roadmap_phase": 0.08691865740993372, "failure_criteria": 0.08506417449099088, "success_criteria": 0.08418784571578908, "p1": 0.08334227174443316, "comments": 0.0825253668847782, "blockers": 0.081735250672176, "big_task": 0.0795093875364889, "system": 0.0795093875364889, "conflicts": 0.07881089267207317, "owner": 0.07222551110581579, "reference": 0.06900467251460651, "ow": 0.06900467251460651, "yellow": 0.06791968487103565, "metrics": 0.06280704583624926, "sdk": 0.06245526753694436, "health": 0.06109736545137492, "13": 0.06065350166448669, "themes": 0.06065350166448669, "grpc": 0.06065350166448669, "priority": 0.059500994715442374, "dependencies": 0.059194030238877794, "size_points": 0.058591589221879806, "progress_pct": 0.05632201777465808, "title": 0.053036802267377815, "id": 0.05014621636186025, "plugins": 0.048836281748682764, "orchestrator": 0.04555997192357864, "in_progress": 0.04253208724549544, "automation": 0.04209392285789454, "status": 0.0420384516239997, "qa": 0.040114368023059885, "platform": 0.040114368023059885, "p0": 0.03975469376824445, "ai": 0.03873593005706296, "planned": 0.03374275200777471}, "norm": 0.5251791405637911, "snippet": "y\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-qa-orchestrator\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 13, \"big_task\": \"task-plugin-sdk\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } },…", "text": "y\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 13,\n      \"big_task\": \"task-plugin-sdk\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-plugin-examples\",\n      \"title\": \"Reference Plugins and Themes\",\n      \"epic\": \"epic-plugin-platform\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-plugin-sdk\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-plugin-examples\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-mcp-bridge\",\n      \"title\": \"MCP/gRPC Bridge\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P1\",\n      \"ow"}
{"id": "data/tasks.board.json:120-171", "path": "data/tasks.board.json", "start": 3000, "end": 4200, "start_line": 120, "end_line": 171, "weights": {"bridge": 0.19242345847345707, "mcp": 0.18223988769431457, "policy": 0.1569069924431006, "null": 0.13947828793523492, "task": 0.13938508246478593, "epic": 0.11318859242902381, "yellow": 0.10187952730655347, "agent": 0.09019036507569105, "unassigned": 0.08999897961499119, "roadmap_phase": 0.08691865740993372, "failure_criteria": 0.08506417449099088, "automation": 0.08418784571578908, "success_criteria": 0.08418784571578908, "p1": 0.08334227174443316, "comments": 0.0825253668847782, "blockers": 0.081735250672176, "big_task": 0.0795093875364889, "system": 0.0795093875364889, "conflicts": 0.07881089267207317, "ai": 0.07747186011412592, "th": 0.07388979429904223, "owner": 0.07222551110581579, "metrics": 0.06280704583624926, "health": 0.06109736545137492, "grpc": 0.06065350166448669, "priority": 0.059500994715442374, "dependencies": 0.059194030238877794, "size_points": 0.058591589221879806, "documentation": 0.05718745259880258, "progress_pct": 0.05632201777465808, "title": 0.053036802267377815, "50": 0.052302330814366874, "id": 0.05014621636186025, "orchestrator": 0.04555997192357864, "in_progress": 0.04253208724549544, "status": 0.0420384516239997, "qa": 0.040114368023059885, "planned": 0.03374275200777471}, "norm": 0.5503093270434944, "snippet": "th\": \"yellow\" } }, { \"id\": \"task-mcp-bridge\", \"title\": \"MCP/gRPC Bridge\", \"epic\": \"epic-ai-automation\", \"status\": \"in_progress\", \"priority\": \"P1\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-qa-orchestrator\" ], \"conflicts\": [], \"comments\": [],…", "text": "th\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-mcp-bridge\",\n      \"title\": \"MCP/gRPC Bridge\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-mcp-bridge\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 50,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-agent-policy\",\n      \"title\": \"Agent Policy Documentation\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-agent-policy\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n"}
{"id": "data/tasks.board.json:162-210", "path": "data/tasks.board.json", "start": 4000, "end": 5200, "start_line": 162, "end_line": 210, "weights": {"animation": 0.38267572644536485, "core": 0.18914902883093623, "null": 0.1429221962793148, "task": 0.14282668943922508, "toolkit": 0.12430223797907149, "epic": 0.11598337248899969, "engine": 0.10167777546366025, "unassigned": 0.09222117664252183, "roadmap_phase": 0.08906479709906788, "failure_criteria": 0.08716452447842274, "success_criteria": 0.0862665579556851, "comments": 0.08456303026464926, "blockers": 0.08375340500976058, "big_task": 0.08147258229047626, "system": 0.08147258229047626, "conflicts": 0.08075684063928484, "owner": 0.07400885705904581, "effect": 0.07070849158904124, "authoring": 0.07070849158904124, "yellow": 0.0695967141271106, "planned": 0.0691518127566741, "render": 0.06715686106494519, "loop": 0.06715686106494519, "metrics": 0.06435783709146528, "health": 0.06260594237610022, "priority": 0.06097015507878662, "dependencies": 0.06065561123243033, "size_points": 0.06003829512859288, "progress_pct": 0.05771268488020519, "title": 0.0543463529406464, "policy": 0.05359374639003024, "p2": 0.05359374639003024, "id": 0.05138439454363457, "plugin": 0.04453239854953394, "status": 0.04307643808385153, "p1": 0.042700052807333036, "sdk": 0.03199868645411346, "agent": 0.030805762556717516}, "norm": 0.63499177623117, "snippet": "\"size_points\": 5, \"big_task\": \"task-agent-policy\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-animation-core\", \"title\": \"Render Loop and Animation Core\", \"epic\": \"epic-animation-engine\", \"status\": \"planned\", \"priority\": \"P1\", \"owner\": \"unassigned\",…", "text": "    \"size_points\": 5,\n      \"big_task\": \"task-agent-policy\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-animation-core\",\n      \"title\": \"Render Loop and Animation Core\",\n      \"epic\": \"epic-animation-engine\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-plugin-sdk\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-animation-core\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-animation-toolkit\",\n      \"title\": \"Effect Authoring Toolkit\",\n      \"epic\": \"epic-animation-engine\",\n      \"status\": \"planned\",\n      \"priority\": \"P2\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-animation-core\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n     "}
{"id": "data/tasks.board.json:201-249", "path": "data/tasks.board.json", "start": 5000, "end": 6200, "start_line": 201, "end_line": 249, "weights": {"ide": 0.2128665889123014, "manager": 0.16752559643649226, "task": 0.15878967237655026, "null": 0.13619644586617058, "file": 0.12207191567272857, "epic": 0.11052533143069383, "animation": 0.10419070199016657, "roadmap_phase": 0.08487351252969999, "failure_criteria": 0.08306266450296755, "success_criteria": 0.08220695522835875, "comments": 0.08058359354631282, "blockers": 0.07981206830341891, "big_task": 0.07763857841798326, "system": 0.07763857841798326, "conflicts": 0.07695651872684792, "state": 0.07381460360627091, "ed": 0.06738103316132166, "yellow": 0.06632157463877598, "planned": 0.06589760980341886, "persistent": 0.06137131994054529, "recovery": 0.06137131994054529, "metrics": 0.06132923299304338, "health": 0.0596597803819308, "toolkit": 0.05922636044885171, "priority": 0.05810097131037313, "dependencies": 0.057801229527374785, "size_points": 0.05721296359312968, "dx": 0.05584186547883075, "progress_pct": 0.054996793827019066, "ux": 0.05321664722807535, "examples": 0.05321664722807535, "persistence": 0.052095350995083285, "title": 0.05178887750814539, "p2": 0.051071687736381766, "resilience": 0.049258150326649305, "id": 0.048966305388640004, "bridge": 0.046973961921461575, "core": 0.0450619745156054, "mcp": 0.04448797258420032, "unassigned": 0.043940678282613346, "plugin": 0.042436756264849995, "status": 0.04104931158578794, "platform": 0.039170500540164355, "p0": 0.03881928920899163, "owner": 0.03526304365754536}, "norm": 0.5426328045360279, "snippet": "ed\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-animation-core\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-animation-toolkit\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-ide-file-…", "text": "ed\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-animation-core\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-animation-toolkit\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-ide-file-manager\",\n      \"title\": \"File Manager and IDE UX\",\n      \"epic\": \"epic-ide-dx\",\n      \"status\": \"planned\",\n      \"priority\": \"P2\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-plugin-examples\",\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-ide-file-manager\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-state-persistence\",\n      \"title\": \"Persistent State & Recovery\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0"}
{"id": "data/tasks.board.json:241-288", "path": "data/tasks.board.json", "start": 6000, "end": 7200, "start_line": 241, "end_line": 288, "weights": {"task": 0.18811320072483306, "persistence": 0.16200383541153948, "state": 0.15303027576909825, "hardening": 0.13501850822382808, "epic": 0.11456894111718263, "null": 0.10588443199961431, "resilience": 0.10212055555524857, "security": 0.09886369232050413, "unassigned": 0.09109652814688132, "failure_criteria": 0.08610154247258833, "success_criteria": 0.08521452676110358, "comments": 0.08353177379800719, "blockers": 0.08273202202183669, "platform": 0.0812071352661944, "p0": 0.08047901421376315, "big_task": 0.08047901421376315, "system": 0.08047901421376315, "conflicts": 0.07977200111929357, "owner": 0.07310631002174038, "low": 0.0698461929111261, "model": 0.0698461929111261, "planned": 0.06830849796695856, "persistent": 0.06361661213349207, "recovery": 0.06361661213349207, "priority": 0.06022661660221606, "dependencies": 0.059915908656425085, "size_points": 0.059306120797756386, "sandbox": 0.05400127847051316, "title": 0.0536835925389312, "id": 0.05075775558578537, "secrets": 0.04943184616025206, "bridge": 0.048692521503954075, "release": 0.046710583339347064, "orchestrator": 0.046115581337280824, "mcp": 0.046115581337280824, "roadmap_phase": 0.043989320518442065, "roadmap": 0.043989320518442065, "status": 0.04255111566819481, "qa": 0.0406035676330972, "yellow": 0.03437398685546317, "metrics": 0.03178649270980907, "health": 0.030921227636976332, "progress_pct": 0.028504435824979395}, "norm": 0.535270833598225, "snippet": "low\" } }, { \"id\": \"task-state-persistence\", \"title\": \"Persistent State & Recovery\", \"epic\": \"epic-platform-resilience\", \"status\": \"planned\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-qa-orchestrator\", \"task-release-hardening\" ],…", "text": "low\"\n      }\n    },\n    {\n      \"id\": \"task-state-persistence\",\n      \"title\": \"Persistent State & Recovery\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\",\n        \"task-release-hardening\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-state-persistence\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-security-hardening\",\n      \"title\": \"Secrets Model and Sandbox\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-state-persistence\",\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-security-hardening\",\n      \"system\": null,\n      \"roadmap"}
{"id": "data/tasks.board.json:280-327", "path": "data/tasks.board.json", "start": 7000, "end": 8200, "start_line": 280, "end_line": 327, "weights": {"pipeline": 0.14740105550179783, "null": 0.14654047972942402, "task": 0.14644255499464853, "observability": 0.13697940313337656, "epic": 0.11891966040011362, "resilience": 0.10599855133582763, "release": 0.09696880591965719, "unassigned": 0.0945558899752439, "hardening": 0.09343052889750128, "roadmap_phase": 0.0913196020889177, "failure_criteria": 0.0893712213006613, "success_criteria": 0.08845052144823409, "comments": 0.08670386647388088, "platform": 0.0842909505294676, "big_task": 0.08353517931048832, "system": 0.08353517931048832, "p0": 0.08353517931048832, "conflicts": 0.0828013176174946, "bloc": 0.07763104970658867, "owner": 0.07588249900990773, "yellow": 0.07135865625691087, "planned": 0.07090249156064053, "stack": 0.0688570347627919, "migrations": 0.0688570347627919, "metrics": 0.06598714942289478, "health": 0.06419090294258377, "priority": 0.06251370330862932, "size_points": 0.061558251967291436, "progress_pct": 0.059173765510083805, "persistence": 0.056051959931418725, "title": 0.055722209977118464, "id": 0.05268526529157469, "security": 0.05130900487519834, "bridge": 0.05054160459904094, "mcp": 0.04786680594502566, "orchestrator": 0.04786680594502566, "status": 0.04416698082015157, "blockers": 0.04293687218854815, "qa": 0.0421454752647338, "dependencies": 0.031095598163461118}, "norm": 0.5280277160378909, "snippet": "-persistence\", \"task-mcp-bridge\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-security-hardening\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-observability-pipeline\", \"title\": \"Observability Stack\", \"epic\": \"epic-platform-…", "text": "-persistence\",\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-security-hardening\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-observability-pipeline\",\n      \"title\": \"Observability Stack\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-observability-pipeline\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-release-hardening\",\n      \"title\": \"Release Pipeline & Migrations\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"bloc"}
{"id": "data/tasks.board.json:320-368", "path": "data/tasks.board.json", "start": 8000, "end": 9200, "start_line": 320, "end_line": 368, "weights": {"security": 0.1520029269427751, "null": 0.14470872373280624, "task": 0.1446120230572154, "gov": 0.135992643656514, "epic": 0.1174331646451122, "agent": 0.09357250376602945, "unassigned": 0.09337394135055337, "hardening": 0.09226264728628253, "observability": 0.09017810706280624, "roadmap_phase": 0.09017810706280624, "failure_criteria": 0.08825408103440303, "success_criteria": 0.08734488993013118, "comments": 0.08562006814295738, "blockers": 0.08480032257238261, "p0": 0.08249098956910722, "big_task": 0.08249098956910722, "system": 0.08249098956910722, "conflicts": 0.08176630114727591, "ions": 0.0766606615852563, "owner": 0.07493396777228388, "yellow": 0.0704666730536995, "planned": 0.07001621041613253, "access": 0.06520702743682937, "metrics": 0.0651623100551086, "health": 0.06338851665580147, "priority": 0.06173228201727146, "dependencies": 0.061413806372835715, "size_points": 0.060788773817700294, "progress_pct": 0.05843409344120776, "title": 0.05502568235240449, "policies": 0.05426366821990563, "resilience": 0.05233678472206489, "id": 0.05202669947543001, "pipeline": 0.048519514102675125, "release": 0.047878347922830744, "automation": 0.04367244496506559, "status": 0.043614893559899684, "platform": 0.04161865682392463, "reports": 0.04161865682392463, "ai": 0.04018852743420282}, "norm": 0.5196687027269479, "snippet": "ions\", \"epic\": \"epic-platform-resilience\", \"status\": \"planned\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-observability-pipeline\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-release-hardening\", \"system\":…", "text": "ions\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-observability-pipeline\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-release-hardening\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-security-agent-gov\",\n      \"title\": \"Agent Access Policies\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-security-hardening\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-security-agent-gov\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-observability-reports\",\n      \"title\": "}
{"id": "data/tasks.board.json:359-406", "path": "data/tasks.board.json", "start": 9000, "end": 10200, "start_line": 359, "end_line": 406, "weights": {"observability": 0.28856994260097996, "null": 0.15435597198165998, "task": 0.12854402049530259, "epic": 0.12526204228811968, "pipeline": 0.1035082967523736, "unassigned": 0.09959887077392358, "roadmap_phase": 0.09618998086699332, "plugin": 0.09618998086699332, "failure_criteria": 0.09413768643669657, "success_criteria": 0.09316788259213991, "p1": 0.09223211406383937, "comments": 0.0913280726858212, "blockers": 0.09045367741054144, "reports": 0.08878646789103921, "system": 0.08799038887371437, "conflicts": 0.08721738789042764, "owner": 0.07992956562376947, "yellow": 0.07516445125727947, "planned": 0.07468395777720803, "visualisation": 0.0725294099501408, "reporting": 0.06955416259928467, "metrics": 0.06950646405878251, "health": 0.06761441776618825, "priority": 0.06584776748508955, "dependencies": 0.06550806013102477, "visual": 0.06506786611100182, "size_points": 0.06484135873888032, "progress_pct": 0.06232969967062161, "performance": 0.06031220019181874, "animation": 0.05904139779442773, "title": 0.058694061175898114, "id": 0.055495146107125345, "engine": 0.05490599875037654, "status": 0.04652255313055966, "platform": 0.044393233945519604, "big_task": 0.043995194436857184}, "norm": 0.5701372750624983, "snippet": "\"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-observability-reports\", \"title\": \"Plugin Observability Reporting\", \"epic\": \"epic-plugin-platform\", \"status\": \"planned\", \"priority\": \"P1\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [],…", "text": "    \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-observability-reports\",\n      \"title\": \"Plugin Observability Reporting\",\n      \"epic\": \"epic-plugin-platform\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-observability-pipeline\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-observability-reports\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-observability-visual\",\n      \"title\": \"Performance Visualisation\",\n      \"epic\": \"epic-animation-engine\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-observability-pipeline\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \""}
{"id": "data/tasks.board.json:397-446", "path": "data/tasks.board.json", "start": 10000, "end": 11200, "start_line": 397, "end_line": 446, "weights": {"ui": 0.1841795355421608, "state": 0.15303027576909825, "null": 0.14117924266615242, "task": 0.14108490054362477, "sync": 0.1252976606970108, "epic": 0.11456894111718263, "utif": 0.10588032823396219, "unassigned": 0.09109652814688132, "observability": 0.08797864103688413, "roadmap_phase": 0.08797864103688413, "failure_criteria": 0.08610154247258833, "success_criteria": 0.08521452676110358, "comments": 0.08353177379800719, "blockers": 0.08273202202183669, "big_task": 0.08047901421376315, "system": 0.08047901421376315, "conflicts": 0.07977200111929357, "owner": 0.07310631002174038, "yellow": 0.06874797371092634, "planned": 0.06830849796695856, "foundations": 0.06361661213349207, "metrics": 0.06357298541961814, "health": 0.061842455273952664, "priority": 0.06022661660221606, "dependencies": 0.059915908656425085, "visual": 0.05951329217469679, "size_points": 0.059306120797756386, "dx": 0.05788486055732456, "progress_pct": 0.05700887164995879, "ide": 0.05516359773641957, "persistence": 0.05400127847051316, "title": 0.0536835925389312, "p2": 0.052940164116981096, "sigma": 0.052940164116981096, "resilience": 0.051060277777624286, "id": 0.05075775558578537, "foundation": 0.050218901296076104, "pipeline": 0.047336111319683044, "status": 0.04255111566819481, "platform": 0.0406035676330972, "p0": 0.040239507106881574}, "norm": 0.53460681913266, "snippet": "\"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-observability-pipeline\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-observability-visual\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-state-sync-ui\", \"title\":…", "text": "\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-observability-pipeline\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-observability-visual\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-state-sync-ui\",\n      \"title\": \"State Sync UI\",\n      \"epic\": \"epic-ide-dx\",\n      \"status\": \"planned\",\n      \"priority\": \"P2\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-state-persistence\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-state-sync-ui\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-utif-sigma-foundation\",\n      \"title\": \"UTIF-Σ Foundations\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \""}
{"id": "data/tasks.board.json:439-488", "path": "data/tasks.board.json", "start": 11000, "end": 12200, "start_line": 439, "end_line": 488, "weights": {"persona": 0.1830033734371926, "utif": 0.16279100465971688, "engine": 0.154423121485434, "null": 0.14470872373280624, "task": 0.1446120230572154, "epic": 0.1174331646451122, "sigma": 0.10852733643981126, "foundation": 0.10294874765695601, "unassigned": 0.09337394135055337, "roadmap_phase": 0.09017810706280624, "failure_criteria": 0.08825408103440303, "success_criteria": 0.08734488993013118, "comments": 0.08562006814295738, "blockers": 0.08480032257238261, "p0": 0.08249098956910722, "big_task": 0.08249098956910722, "system": 0.08249098956910722, "conflicts": 0.08176630114727591, "owner": 0.07493396777228388, "yellow": 0.0704666730536995, "planned": 0.07001621041613253, "foundations": 0.06520702743682937, "metrics": 0.0651623100551086, "health": 0.06338851665580147, "microsoft": 0.06292800797690494, "priority": 0.06173228201727146, "dependencies": 0.061413806372835715, "size_points": 0.060788773817700294, "progress_pct": 0.05843409344120776, "title": 0.05502568235240449, "resilience": 0.05233678472206489, "id": 0.05202669947543001, "orchestrator": 0.04726847087071284, "automation": 0.04367244496506559, "status": 0.043614893559899684, "platform": 0.04161865682392463, "qa": 0.04161865682392463, "ai": 0.04018852743420282, "agent": 0.031190834588676487}, "norm": 0.5504269918706413, "snippet": "n\", \"title\": \"UTIF-Σ Foundations\", \"epic\": \"epic-platform-resilience\", \"status\": \"planned\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-qa-orchestrator\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 8, \"big_task\": \"task-utif-…", "text": "n\",\n      \"title\": \"UTIF-Σ Foundations\",\n      \"epic\": \"epic-platform-resilience\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-qa-orchestrator\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-utif-sigma-foundation\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-persona-engine\",\n      \"title\": \"Persona Engine\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-utif-sigma-foundation\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-persona-engine\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-agent-microsoft\",\n  "}
{"id": "data/tasks.board.json:478-526", "path": "data/tasks.board.json", "start": 12000, "end": 13200, "start_line": 478, "end_line": 526, "weights": {"microsoft": 0.18196050499346006, "null": 0.13947828793523492, "task": 0.13938508246478593, "hooks": 0.12130700332897339, "marketplace": 0.11759252911626836, "epic": 0.11318859242902381, "agent": 0.09019036507569105, "unassigned": 0.08999897961499119, "roadmap_phase": 0.08691865740993372, "plugin": 0.08691865740993372, "failure_criteria": 0.08506417449099088, "success_criteria": 0.08418784571578908, "p1": 0.08334227174443316, "comments": 0.0825253668847782, "blockers": 0.081735250672176, "system": 0.0795093875364889, "conflicts": 0.07881089267207317, "size_poin": 0.07388979429904223, "owner": 0.07222551110581579, "adapter": 0.06900467251460651, "capability": 0.06900467251460651, "yellow": 0.06791968487103565, "planned": 0.06748550401554942, "metrics": 0.06280704583624926, "sdk": 0.06245526753694436, "health": 0.06109736545137492, "priority": 0.059500994715442374, "dependencies": 0.059194030238877794, "persona": 0.05879626455813418, "progress_pct": 0.05632201777465808, "title": 0.053036802267377815, "utif": 0.052302330814366874, "sigma": 0.052302330814366874, "id": 0.05014621636186025, "engine": 0.04961385429250892, "foundation": 0.04961385429250892, "bridge": 0.04810586461836427, "mcp": 0.04555997192357864, "automation": 0.04209392285789454, "status": 0.0420384516239997, "platform": 0.040114368023059885, "big_task": 0.03975469376824445, "ai": 0.03873593005706296, "size_points": 0.029295794610939903}, "norm": 0.5251685165284552, "snippet": "persona-engine\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-agent-microsoft\", \"title\": \"Microsoft Agent SDK Adapter\", \"epic\": \"epic-ai-automation\", \"status\": \"planned\", \"priority\": \"P1\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\":…", "text": "persona-engine\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-agent-microsoft\",\n      \"title\": \"Microsoft Agent SDK Adapter\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-agent-microsoft\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-marketplace-hooks\",\n      \"title\": \"Capability Marketplace Hooks\",\n      \"epic\": \"epic-plugin-platform\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-plugin-sdk\",\n        \"task-utif-sigma-foundation\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_poin"}
{"id": "data/tasks.board.json:518-565", "path": "data/tasks.board.json", "start": 13000, "end": 14200, "start_line": 518, "end_line": 565, "weights": {"termbridge": 0.29067881691375813, "task": 0.15878967237655026, "null": 0.13619644586617058, "core": 0.1351859235468162, "epic": 0.11052533143069383, "roadmap_phase": 0.08487351252969999, "comments": 0.08058359354631282, "blockers": 0.07981206830341891, "big_task": 0.07763857841798326, "system": 0.07763857841798326, "p0": 0.07763857841798326, "conflicts": 0.07695651872684792, "lure_criteria": 0.07215121090377064, "unassign": 0.07215121090377064, "owner": 0.07052608731509072, "yellow": 0.06632157463877598, "matrix": 0.0639965381913007, "suite": 0.06137131994054529, "metrics": 0.06132923299304338, "health": 0.0596597803819308, "hooks": 0.05922636044885171, "priority": 0.05810097131037313, "dependencies": 0.057801229527374785, "marketplace": 0.05741282303911925, "size_points": 0.05721296359312968, "progress_pct": 0.054996793827019066, "title": 0.05178887750814539, "utif": 0.051071687736381766, "sigma": 0.051071687736381766, "50": 0.051071687736381766, "discovery": 0.050130008822575456, "id": 0.048966305388640004, "foundation": 0.04844646948562636, "orchestrator": 0.04448797258420032, "cli": 0.04448797258420032, "unassigned": 0.043940678282613346, "hardening": 0.043417716370015305, "plugin": 0.042436756264849995, "in_progress": 0.041531332251483775, "failure_criteria": 0.041531332251483775, "automation": 0.04110347761417937, "success_criteria": 0.04110347761417937, "status": 0.04104931158578794, "test": 0.04029179677315641, "qa": 0.039170500540164355, "ai": 0.03782449640866148, "planned": 0.03294880490170943, "sdk": 0.03049286591509636}, "norm": 0.5477814398582612, "snippet": "lure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-plugin-sdk\", \"task-utif-sigma-foundation\" ], \"conflicts\": [], \"comments\": [], \"size_points\": 5, \"big_task\": \"task-marketplace-hooks\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 0, \"health\": \"yellow\" } }, { \"id\": \"task-termbridge-…", "text": "lure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-plugin-sdk\",\n        \"task-utif-sigma-foundation\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-marketplace-hooks\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-core\",\n      \"title\": \"TermBridge Core Orchestrator\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-termbridge-discovery\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 8,\n      \"big_task\": \"task-termbridge-core\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 50,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-test-suite\",\n      \"title\": \"TermBridge CLI Matrix\",\n      \"epic\": \"epic-qa-hardening\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassign"}
{"id": "data/tasks.board.json:558-604", "path": "data/tasks.board.json", "start": 14000, "end": 15200, "start_line": 558, "end_line": 604, "weights": {"termbridge": 0.34729698004756243, "discovery": 0.15401388252718964, "null": 0.13947828793523492, "task": 0.13938508246478593, "suite": 0.1257002938541289, "epic": 0.11318859242902381, "unassigned": 0.08999897961499119, "roadmap_phase": 0.08691865740993372, "failure_criteria": 0.08506417449099088, "success_criteria": 0.08418784571578908, "test": 0.0825253668847782, "comments": 0.0825253668847782, "blockers": 0.081735250672176, "p0": 0.0795093875364889, "big_task": 0.0795093875364889, "system": 0.0795093875364889, "conflicts": 0.07881089267207317, "yell": 0.07388979429904223, "owner": 0.07222551110581579, "matrix": 0.06553862344892242, "metrics": 0.06280704583624926, "health": 0.06109736545137492, "priority": 0.059500994715442374, "dependencies": 0.059194030238877794, "size_points": 0.058591589221879806, "progress_pct": 0.05632201777465808, "registry": 0.05449897607694464, "title": 0.053036802267377815, "50": 0.052302330814366874, "id": 0.05014621636186025, "bridge": 0.04810586461836427, "core": 0.04614780522682481, "cli": 0.04555997192357864, "mcp": 0.04555997192357864, "hardening": 0.04446392640302772, "in_progress": 0.04253208724549544, "automation": 0.04209392285789454, "status": 0.0420384516239997, "qa": 0.040114368023059885, "ai": 0.03873593005706296, "yellow": 0.03395984243551783, "planned": 0.03374275200777471}, "norm": 0.5966069279450543, "snippet": ", { \"id\": \"task-termbridge-test-suite\", \"title\": \"TermBridge CLI Matrix\", \"epic\": \"epic-qa-hardening\", \"status\": \"planned\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [ \"task-termbridge-core\" ], \"conflicts\": [], \"comments\": [],…", "text": ",\n    {\n      \"id\": \"task-termbridge-test-suite\",\n      \"title\": \"TermBridge CLI Matrix\",\n      \"epic\": \"epic-qa-hardening\",\n      \"status\": \"planned\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-termbridge-core\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-test-suite\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-discovery\",\n      \"title\": \"TermBridge Discovery Registry\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P0\",\n      \"owner\": \"unassigned\",\n      \"success_criteria\": [],\n      \"failure_criteria\": [],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-discovery\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 50,\n        \"health\": \"yell"}
{"id": "data/tasks.board.json:597-641", "path": "data/tasks.board.json", "start": 15000, "end": 16200, "start_line": 597, "end_line": 641, "weights": {"termbridge": 0.26856195040945047, "registry": 0.1966702180168002, "discovery": 0.185263076083431, "mcp": 0.1644120725937838, "task": 0.1047913210559532, "epic": 0.10211579534357582, "null": 0.09437525460835189, "roadmap_phase": 0.07841574527200541, "automation": 0.07595207820011406, "sync": 0.07445223316778901, "big_task": 0.07173129527748454, "system": 0.07173129527748454, "ai": 0.06989309118991795, "drifts": 0.0666614448567446, "loses": 0.0666614448567446, "service": 0.06225421542078631, "register": 0.06225421542078631, "restart": 0.06225421542078631, "emits": 0.06225421542078631, "yellow": 0.06127536787278216, "active": 0.05912723637239739, "bindings": 0.05912723637239739, "watcher": 0.05912723637239739, "60": 0.056701762988547275, "metrics": 0.056662878308790084, "health": 0.05512044926591433, "terminals": 0.05304445606875148, "size_points": 0.052859803319739385, "progress_pct": 0.05081225516626761, "telemetry": 0.04916755450420005, "via": 0.04813157428893564, "title": 0.047848419436873464, "50": 0.047185798452091844, "without": 0.04631576902085775, "terminal": 0.04631576902085775, "id": 0.04524060823950435, "entries": 0.04476032506824174, "plane": 0.04476032506824174, "bridge": 0.043399856123089504, "control": 0.042778569016133534, "core": 0.041633346019852815, "in_progress": 0.03837133958017523, "failure_criteria": 0.03837133958017523, "success_criteria": 0.03797603910005703, "status": 0.03792599439991277, "comments": 0.037226116583894506, "blockers": 0.0368697054662533, "platform": 0.03619013636863011, "p0": 0.03586564763874227, "conflicts": 0.03555056571620692, "owner": 0.03257998598794951, "planned": 0.030441830615709795, "or": 0.027412337110611744, "priority": 0.02684012261620498, "dependencies": 0.02670165494471118}, "norm": 0.5770973281347433, "snippet": "s\": [], \"size_points\": 5, \"big_task\": \"task-termbridge-discovery\", \"system\": null, \"roadmap_phase\": null, \"metrics\": { \"progress_pct\": 50, \"health\": \"yellow\" } }, { \"id\": \"task-termbridge-discovery-registry\", \"title\": \"TermBridge Registry Service\", \"epic\": \"epic-ai-automation\", \"status\": \"in_progress\", \"priority\":…", "text": "s\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-discovery\",\n      \"system\": null,\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 50,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-discovery-registry\",\n      \"title\": \"TermBridge Registry Service\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P0\",\n      \"owner\": \"platform-core\",\n      \"success_criteria\": [\n        \"Terminals register via MCP without restart\",\n        \"Registry emits telemetry for active bindings\"\n      ],\n      \"failure_criteria\": [\n        \"Terminal registry drifts or loses entries\"\n      ],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-mcp-bridge\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-discovery\",\n      \"system\": \"control-plane\",\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 60,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-discovery-mcp-sync\",\n      \"title\": \"TermBridge MCP Sync Watcher\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"p"}
{"id": "data/tasks.board.json:633-674", "path": "data/tasks.board.json", "start": 16000, "end": 17200, "start_line": 633, "end_line": 674, "weights": {"termbridge": 0.2600810467123099, "discovery": 0.13455949736586043, "epic": 0.09889108601693658, "registry": 0.09522978977655588, "telemetry": 0.09522978977655588, "task": 0.08118569715492795, "core": 0.08063721755424125, "mcp": 0.07961005620330584, "automation": 0.07355359152011046, "success_criteria": 0.07355359152011046, "p1": 0.07281482689250476, "sync": 0.072101110015122, "ai": 0.06768594094181528, "propagate": 0.06455634659811058, "1s": 0.06455634659811058, "prune": 0.06455634659811058, "covers": 0.06455634659811058, "owner": 0.06310228865034433, "delta": 0.06028829282855096, "endpoints": 0.06028829282855096, "restart": 0.06028829282855096, "after": 0.06028829282855096, "change": 0.06028829282855096, "spans": 0.06028829282855096, "emitted": 0.06028829282855096, "per": 0.06028829282855096, "exported": 0.06028829282855096, "prism": 0.06028829282855096, "yellow": 0.05934035625574694, "watcher": 0.057260060486953264, "stale": 0.057260060486953264, "guild": 0.057260060486953264, "labels": 0.057260060486953264, "dashboards": 0.057260060486953264, "manual": 0.054911180999435254, "metrics": 0.05487352425693355, "within": 0.05299200671739363, "priority": 0.05198507959349175, "updates": 0.05136936798236986, "via": 0.046611629837706094, "title": 0.0463374167178143, "terminal": 0.04485316578862014, "required": 0.04407308187121254, "integration": 0.04407308187121254, "id": 0.04381195745299369, "plane": 0.04334684111871832, "control": 0.04142766683667669, "plugin": 0.03796972928960263, "roadmap_phase": 0.03796972928960263, "observability": 0.03796972928960263, "failure_criteria": 0.03715961306711706, "in_progress": 0.03715961306711706, "status": 0.03672833141886289, "comments": 0.036050555007561, "blockers": 0.035705398977845304, "platform": 0.03504728995698916, "big_task": 0.034733048239624094, "system": 0.034733048239624094, "conflicts": 0.034427916272537225, "null": 0.03046499447006447, "planned": 0.029480509648897906, "command": 0.027911714078787505, "health": 0.026689901749811146, "dependencies": 0.025858444788562404}, "norm": 0.5344279153096305, "snippet": "\": \"yellow\" } }, { \"id\": \"task-termbridge-discovery-mcp-sync\", \"title\": \"TermBridge MCP Sync Watcher\", \"epic\": \"epic-ai-automation\", \"status\": \"planned\", \"priority\": \"P1\", \"owner\": \"platform-core\", \"success_criteria\": [ \"Delta updates propagate within 1s\", \"Registry prune covers stale endpoints\" ], \"failure_criteria\":…", "text": "\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-discovery-mcp-sync\",\n      \"title\": \"TermBridge MCP Sync Watcher\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"planned\",\n      \"priority\": \"P1\",\n      \"owner\": \"platform-core\",\n      \"success_criteria\": [\n        \"Delta updates propagate within 1s\",\n        \"Registry prune covers stale endpoints\"\n      ],\n      \"failure_criteria\": [\n        \"Manual restart required after plugin change\"\n      ],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-termbridge-discovery-registry\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-discovery\",\n      \"system\": \"control-plane\",\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 0,\n        \"health\": \"yellow\"\n      }\n    },\n    {\n      \"id\": \"task-termbridge-core-telemetry\",\n      \"title\": \"TermBridge Telemetry Integration\",\n      \"epic\": \"epic-ai-automation\",\n      \"status\": \"in_progress\",\n      \"priority\": \"P1\",\n      \"owner\": \"observability-guild\",\n      \"success_criteria\": [\n        \"Spans emitted per command with terminal labels\",\n        \"Metrics exported via Prism dashboards\""}
{"id": "data/tasks.board.json:669-696", "path": "data/tasks.board.json", "start": 17000, "end": 17657, "start_line": 669, "end_line": 696, "weights": {"termbridge": 0.17523191090545703, "ss": 0.13048623248554264, "failures": 0.13048623248554264, "spans": 0.12185931529175192, "emitted": 0.12185931529175192, "per": 0.12185931529175192, "exported": 0.12185931529175192, "prism": 0.12185931529175192, "guild": 0.1157384201332034, "labels": 0.1157384201332034, "dashboards": 0.1157384201332034, "command": 0.11283458882914098, "metrics": 0.11091457030656782, "40": 0.10099060778086412, "telemetry": 0.09624287264651925, "registry": 0.09624287264651925, "via": 0.09421499648046977, "terminal": 0.0906606542535939, "discovery": 0.0906606542535939, "on": 0.08908388888862108, "plane": 0.08761595545272852, "no": 0.08495290985796243, "control": 0.08373677339328267, "task": 0.0820493747842357, "core": 0.08149506029417998, "observability": 0.0767473251598351, "roadmap_phase": 0.0767473251598351, "failure_criteria": 0.07510985619949194, "success_criteria": 0.07433607653628184, "p1": 0.07358945271051014, "comments": 0.07286814310038925, "blockers": 0.07217048729564476, "big_task": 0.07020509750562316, "system": 0.07020509750562316, "conflicts": 0.06958834140193694, "owner": 0.06377358959343309, "null": 0.06157818031183244, "yellow": 0.05997163664144638, "health": 0.05394767374961827, "priority": 0.05253811235512464, "dependencies": 0.0522670692534772, "size_points": 0.05173512665336195, "progress_pct": 0.04973114335421937}, "norm": 0.6164994108087609, "snippet": "ss\", \"priority\": \"P1\", \"owner\": \"observability-guild\", \"success_criteria\": [ \"Spans emitted per command with terminal labels\", \"Metrics exported via Prism dashboards\" ], \"failure_criteria\": [ \"No telemetry on command failures\" ], \"blockers\": [], \"dependencies\": [ \"task-termbridge-discovery-registry\" ], \"conflicts\":…", "text": "ss\",\n      \"priority\": \"P1\",\n      \"owner\": \"observability-guild\",\n      \"success_criteria\": [\n        \"Spans emitted per command with terminal labels\",\n        \"Metrics exported via Prism dashboards\"\n      ],\n      \"failure_criteria\": [\n        \"No telemetry on command failures\"\n      ],\n      \"blockers\": [],\n      \"dependencies\": [\n        \"task-termbridge-discovery-registry\"\n      ],\n      \"conflicts\": [],\n      \"comments\": [],\n      \"size_points\": 5,\n      \"big_task\": \"task-termbridge-core\",\n      \"system\": \"control-plane\",\n      \"roadmap_phase\": null,\n      \"metrics\": {\n        \"progress_pct\": 40,\n        \"health\": \"yellow\"\n      }\n    }\n  ]\n}\n"}
{"id": "docs/adr/index.md:1-8", "path": "docs/adr/index.md", "start": 0, "end": 378, "start_line": 1, "end_line": 8, "weights": {"adr": 0.3768599859218791, "accepted": 0.33297205499657545, "29": 0.31149510372288103, "09": 0.21448494922855682, "2025": 0.1872880729321164, "plane": 0.17523191090545703, "control": 0.16747354678656534, "manifest": 0.12233005909783076, "truth": 0.12185931529175192, "assembly": 0.12185931529175192, "of": 0.1157384201332034, "0002": 0.1157384201332034, "deterministic": 0.1157384201332034, "0003": 0.1157384201332034, "driven": 0.1109906849988585, "governance": 0.1109906849988585, "0001": 0.10711150293941267, "decision": 0.10383170124096035, "record": 0.10099060778086412, "documentation": 0.10099060778086412, "doc": 0.0923636905870734, "index": 0.08761595545272852, "ops": 0.08761595545272852, "systems": 0.08624279542852488, "task": 0.0820493747842357, "date": 0.07852140194577235, "source": 0.07852140194577235, "sync": 0.07286814310038925, "as": 0.06377358959343309, "architecture": 0.05958826418394258, "title": 0.04683036795949318, "status": 0.03711905834885079}, "norm": 0.8498097418889158, "snippet": "# Architecture Decision Record Index | ADR | Title | Status | Date | Systems | | --- | --- | --- | --- | --- | | ADR-0001 | Control Plane Manifest as Source of Truth | accepted | 2025-09-29 | control-plane | | ADR-0002 | Deterministic Documentation Assembly | accepted | 2025-09-29 | doc-sync | | ADR-0003 | Manifest-…", "text": "# Architecture Decision Record Index\n\n| ADR | Title | Status | Date | Systems |\n| --- | --- | --- | --- | --- |\n| ADR-0001 | Control Plane Manifest as Source of Truth | accepted | 2025-09-29 | control-plane |\n| ADR-0002 | Deterministic Documentation Assembly | accepted | 2025-09-29 | doc-sync |\n| ADR-0003 | Manifest-Driven Task Governance | accepted | 2025-09-29 | task-ops |\n"}
{"id": "docs/adr/ADR-0002.md:1-18", "path": "docs/adr/ADR-0002.md", "start": 0, "end": 459, "start_line": 1, "end_line": 18, "weights": {"documentation": 0.2792093273941538, "by": 0.17023895912127254, "regularly": 0.12025201817295107, "drifted": 0.12025201817295107, "because": 0.12025201817295107, "markdown": 0.12025201817295107, "edited": 0.12025201817295107, "manually": 0.12025201817295107, "powered": 0.12025201817295107, "land": 0.12025201817295107, "direct": 0.12025201817295107, "overwritten": 0.12025201817295107, "manifest": 0.11273554465878521, "assembly": 0.11230172193553609, "were": 0.11230172193553609, "templates": 0.11230172193553609, "instantly": 0.11230172193553609, "after": 0.11230172193553609, "changes": 0.11230172193553609, "edits": 0.11230172193553609, "0002": 0.10666089698550117, "deterministic": 0.10666089698550117, "accepted": 0.10228553323424214, "consequences": 0.10228553323424214, "supersedes": 0.10228553323424214, "superseded": 0.10228553323424214, "29": 0.09568803839853209, "authors": 0.09568803839853209, "decision": 0.09568803839853209, "updates": 0.09568803839853209, "related": 0.09568803839853209, "adr": 0.08682558499180547, "doc": 0.08511947956063627, "generate": 0.08355001470429242, "files": 0.07947865461060136, "systems": 0.07947865461060136, "context": 0.0782899365357693, "are": 0.07323446380435557, "date": 0.07236286061669217, "sync": 0.06715299462192735, "09": 0.06588753342315144, "yaml": 0.0646988153483194, "2025": 0.05753293743666321, "gpt": 0.05599427831035938, "architecture": 0.05491467483618238, "codex": 0.05323776947464978, "status": 0.034207759654823276}, "norm": 0.7352200206695633, "snippet": "# ADR-0002 — Deterministic Documentation Assembly **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context Architecture documentation regularly drifted because Markdown files were edited manually. ## Decision Generate documentation from templates powered by manifest.yaml. ## Consequences Updates…", "text": "# ADR-0002 — Deterministic Documentation Assembly\n\n**Status:** accepted (date: 2025-09-29)\n**Authors:** gpt-5-codex\n\n## Context\nArchitecture documentation regularly drifted because Markdown files were edited manually.\n\n## Decision\nGenerate documentation from templates powered by manifest.yaml.\n\n## Consequences\nUpdates land instantly after manifest changes; direct edits are overwritten.\n\n**Related Systems:** doc-sync\n**Supersedes:** —\n**Superseded by:** —\n"}
{"id": "docs/adr/ADR-0003.md:1-18", "path": "docs/adr/ADR-0003.md", "start": 0, "end": 449, "start_line": 1, "end_line": 18, "weights": {"traceability": 0.19742120149617237, "systems": 0.15895730922120271, "losing": 0.12025201817295107, "drive": 0.12025201817295107, "mandatory": 0.12025201817295107, "fields": 0.12025201817295107, "jobs": 0.12025201817295107, "statuses": 0.12025201817295107, "generators": 0.12025201817295107, "task": 0.11342119455467875, "manifest": 0.11273554465878521, "were": 0.11230172193553609, "0003": 0.10666089698550117, "align": 0.10666089698550117, "driven": 0.10228553323424214, "governance": 0.10228553323424214, "accepted": 0.10228553323424214, "consequences": 0.10228553323424214, "detected": 0.10228553323424214, "automatically": 0.10228553323424214, "through": 0.10228553323424214, "supersedes": 0.10228553323424214, "superseded": 0.10228553323424214, "drift": 0.09871060074808619, "29": 0.09568803839853209, "authors": 0.09568803839853209, "decision": 0.09568803839853209, "related": 0.09568803839853209, "adr": 0.08682558499180547, "by": 0.08511947956063627, "ops": 0.08074411580937726, "context": 0.0782899365357693, "to": 0.0782899365357693, "date": 0.07236286061669217, "roadmap": 0.07072792710808332, "sync": 0.06715299462192735, "09": 0.06588753342315144, "board": 0.0646988153483194, "yaml": 0.0646988153483194, "is": 0.06251792054223655, "2025": 0.05753293743666321, "gpt": 0.05599427831035938, "architecture": 0.05491467483618238, "codex": 0.05323776947464978, "tasks": 0.05291893573206586, "status": 0.034207759654823276}, "norm": 0.6694269064298638, "snippet": "# ADR-0003 — Manifest-Driven Task Governance **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context Tasks were losing traceability to architecture and systems. ## Decision Drive the task board and roadmap from manifest.yaml with mandatory traceability fields. ## Consequences Drift is detected…", "text": "# ADR-0003 — Manifest-Driven Task Governance\n\n**Status:** accepted (date: 2025-09-29)\n**Authors:** gpt-5-codex\n\n## Context\nTasks were losing traceability to architecture and systems.\n\n## Decision\nDrive the task board and roadmap from manifest.yaml with mandatory traceability fields.\n\n## Consequences\nDrift is detected automatically; sync jobs align statuses through generators.\n\n**Related Systems:** task-ops\n**Supersedes:** —\n**Superseded by:** —\n"}
{"id": "docs/adr/ADR-0001.md:1-18", "path": "docs/adr/ADR-0001.md", "start": 0, "end": 511, "start_line": 1, "end_line": 18, "weights": {"truth": 0.20096097609516983, "of": 0.1908668682898442, "plane": 0.1444894703957277, "systems": 0.14222496088212874, "control": 0.13809222278892228, "source": 0.12949143478776493, "single": 0.10759391099685095, "orchestration": 0.10759391099685095, "introduce": 0.10759391099685095, "describing": 0.10759391099685095, "structure": 0.10759391099685095, "disallowed": 0.10759391099685095, "manifest": 0.10086864522101834, "needs": 0.10048048804758491, "artefacts": 0.10048048804758491, "regenerate": 0.10048048804758491, "edits": 0.10048048804758491, "documents": 0.0954334341449221, "all": 0.0954334341449221, "accepted": 0.09151863499905875, "work": 0.09151863499905875, "consequences": 0.09151863499905875, "automatically": 0.09151863499905875, "manual": 0.09151863499905875, "supersedes": 0.09151863499905875, "superseded": 0.09151863499905875, "0001": 0.08832001119565605, "project": 0.08832001119565605, "29": 0.08561561330394976, "authors": 0.08561561330394976, "decision": 0.08561561330394976, "related": 0.08561561330394976, "documentation": 0.08327295729299322, "adr": 0.07768604972951015, "by": 0.07615953434372719, "context": 0.07004889058463569, "milestones": 0.06634171350275486, "are": 0.0655255728775813, "date": 0.06474571739388246, "09": 0.0589520035891355, "yaml": 0.05788841373270682, "epics": 0.05737986045422871, "program": 0.055037204443272175, "as": 0.0525852405419536, "2025": 0.051476838759119715, "gpt": 0.05010014375137418, "architecture": 0.049134182748163176, "codex": 0.04763379374047612, "tasks": 0.04734852144447997, "status": 0.030606942849052406}, "norm": 0.6789997190308819, "snippet": "# ADR-0001 — Control Plane Manifest as Source of Truth **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context The project needs a single source of truth for architecture, documentation, and work orchestration. ## Decision Introduce manifest.yaml describing program structure, epics, tasks, systems,…", "text": "# ADR-0001 — Control Plane Manifest as Source of Truth\n\n**Status:** accepted (date: 2025-09-29)\n**Authors:** gpt-5-codex\n\n## Context\nThe project needs a single source of truth for architecture, documentation, and work orchestration.\n\n## Decision\nIntroduce manifest.yaml describing program structure, epics, tasks, systems, documents, and milestones.\n\n## Consequences\nAll artefacts regenerate automatically; manual edits are disallowed.\n\n**Related Systems:** control-plane\n**Supersedes:** —\n**Superseded by:** —\n"}
{"id": "docs/rfc/index.md:1-6", "path": "docs/rfc/index.md", "start": 0, "end": 188, "start_line": 1, "end_line": 6, "weights": {"rfc": 0.421724269960198, "interface": 0.27273275327201624, "draft": 0.27273275327201624, "cycle": 0.24840772356887378, "0001": 0.23972574467392357, "request": 0.23238523611072076, "29": 0.23238523611072076, "doc": 0.20671873607583094, "index": 0.1960928526799162, "plane": 0.1960928526799162, "systems": 0.19301958976860328, "control": 0.18741087378496596, "date": 0.17573837578339527, "comments": 0.16308584408182356, "sync": 0.16308584408182356, "09": 0.16001258117051065, "2025": 0.1397228480604678, "agent": 0.11882222700448185, "title": 0.10481082352838948, "status": 0.08307598773314225}, "norm": 0.952378734821223, "snippet": "# Request for Comments Index | RFC | Title | Status | Date | Systems | | --- | --- | --- | --- | --- | | RFC-0001 | Agent Cycle Interface | draft | 2025-09-29 | control-plane, doc-sync |", "text": "# Request for Comments Index\n\n| RFC | Title | Status | Date | Systems |\n| --- | --- | --- | --- | --- |\n| RFC-0001 | Agent Cycle Interface | draft | 2025-09-29 | control-plane, doc-sync |\n"}
{"id": "docs/rfc/RFC-0001.md:1-17", "path": "docs/rfc/RFC-0001.md", "start": 0, "end": 553, "start_line": 1, "end_line": 17, "weights": {"cycle": 0.32603513718414684, "agent": 0.15595417294338243, "agentcall": 0.11149698654246776, "sync": 0.10702508517869672, "entrypoint": 0.09582582698157038, "mirror": 0.09582582698157038, "consumed": 0.09582582698157038, "hybrid": 0.09582582698157038, "pipelines": 0.09582582698157038, "validates": 0.09582582698157038, "publishes": 0.09582582698157038, "offer": 0.09582582698157038, "same": 0.09582582698157038, "lifecycle": 0.09582582698157038, "post": 0.09582582698157038, "run": 0.091693119039682, "interface": 0.08949043466738033, "draft": 0.08949043466738033, "define": 0.08949043466738033, "motivation": 0.08949043466738033, "orchestrates": 0.08949043466738033, "verification": 0.08949043466738033, "proposal": 0.08949043466738033, "generator": 0.08949043466738033, "rest": 0.08499540228532125, "external": 0.08499540228532125, "require": 0.08499540228532125, "unified": 0.08150878429603671, "reporting": 0.08150878429603671, "through": 0.08150878429603671, "references": 0.08150878429603671, "0001": 0.07866000997113118, "api": 0.07866000997113118, "29": 0.07625140559883026, "authors": 0.07625140559883026, "related": 0.07625140559883026, "workflow": 0.07416497758907209, "rfc": 0.06918913804034499, "report": 0.06918913804034499, "by": 0.06782958527488203, "doc": 0.06782958527488203, "runs": 0.06657891796748303, "plane": 0.0643429672855975, "systems": 0.06333455289282296, "control": 0.06149419296069196, "date": 0.05766415455392657, "summary": 0.05351254258934836, "09": 0.05250412819657381, "yaml": 0.05155686848069201, "2025": 0.045846559519841, "agents": 0.045530892218004756, "manifest": 0.04491806857498473, "gpt": 0.04462044052856763, "codex": 0.04242384755011155, "status": 0.0272593084749373}, "norm": 0.6848561560545796, "snippet": "# RFC-0001 — Agent Cycle Interface **Status:** draft (date: 2025-09-29) **Authors:** gpt-5-codex ## Summary Define the entrypoint for agentcall run agent-cycle and the mirror REST API consumed by external agents. ## Motivation Hybrid-H pipelines require a unified workflow that orchestrates sync, verification, and…", "text": "# RFC-0001 — Agent Cycle Interface\n\n**Status:** draft (date: 2025-09-29)\n**Authors:** gpt-5-codex\n\n## Summary\nDefine the entrypoint for agentcall run agent-cycle and the mirror REST API consumed by external agents.\n\n## Motivation\nHybrid-H pipelines require a unified workflow that orchestrates sync, verification, and reporting.\n\n## Proposal\nagentcall run agent-cycle runs the generator, validates manifest.yaml, and publishes a report. Offer the same lifecycle through POST /agent-cycle.\n\n**Related Systems:** control-plane, doc-sync\n**References:** —\n"}
{"id": "docs/architecture/overview.md:1-20", "path": "docs/architecture/overview.md", "start": 0, "end": 1200, "start_line": 1, "end_line": 20, "weights": {"adr": 0.1800042615683772, "m_q1": 0.1396923858222522, "plane": 0.13391707012286963, "control": 0.12798791380436703, "rfc": 0.10800255694102633, "100": 0.09342116667869413, "architecture": 0.0910779972892781, "driven": 0.08482214951132276, "sync": 0.08353177379800719, "overview": 0.08185757135207147, "0001": 0.08185757135207147, "documentation": 0.07717981407643275, "phase": 0.07058688548930814, "doc": 0.07058688548930814, "manifest": 0.070116009482903, "ops": 0.06695853506143482, "task": 0.06270440024161103, "program": 0.051010091923032755, "id": 0.05075775558578537, "01t05": 0.04986059290097972, "17": 0.04986059290097972, "22z": 0.04986059290097972, "govern": 0.04986059290097972, "quality_pct": 0.04986059290097972, "95": 0.04986059290097972, "cycle_hours": 0.04986059290097972, "drift_tolerance_min": 0.04986059290097972, "synchronizer": 0.04986059290097972, "assemble": 0.04986059290097972, "indices": 0.04986059290097972, "freshness_minutes": 0.04986059290097972, "coverage_pct": 0.04986059290097972, "decomposed": 0.04986059290097972, "keep": 0.04986059290097972, "aligned": 0.04986059290097972, "update_latency_minutes": 0.04986059290097972, "traceability_pct": 0.04986059290097972, "one": 0.04656412860741741, "them": 0.04656412860741741, "intent": 0.04656412860741741, "gpt": 0.04643427957444437, "name": 0.046130342452295546, "planned": 0.04553899864463905, "purpose": 0.044225249969598056, "active": 0.044225249969598056, "0002": 0.044225249969598056, "0003": 0.044225249969598056, "001": 0.044225249969598056, "codex": 0.04414839419849007, "tasks": 0.04388399548512779, "automatically": 0.04241107475566138, "governance": 0.04241107475566138, "sdk": 0.04214461142736896, "snapshot": 0.04092878567603574, "toolkit": 0.04092878567603574, "traceability": 0.04092878567603574, "arch": 0.04092878567603574, "updated": 0.037632321382473424, "generate": 0.03464268902373101, "green": 0.03347926753071741, "engine": 0.03347926753071741, "systems": 0.03295456410683471, "pipeline": 0.03155740754645537, "version": 0.02932621367896138}, "norm": 0.5177482244053989, "snippet": "# Architecture Overview ## Program Snapshot - Program ID: codex-sdk - Name: GPT-5 Codex SDK Toolkit - Version: 0.1.0 - Updated: 2025-10-01T05:17:22Z - Progress: 100% (health: green) ## Systems | ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metrics | | --- | --- | --- | --- | --- | ---…", "text": "# Architecture Overview\n\n## Program Snapshot\n- Program ID: codex-sdk\n- Name: GPT-5 Codex SDK Toolkit\n- Version: 0.1.0\n- Updated: 2025-10-01T05:17:22Z\n- Progress: 100% (health: green)\n\n## Systems\n| ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metrics |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| control-plane | Control Plane Automation | Govern architecture, documentation, and tasks from one manifest-driven pipeline. | ADR-0001 | RFC-0001 | active | — | m_q1 | quality_pct=95, cycle_hours=2, drift_tolerance_min=0 |\n| doc-sync | Documentation Synchronizer | Assemble the architecture overview and ADR/RFC indices automatically from the manifest. | ADR-0002 | — | planned | control-plane | m_q1 | freshness_minutes=5, coverage_pct=100 |\n| task-ops | Task Ops Governance | Generate decomposed tasks and keep them aligned with architecture intent. | ADR-0003 | — | planned | control-plane, doc-sync | m_q1 | update_latency_minutes=5, traceability_pct=100 |\n\n## Traceability\n| Task ID | Title | Status | Owner | System | Big Task | Epic | Phase |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ARCH-001 | Manifest-driven sync engine | done | gpt-5-c"}
{"id": "docs/architecture/overview.md:15-30", "path": "docs/architecture/overview.md", "start": 1000, "end": 1870, "start_line": 15, "end_line": 30, "weights": {"bigtask": 0.27625463634326597, "m_q1": 0.25799044228433965, "arch": 0.22676759631317095, "foundation": 0.18549323902154236, "done": 0.16248307578884005, "index": 0.1483945912172339, "001": 0.14701907422325838, "gpt": 0.12863550422650127, "sync": 0.12341631444029892, "codex": 0.1223029839282495, "sdk": 0.1167519640893329, "plane": 0.11129594341292542, "ops": 0.11129594341292542, "control": 0.10636833376984556, "doctor": 0.08340136090169785, "ux": 0.08150297323218747, "pytest": 0.0797856726951726, "adr": 0.0797856726951726, "rfc": 0.0797856726951726, "doc": 0.0782179001368009, "manifest": 0.07769611861618982, "task": 0.06948325432178518, "test": 0.06170815722014946, "002": 0.055250927268653195, "automated": 0.055250927268653195, "synthesis": 0.055250927268653195, "003": 0.055250927268653195, "docs": 0.05361896406613318, "links": 0.05159808845686793, "documents": 0.04900635807441946, "md": 0.04777680788260925, "driven": 0.046996055810327474, "governance": 0.046996055810327474, "tables": 0.046996055810327474, "traceability": 0.045353519262634194, "documentation": 0.04276178888018571, "phase": 0.03910895006840045, "engine": 0.03709864780430847, "agentcall": 0.03214327539963034, "system": 0.029726482727606206, "board": 0.029726482727606206, "yaml": 0.029726482727606206, "big": 0.02921154206238144, "owner": 0.02700323162965185, "architecture": 0.025231066816624334, "verify": 0.022966972868147698, "epic": 0.02115912876488508, "title": 0.019829074721587202, "id": 0.01874836017132613, "status": 0.01571707876032421, "in": 0.015280192724841232}, "norm": 0.7018819621881239, "snippet": "0 | ## Traceability | Task ID | Title | Status | Owner | System | Big Task | Epic | Phase | | --- | --- | --- | --- | --- | --- | --- | --- | | ARCH-001 | Manifest-driven sync engine | done | gpt-5-codex | control-plane | bigtask-arch-sync | sdk-foundation | m_q1 | | ARCH-002 | Automated documentation synthesis | done…", "text": "0 |\n\n## Traceability\n| Task ID | Title | Status | Owner | System | Big Task | Epic | Phase |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ARCH-001 | Manifest-driven sync engine | done | gpt-5-codex | control-plane | bigtask-arch-sync | sdk-foundation | m_q1 |\n| ARCH-002 | Automated documentation synthesis | done | gpt-5-codex | doc-sync | bigtask-doc-ops | sdk-foundation | m_q1 |\n| ARCH-003 | Task board governance | done | gpt-5-codex | task-ops | bigtask-arch-sync | sdk-foundation | m_q1 |\n| TEST-001 | Pytest in agentcall verify | done | gpt-5-codex | control-plane | bigtask-test-pytest | sdk-foundation | m_q1 |\n| OPS-001 | Doctor UX with tables and links | done | gpt-5-codex | control-plane | bigtask-doctor-ux | sdk-foundation | m_q1 |\n\n## Documents\n- ADR Index: docs/adr/index.md\n- RFC Index: docs/rfc/index.md\n- Manifest: architecture/manifest.yaml\n"}
{"id": ".sdk/arch/outputs.json:1-3", "path": ".sdk/arch/outputs.json", "start": 0, "end": 111, "start_line": 1, "end_line": 3, "weights": {"13d510fa5bf0f0ba94890172878c81e8833afd6bd692d67a34cde216724424ba": 1.226570585364101, "dashboard": 1.087941149252112, "reports": 0.665898509182794, "architecture": 0.5601296833290602, "json": 0.41276523451653885}, "norm": 1.9014816776977141, "snippet": "{ \"reports/architecture-dashboard.json\": \"13d510fa5bf0f0ba94890172878c81e8833afd6bd692d67a34cde216724424ba\" }", "text": "{\n  \"reports/architecture-dashboard.json\": \"13d510fa5bf0f0ba94890172878c81e8833afd6bd692d67a34cde216724424ba\"\n}"}
{"id": "scripts/lib/deps_checker.py:1-49", "path": "scripts/lib/deps_checker.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 49, "weights": {"import": 0.26446752854979244, "str": 0.14792940395907483, "candidate": 0.12674725423627592, "venv_python": 0.1254172515046498, "candidate_exe": 0.1254172515046498, "venv_bin": 0.1191176440786984, "nt": 0.1191176440786984, "os": 0.09017023325830896, "exe": 0.0895306996616132, "cmd": 0.08743328678812193, "name": 0.08283258571726061, "path": 0.0792715239862382, "venv_dir": 0.076154192626954, "if": 0.07091566123504221, "which": 0.06757336540210555, "optional": 0.06464386619827853, "exists": 0.06295086982771583, "shutil": 0.06112325223014877, "dataclass": 0.06112325223014877, "python": 0.05387599841534745, "return": 0.049177709514680014, "datetime": 0.046166984835778156, "im": 0.0447653498308066, "with_suffix": 0.04180575050154993, "importlib": 0.03970588135956613, "importlib_metadata": 0.03970588135956613, "_version_string": 0.03970588135956613, "root": 0.03963687946287794, "bin": 0.03870967645963231, "checkresult": 0.038077096313477, "metadata": 0.036746282030309455, "slots": 0.036746282030309455, "details": 0.036746282030309455, "out": 0.036746282030309455, "else": 0.03549709420011696, "fix": 0.034646412888325644, "dataclasses": 0.03301762784223653, "asdict": 0.03301762784223653, "re": 0.03110256021838623, "class": 0.030561626115074386, "ok": 0.030058028512979857, "typing": 0.028727214229812302, "__file__": 0.028727214229812302, "venv": 0.028727214229812302, "package": 0.028727214229812302, "__future__": 0.028332562979664303, "annotations": 0.028332562979664303, "def": 0.027097617632181745, "iterable": 0.026937999207673726, "resolve": 0.026937999207673726, "tuple": 0.026937999207673726, "subprocess": 0.02632937432490693, "pathlib": 0.024084960458133495, "parents": 0.024084960458133495, "timezone": 0.02387337259774479, "bool": 0.023273094508423825, "as": 0.02187853073643325, "run": 0.021417370870582656, "usr": 0.02112536112887682, "gpt": 0.020844585356411156, "scripts": 0.020708146429315153, "env": 0.0199390915704989, "python3": 0.0199390915704989, "sys": 0.0199390915704989}, "norm": 0.532160680600569, "snippet": "#!/usr/bin/env python3 \"\"\"Проверка окружения и зависимостей для GPT-5 Codex SDK.\"\"\" from __future__ import annotations import json import os import re import shutil import subprocess import sys from dataclasses import dataclass, asdict from datetime import datetime, timezone from importlib import metadata as…", "text": "#!/usr/bin/env python3\n\"\"\"Проверка окружения и зависимостей для GPT-5 Codex SDK.\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime, timezone\nfrom importlib import metadata as importlib_metadata\nfrom pathlib import Path\nfrom typing import Iterable, Optional\n\n\n@dataclass(slots=True)\nclass CheckResult:\n    name: str\n    status: str\n    details: str\n    fix: str\n\n\nROOT = Path(__file__).resolve().parents[2]\nVENV_DIR = ROOT / \".venv\"\nVENV_BIN = VENV_DIR / (\"Scripts\" if os.name == \"nt\" else \"bin\")\nVENV_PYTHON = VENV_BIN / (\"python.exe\" if os.name == \"nt\" else \"python\")\n\n\ndef which(cmd: str) -> Optional[str]:\n    path = shutil.which(cmd)\n    if path:\n        return path\n    candidate = VENV_BIN / cmd\n    if candidate.exists():\n        return str(candidate)\n    if os.name == \"nt\":\n        candidate_exe = candidate.with_suffix(\".exe\")\n        if candidate_exe.exists():\n            return str(candidate_exe)\n    return None\n\n\ndef _version_string(package: str) -> tuple[bool, str]:\n    if VENV_PYTHON.exists():\n        ok, out = run([str(VENV_PYTHON), \"-c\", f\"im"}
{"id": "scripts/lib/deps_checker.py:42-79", "path": "scripts/lib/deps_checker.py", "start": 1000, "end": 2200, "start_line": 42, "end_line": 79, "weights": {"venv_python": 0.24687016459966987, "str": 0.19059242955228767, "version": 0.18657539392304737, "package": 0.1696391529950123, "digits": 0.15860826534880615, "_version_tuple": 0.14812209875980192, "module": 0.14812209875980192, "minimum": 0.14812209875980192, "ok": 0.14199827263028414, "out": 0.13019587857290676, "tuple": 0.1272588238431483, "return": 0.11616114143984763, "has_version": 0.09874806583986795, "_version_string": 0.09378803010794069, "importlib_metadata": 0.09378803010794069, "origin": 0.08994072749907499, "if": 0.08375384128621366, "missing": 0.07346639223998126, "strip": 0.053247077398225554, "xists": 0.05286942178293538, "packagenotfounderror": 0.05286942178293538, "__import__": 0.05286942178293538, "importerror": 0.05286942178293538, "except": 0.05244500816314119, "import": 0.052057545131209144, "try": 0.052057545131209144, "run": 0.05058930705637627, "exists": 0.04956476532412108, "candidate_exe": 0.049374032919933974, "module_available": 0.049374032919933974, "def": 0.048004831236321974, "importlib": 0.046894015053970346, "findall": 0.044970363749537494, "metadata": 0.043398626190968924, "int": 0.04257398759811824, "else": 0.04192329228806917, "true": 0.040299374787039835, "optional": 0.038173317539500685, "re": 0.03673319611999063, "system": 0.028445168816933524, "bool": 0.02748632713494883, "as": 0.025839299231822026, "print": 0.02209758819257875, "false": 0.02185810919165568, "none": 0.019145085529244474, "not": 0.017430853988337876, "in": 0.014621563728080834}, "norm": 0.6473432472772297, "snippet": "xists(): return str(candidate_exe) return None def _version_string(package: str) -> tuple[bool, str]: if VENV_PYTHON.exists(): ok, out = run([str(VENV_PYTHON), \"-c\", f\"import importlib.metadata as m; print(m.version('{package}'))\"]) if ok and out.strip(): return True, out.strip() try: return True,…", "text": "xists():\n            return str(candidate_exe)\n    return None\n\n\ndef _version_string(package: str) -> tuple[bool, str]:\n    if VENV_PYTHON.exists():\n        ok, out = run([str(VENV_PYTHON), \"-c\", f\"import importlib.metadata as m; print(m.version('{package}'))\"])\n        if ok and out.strip():\n            return True, out.strip()\n    try:\n        return True, importlib_metadata.version(package)\n    except importlib_metadata.PackageNotFoundError:\n        return False, \"\"\n\n\ndef _version_tuple(version: str) -> tuple[int, ...]:\n    digits = re.findall(r\"\\d+\", version)\n    return tuple(int(d) for d in digits) if digits else (0,)\n\n\ndef module_available(module: str, package: str, minimum: Optional[str]) -> tuple[str, str]:\n    if VENV_PYTHON.exists():\n        ok, _ = run([str(VENV_PYTHON), \"-c\", f\"import {module}\"])\n        if not ok:\n            return \"missing\", \"\"\n        origin = str(VENV_PYTHON)\n    else:\n        try:\n            __import__(module)\n        except ImportError:\n            return \"missing\", \"\"\n        origin = \"system\"\n\n    has_version, version = _version_string(package)\n    if has_version and minimum:\n        if _version_tuple(version) < _version_tuple(minimum):\n      "}
{"id": "scripts/lib/deps_checker.py:73-104", "path": "scripts/lib/deps_checker.py", "start": 2000, "end": 3200, "start_line": 73, "end_line": 104, "weights": {"minimum": 0.26033580994147004, "pkg_name": 0.208268647953176, "details": 0.13729747194961078, "version": 0.13116815572771814, "subprocess": 0.13116815572771814, "diff_cover": 0.11150641685128189, "detect_secrets": 0.11150641685128189, "has_version": 0.104134323976588, "_version_tuple": 0.104134323976588, "module": 0.104134323976588, "stdout": 0.10186248147333093, "outdated": 0.09890374084110108, "origin": 0.0948465853626609, "replace": 0.09340371070140804, "out": 0.09153164796640718, "fix": 0.08630106483092025, "pytest": 0.08051099699240144, "missing": 0.0774736499985257, "return": 0.07656075231262685, "exc": 0.07612623232300347, "requirements": 0.07369838882073944, "cmd": 0.07259612296953152, "pip": 0.06964123334229926, "true": 0.06374628375404483, "install": 0.06288553231625411, "run": 0.053348723804905886, "detect_python_packages": 0.052067161988294, "module_available": 0.052067161988294, "str": 0.05024709506378493, "_version_string": 0.04945187042055054, "calledprocesserror": 0.04945187042055054, "depends": 0.04945187042055054, "status": 0.04757988388352692, "checkresult": 0.04742329268133045, "pipe": 0.04576582398320359, "pragma": 0.04207977754585664, "cover": 0.03946448597811318, "oserror": 0.03806311616150174, "on": 0.03806311616150174, "if": 0.03785238541247058, "ok": 0.03743590823889309, "no": 0.03629806148476576, "package": 0.03577843954076623, "stderr": 0.03395416049111031, "elif": 0.03395416049111031, "def": 0.03374885105098999, "tuple": 0.03355005355864819, "iterable": 0.03355005355864819, "check": 0.03144276615812706, "system": 0.02999672347967535, "text": 0.02947710153567582, "bool": 0.028985581342309674, "strip": 0.02807573171906438, "except": 0.0276528224860199, "try": 0.02744852379645573, "as": 0.027248715553557776, "env": 0.024833232228712268, "false": 0.023050369693018716, "or": 0.022926681947057097, "list": 0.021666807735364852, "in": 0.015419103567794332}, "norm": 0.6118354583701684, "snippet": "return \"missing\", \"\" origin = \"system\" has_version, version = _version_string(package) if has_version and minimum: if _version_tuple(version) < _version_tuple(minimum): return \"outdated\", f\"{version} (<{minimum})\" details = version or origin return \"ok\", details def run(cmd: list[str]) -> tuple[bool, str]: try: out =…", "text": "return \"missing\", \"\"\n        origin = \"system\"\n\n    has_version, version = _version_string(package)\n    if has_version and minimum:\n        if _version_tuple(version) < _version_tuple(minimum):\n            return \"outdated\", f\"{version} (<{minimum})\"\n    details = version or origin\n    return \"ok\", details\n\n\ndef run(cmd: list[str]) -> tuple[bool, str]:\n    try:\n        out = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True, text=True)\n        return True, out.stdout.strip()\n    except (OSError, subprocess.CalledProcessError) as exc:  # pragma: no cover - depends on env\n        return False, str(exc)\n\n\ndef detect_python_packages() -> Iterable[CheckResult]:\n    requirements = (\n        (\"pytest\", \"pytest\", \"8.4.2\"),\n        (\"diff_cover\", \"diff_cover\", \"9.7.1\"),\n        (\"detect_secrets\", \"detect_secrets\", \"1.5.0\"),\n    )\n    for pkg_name, module, minimum in requirements:\n        status, details = module_available(module, pkg_name.replace(\"_\", \"-\"), minimum)\n        if status == \"missing\":\n            fix = f\"pip install {pkg_name.replace('_', '-')}\"\n        elif status == \"outdated\":\n            fix = f\"pip install -U {pkg_name.replace('_', '-')}\"\n   "}
{"id": "scripts/lib/deps_checker.py:99-131", "path": "scripts/lib/deps_checker.py", "start": 3000, "end": 4200, "start_line": 99, "end_line": 131, "weights": {"fix": 0.31382205393061907, "install": 0.285843328710246, "details": 0.24963176718111052, "apt": 0.17982498334745653, "checkresult": 0.17244833702301982, "reviewdog": 0.1613252878785169, "location": 0.1520542047972026, "pkg_name": 0.14200135087716548, "cmd": 0.1319929508536937, "pip": 0.1266204242587259, "status": 0.11534517305097437, "go": 0.10564588636162596, "detect": 0.10136946986480173, "commands": 0.08066264393925845, "yield": 0.07650868644701209, "cover": 0.0717536108692967, "missing": 0.07043059090775064, "diff": 0.06699853529158131, "secrets": 0.06699853529158131, "git": 0.0650517082559386, "iterable": 0.061000097379360345, "shellcheck": 0.060296632678223216, "replace": 0.05660830951600487, "make": 0.051445091581423845, "detect_tools": 0.047333783625721826, "gobin": 0.047333783625721826, "detect_stack_configs": 0.047333783625721826, "name": 0.04689282745150704, "outdated": 0.04495624583686413, "already": 0.04495624583686413, "v0": 0.04495624583686413, "com": 0.043112084255754954, "15": 0.041605294530185084, "golang": 0.041605294530185084, "github": 0.04033132196962923, "tool": 0.04033132196962923, "else": 0.040190924838148956, "which": 0.03825434322350604, "npm": 0.03825434322350604, "required": 0.034602832874092486, "ok": 0.03403264385353918, "entries": 0.03403264385353918, "venv": 0.0325258541279693, "package": 0.0325258541279693, "elif": 0.030867418628282104, "def": 0.03068077368271818, "python": 0.030500048689680172, "items": 0.028584332871024597, "bash": 0.027030182197446583, "pwd": 0.027030182197446583, "if": 0.022940839643921566, "root": 0.022439059861216026, "bin": 0.021914155681692672, "path": 0.0179507417952308, "json": 0.017056414649443755, "in": 0.014017366879813031}, "norm": 0.7294702710479295, "snippet": "m) if status == \"missing\": fix = f\"pip install {pkg_name.replace('_', '-')}\" elif status == \"outdated\": fix = f\"pip install -U {pkg_name.replace('_', '-')}\" else: fix = \"\" yield CheckResult(name=f\"python:{pkg_name}\", status=status, details=details, fix=fix) def detect_tools() -> Iterable[CheckResult]: commands = {…", "text": "m)\n        if status == \"missing\":\n            fix = f\"pip install {pkg_name.replace('_', '-')}\"\n        elif status == \"outdated\":\n            fix = f\"pip install -U {pkg_name.replace('_', '-')}\"\n        else:\n            fix = \"\"\n        yield CheckResult(name=f\"python:{pkg_name}\", status=status, details=details, fix=fix)\n\n\ndef detect_tools() -> Iterable[CheckResult]:\n    commands = {\n        \"git\": \"apt install git\",\n        \"make\": \"apt install make\",\n        \"bash\": \"already required\",\n        \"shellcheck\": \"apt install shellcheck\",\n        \"diff-cover\": \"pip install diff-cover\",\n        \"detect-secrets\": \"pip install detect-secrets\",\n        \"reviewdog\": \"GOBIN=$PWD/.venv/bin go install github.com/reviewdog/reviewdog/cmd/reviewdog@v0.15.0\",\n        \"go\": \"apt install golang-go\",\n    }\n    for cmd, fix in commands.items():\n        location = which(cmd)\n        if location:\n            status, details = \"ok\", location\n        else:\n            status, details = \"missing\", \"\"\n        yield CheckResult(name=f\"tool:{cmd}\", status=status, details=details, fix=fix)\n\n\ndef detect_stack_configs(root: Path) -> Iterable[CheckResult]:\n    entries = {\n        \"package.json\": \"npm install\","}
{"id": "scripts/lib/deps_checker.py:126-163", "path": "scripts/lib/deps_checker.py", "start": 4000, "end": 5200, "start_line": 126, "end_line": 163, "weights": {"install": 0.16735665858357948, "tip": 0.14837547403597995, "root": 0.1313770762842164, "checkresult": 0.12620714987773426, "details": 0.12179614447142892, "fix": 0.11483609433146647, "rel": 0.11198650475913462, "results": 0.10308993749803823, "lock": 0.09390873697291958, "detect_stack_configs": 0.0923772228824571, "yarn": 0.08773718945581548, "pnpm": 0.08773718945581548, "poetry": 0.08773718945581548, "gradlew": 0.08773718945581548, "mod": 0.0841380999184895, "gradle": 0.0841380999184895, "argv": 0.081296714626953, "yield": 0.07465766983942307, "txt": 0.0714210457190658, "go": 0.06872662499869216, "entries": 0.06641854687545548, "cargo": 0.06537760298613983, "requirements": 0.06537760298613983, "build": 0.06347787660458525, "check": 0.05578555286119316, "summary": 0.05523875364061766, "pipfile": 0.04618861144122855, "download": 0.04618861144122855, "fetch": 0.04618861144122855, "mvn": 0.04618861144122855, "collect": 0.04618861144122855, "detect_tools": 0.04618861144122855, "detect_python_packages": 0.04618861144122855, "name": 0.04575832356155122, "def": 0.04490774535010765, "pipenv": 0.04386859472790774, "pom": 0.04386859472790774, "kts": 0.04386859472790774, "stack": 0.04386859472790774, "status": 0.04220796150958034, "detected": 0.04206904995924475, "tool": 0.03935556418004142, "xml": 0.03935556418004142, "npm": 0.037328834919711534, "toml": 0.037328834919711534, "asdict": 0.036479153341825846, "none": 0.03581983744181224, "path": 0.03503289931004721, "cmd": 0.03219989325261479, "package": 0.03173893830229262, "pip": 0.030889256724406927, "isoformat": 0.030120626242113986, "iterable": 0.029762144285897584, "str": 0.02971602396245345, "generated_at": 0.02941892158897181, "utc": 0.028773415881927163, "items": 0.02789277643059658, "now": 0.02789277643059658, "in": 0.02735647407189317, "yaml": 0.026609996635195875, "timezone": 0.026376226176540615, "main": 0.026149041684873708, "dev": 0.02550353597782906, "datetime": 0.02550353597782906}, "norm": 0.5430870678215425, "snippet": "yield CheckResult(name=f\"tool:{cmd}\", status=status, details=details, fix=fix) def detect_stack_configs(root: Path) -> Iterable[CheckResult]: entries = { \"package.json\": \"npm install\", \"yarn.lock\": \"yarn install\", \"pnpm-lock.yaml\": \"pnpm install\", \"Pipfile\": \"pipenv install --dev\", \"poetry.lock\": \"poetry install\",…", "text": "  yield CheckResult(name=f\"tool:{cmd}\", status=status, details=details, fix=fix)\n\n\ndef detect_stack_configs(root: Path) -> Iterable[CheckResult]:\n    entries = {\n        \"package.json\": \"npm install\",\n        \"yarn.lock\": \"yarn install\",\n        \"pnpm-lock.yaml\": \"pnpm install\",\n        \"Pipfile\": \"pipenv install --dev\",\n        \"poetry.lock\": \"poetry install\",\n        \"go.mod\": \"go mod download\",\n        \"Cargo.toml\": \"cargo fetch\",\n        \"pom.xml\": \"mvn -B verify\",\n        \"build.gradle\": \"./gradlew check\",\n        \"build.gradle.kts\": \"./gradlew check\",\n        \"requirements.txt\": \"pip install -r requirements.txt\",\n    }\n    for rel, tip in entries.items():\n        if (root / rel).exists():\n            yield CheckResult(name=f\"stack:{rel}\", status=\"detected\", details=tip, fix=tip)\n\n\ndef collect(root: Path) -> dict:\n    results = [\n        *detect_tools(),\n        *detect_python_packages(),\n        *detect_stack_configs(root),\n    ]\n    summary = {\n        \"generated_at\": datetime.now(timezone.utc).isoformat(),\n        \"root\": str(root),\n        \"results\": [asdict(r) for r in results],\n    }\n    return summary\n\n\ndef main(argv: list[str] | None = None) -> int:\n    argv = argv or "}
{"id": "scripts/lib/deps_checker.py:155-172", "path": "scripts/lib/deps_checker.py", "start": 5000, "end": 5422, "start_line": 155, "end_line": 172, "weights": {"argv": 0.3877227928362374, "root": 0.20885586486208763, "report": 0.17031172440700307, "results": 0.1638865673045736, "main": 0.1247108141893977, "ow": 0.11014207343677579, "collect": 0.11014207343677579, "sys": 0.10506367481378268, "asdict": 0.08698875027666164, "cwd": 0.08698875027666164, "none": 0.08541653543816766, "path": 0.08353999066242027, "isoformat": 0.0718261087311949, "__name__": 0.0718261087311949, "__main__": 0.0718261087311949, "resolve": 0.07097126714329424, "str": 0.07086128791046593, "utc": 0.06861353017998016, "indent": 0.06651354379603801, "summary": 0.06586159087919798, "return": 0.06478217503376117, "exit": 0.06462046547270624, "ensure_ascii": 0.0634546073608517, "timezone": 0.06289715472867378, "dumps": 0.06235540709469885, "if": 0.05338156917143288, "print": 0.04929461981421414, "false": 0.0487603974275396, "or": 0.04849875027262079, "int": 0.04748637078251651, "else": 0.04676059524438484, "list": 0.04583363174788719, "json": 0.0396889648573595, "def": 0.03569590015008557, "in": 0.032617334470334165}, "norm": 0.6401486012724182, "snippet": "ow(timezone.utc).isoformat(), \"root\": str(root), \"results\": [asdict(r) for r in results], } return summary def main(argv: list[str] | None = None) -> int: argv = argv or sys.argv[1:] root = Path(argv[0]).resolve() if argv else Path.cwd() report = collect(root) print(json.dumps(report, ensure_ascii=False, indent=2))…", "text": "ow(timezone.utc).isoformat(),\n        \"root\": str(root),\n        \"results\": [asdict(r) for r in results],\n    }\n    return summary\n\n\ndef main(argv: list[str] | None = None) -> int:\n    argv = argv or sys.argv[1:]\n    root = Path(argv[0]).resolve() if argv else Path.cwd()\n    report = collect(root)\n    print(json.dumps(report, ensure_ascii=False, indent=2))\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n"}
{"id": "scripts/lib/quality_guard.py:1-36", "path": "scripts/lib/quality_guard.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 36, "weights": {"re": 0.6312667777657649, "compile": 0.38573129417035257, "import": 0.3075251277195503, "ignorecase": 0.22714270099335201, "realness": 0.14490450541517635, "tuple": 0.1366854033870852, "allow": 0.10606273738356187, "pattern": 0.0820019413811496, "str": 0.06823679576563385, "agentcall": 0.06607228832146238, "qa": 0.061657269368777225, "datetime": 0.05856367520834821, "not_implemented": 0.056785675248338004, "notimplemented": 0.056785675248338004, "not_implemented_error": 0.056785675248338004, "notimplementederror": 0.056785675248338004, "stub_keyword": 0.056785675248338004, "bstub": 0.056785675248338004, "fake_keyword": 0.056785675248338004, "bfake": 0.056785675248338004, "mock_keyword": 0.056785675248338004, "bmock": 0.056785675248338004, "plain_pass": 0.056785675248338004, "todo_comment": 0.056785675248338004, "sec": 0.056785675248338004, "realness_patterns": 0.053031368691780933, "pass": 0.053031368691780933, "aws_access_key": 0.053031368691780933, "akia": 0.053031368691780933, "9a": 0.053031368691780933, "aws_secret_key": 0.053031368691780933, "aws": 0.053031368691780933, "secret_patterns": 0.050367645798708886, "sequence": 0.04830150180505879, "16": 0.04830150180505879, "dataclasses": 0.04188347235542967, "asdict": 0.04188347235542967, "20": 0.040195309792522685, "dataclass": 0.038767988683011026, "secrets": 0.03753158689945064, "typing": 0.0364410032359656, "__future__": 0.03594038081679638, "annotations": 0.03594038081679638, "iterable": 0.0341713508467713, "review": 0.03339929891215045, "subprocess": 0.03339929891215045, "argparse": 0.03171113634924347, "pathlib": 0.030552218358928598, "timezone": 0.030283815239731816, "os": 0.02859565267682483, "raise": 0.02859565267682483, "usr": 0.026797911802371524, "env": 0.025293106899614348, "python3": 0.025293106899614348, "sys": 0.025293106899614348, "bin": 0.024551970717451972, "verify": 0.023604944336707356, "path": 0.02011147923354562, "json": 0.019109501597987907}, "norm": 0.9276704142853086, "snippet": "#!/usr/bin/env python3 \"\"\"Realness и secrets-сканирование изменённых строк. Используется в agentcall verify / agentcall review для сигнализации о заглушках и секретах без жёсткой блокировки. \"\"\" from __future__ import annotations import argparse import json import os import re import subprocess import sys from…", "text": "#!/usr/bin/env python3\n\"\"\"Realness и secrets-сканирование изменённых строк.\n\nИспользуется в agentcall verify / agentcall review для сигнализации о заглушках и\nсекретах без жёсткой блокировки.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import Iterable, Sequence\n\n\nREALNESS_PATTERNS: tuple[tuple[str, re.Pattern[str]], ...] = (\n    (\"not_implemented\", re.compile(r\"NotImplemented\")),  # qa:allow-realness\n    (\"not_implemented_error\", re.compile(r\"raise\\s+NotImplementedError\")),  # qa:allow-realness\n    (\"stub_keyword\", re.compile(r\"\\bstub\\b\", re.IGNORECASE)),\n    (\"fake_keyword\", re.compile(r\"\\bfake\\b\", re.IGNORECASE)),\n    (\"mock_keyword\", re.compile(r\"\\bmock\\b\", re.IGNORECASE)),\n    (\"plain_pass\", re.compile(r\"^\\s*pass\\s*(#.*)?$\")),\n    (\"todo_comment\", re.compile(r\"^\\s*(#|//)\\s*TODO\", re.IGNORECASE)),\n)\n\nSECRET_PATTERNS: tuple[tuple[str, re.Pattern[str]], ...] = (\n    (\"aws_access_key\", re.compile(r\"AKIA[0-9A-Z]{16}\")),\n    (\n        \"aws_secret_key\",\n        re.compile(r\"(?i)aws(.{0,20})?(sec"}
{"id": "scripts/lib/quality_guard.py:29-84", "path": "scripts/lib/quality_guard.py", "start": 1000, "end": 2200, "start_line": 29, "end_line": 84, "weights": {"re": 0.4595250808736084, "compile": 0.45380152255335593, "za": 0.44920688774214435, "9a": 0.28075430483884023, "z0": 0.22460344387107217, "20": 0.17023895912127254, "secret": 0.11230172193553609, "16": 0.10228553323424214, "11": 0.09871060074808619, "tuple": 0.07236286061669217, "key": 0.06781773092929365, "gcp_api_key": 0.060126009086475536, "aiza": 0.060126009086475536, "35": 0.060126009086475536, "google_oauth_token": 0.060126009086475536, "ya29": 0.060126009086475536, "slack_token": 0.060126009086475536, "xox": 0.060126009086475536, "abprs": 0.060126009086475536, "stripe_secret_key": 0.060126009086475536, "sk_live_": 0.060126009086475536, "github_token": 0.060126009086475536, "gh": 0.060126009086475536, "pousr": 0.060126009086475536, "36": 0.060126009086475536, "openai_key": 0.060126009086475536, "generic_token": 0.060126009086475536, "private_key": 0.060126009086475536, "begin": 0.060126009086475536, "rsa": 0.060126009086475536, "dsa": 0.060126009086475536, "ec": 0.060126009086475536, "openssh": 0.060126009086475536, "pgp": 0.060126009086475536, "target_suffix": 0.060126009086475536, "aws_access_key": 0.05615086096776804, "akia": 0.05615086096776804, "aws_secret_key": 0.05615086096776804, "aws": 0.05615086096776804, "32": 0.05615086096776804, "sk": 0.05615086096776804, "private": 0.05615086096776804, "services": 0.05615086096776804, "infra": 0.05615086096776804, "terraform": 0.05615086096776804, "secret_patterns": 0.053330448492750586, "access": 0.05114276661712107, "target_prefixes": 0.05114276661712107, "24": 0.04935530037404309, "api": 0.04935530037404309, "token": 0.04935530037404309, "app": 0.04935530037404309, "github": 0.04784401919926604, "40": 0.04653488789902562, "pattern": 0.043412792495902734, "src": 0.041048458605541085, "str": 0.0361253624641591, "lib": 0.03425289801181614, "config": 0.033576497310963675, "scripts": 0.027813882949178196}, "norm": 0.984025106369473, "snippet": "E)), ) SECRET_PATTERNS: tuple[tuple[str, re.Pattern[str]], ...] = ( (\"aws_access_key\", re.compile(r\"AKIA[0-9A-Z]{16}\")), ( \"aws_secret_key\", re.compile(r\"(?i)aws(.{0,20})?(secret|access).{0,20}['\\\"]?[A-Za-z0-9/+=]{40}\"), ), ( \"gcp_api_key\", re.compile(r\"AIza[0-9A-Za-z\\-_]{35}\"), ), ( \"google_oauth_token\",…", "text": "E)),\n)\n\nSECRET_PATTERNS: tuple[tuple[str, re.Pattern[str]], ...] = (\n    (\"aws_access_key\", re.compile(r\"AKIA[0-9A-Z]{16}\")),\n    (\n        \"aws_secret_key\",\n        re.compile(r\"(?i)aws(.{0,20})?(secret|access).{0,20}['\\\"]?[A-Za-z0-9/+=]{40}\"),\n    ),\n    (\n        \"gcp_api_key\",\n        re.compile(r\"AIza[0-9A-Za-z\\-_]{35}\"),\n    ),\n    (\n        \"google_oauth_token\",\n        re.compile(r\"ya29\\.[0-9A-Za-z\\-_]+\"),\n    ),\n    (\n        \"slack_token\",\n        re.compile(r\"xox[abprs]-[0-9]{11}-[0-9]{11}-[0-9A-Za-z]{24}\"),\n    ),\n    (\n        \"stripe_secret_key\",\n        re.compile(r\"sk_live_[0-9a-zA-Z]{16,32}\"),\n    ),\n    (\n        \"github_token\",\n        re.compile(r\"gh[pousr]_[A-Za-z0-9]{36}\"),\n    ),\n    (\n        \"openai_key\",\n        re.compile(r\"sk-[A-Za-z0-9]{20,}\"),\n    ),\n    (\n        \"generic_token\",\n        re.compile(r\"(?i)(api|secret|token|key)[^\\r\\n]{0,8}['\\\"]?[A-Za-z0-9]{20,}\"),\n    ),\n    (\n        \"private_key\",\n        re.compile(r\"-----BEGIN (?:RSA|DSA|EC|OPENSSH|PGP) PRIVATE KEY-----\"),\n    ),\n)\n\nTARGET_PREFIXES = (\n    \"src/\",\n    \"app/\",\n    \"services/\",\n    \"lib/\",\n    \"config/\",\n    \"infra/\",\n    \"terraform/\",\n    \".github/\",\n    \"scripts/\",\n)\n\nTARGET_SUFFIX"}
{"id": "scripts/lib/quality_guard.py:68-155", "path": "scripts/lib/quality_guard.py", "start": 2000, "end": 3200, "start_line": 68, "end_line": 155, "weights": {"agentcontrol": 0.1402659251528555, "build": 0.11926146513588744, "str": 0.1116602112528554, "kts": 0.10989304537900123, "gradle": 0.10538509484740101, "journal": 0.09858767592576034, "1024": 0.09351061676857032, "env": 0.08277744076237423, "reports": 0.0672624756750297, "yaml": 0.06665938551038968, "state": 0.06337617481346494, "pyi": 0.061948009361823285, "java": 0.061948009361823285, "kt": 0.061948009361823285, "cs": 0.061948009361823285, "php": 0.061948009361823285, "swift": 0.061948009361823285, "scala": 0.061948009361823285, "tfvars": 0.061948009361823285, "zsh": 0.061948009361823285, "fish": 0.061948009361823285, "ini": 0.061948009361823285, "dockerfile": 0.061948009361823285, "jenkinsfile": 0.061948009361823285, "cloudbuild": 0.061948009361823285, "subproce": 0.061948009361823285, "private": 0.057852402209215566, "services": 0.057852402209215566, "infra": 0.057852402209215566, "terraform": 0.057852402209215566, "target_suffixes": 0.057852402209215566, "rb": 0.057852402209215566, "target_filenames": 0.057852402209215566, "makefile": 0.057852402209215566, "example": 0.057852402209215566, "skip_dir_prefixes": 0.057852402209215566, "mib": 0.057852402209215566, "tsx": 0.054946522689500614, "jsx": 0.054946522689500614, "tf": 0.054946522689500614, "pom": 0.054946522689500614, "target_prefixes": 0.052692547423700505, "kind": 0.052692547423700505, "sequence": 0.052692547423700505, "app": 0.05085091553689289, "yml": 0.05085091553689289, "dist": 0.05085091553689289, "slots": 0.05085091553689289, "github": 0.04929383796288017, "ts": 0.04929383796288017, "js": 0.04929383796288017, "xml": 0.04929383796288017, "node_modules": 0.04929383796288017, "finding": 0.04929383796288017, "max_file_bytes": 0.04794503601717792, "rs": 0.04675530838428516, "coverage": 0.045691060751377834, "pattern": 0.04472833166244525, "go": 0.04304091666584762, "src": 0.04229235129055749, "dataclass": 0.04229235129055749, "class": 0.04229235129055749, "snippet": 0.04159545359877011, "cmd": 0.04033117942751752}, "norm": 0.5164344735274204, "snippet": ") PRIVATE KEY-----\"), ), ) TARGET_PREFIXES = ( \"src/\", \"app/\", \"services/\", \"lib/\", \"config/\", \"infra/\", \"terraform/\", \".github/\", \"scripts/\", ) TARGET_SUFFIXES = ( \".py\", \".pyi\", \".ts\", \".tsx\", \".js\", \".jsx\", \".go\", \".rs\", \".rb\", \".java\", \".kt\", \".kts\", \".cs\", \".php\", \".swift\", \".m\", \".scala\", \".tf\", \".tfvars\",…", "text": ") PRIVATE KEY-----\"),\n    ),\n)\n\nTARGET_PREFIXES = (\n    \"src/\",\n    \"app/\",\n    \"services/\",\n    \"lib/\",\n    \"config/\",\n    \"infra/\",\n    \"terraform/\",\n    \".github/\",\n    \"scripts/\",\n)\n\nTARGET_SUFFIXES = (\n    \".py\",\n    \".pyi\",\n    \".ts\",\n    \".tsx\",\n    \".js\",\n    \".jsx\",\n    \".go\",\n    \".rs\",\n    \".rb\",\n    \".java\",\n    \".kt\",\n    \".kts\",\n    \".cs\",\n    \".php\",\n    \".swift\",\n    \".m\",\n    \".scala\",\n    \".tf\",\n    \".tfvars\",\n    \".yaml\",\n    \".yml\",\n    \".json\",\n    \".env\",\n    \".sh\",\n    \".bash\",\n    \".zsh\",\n    \".fish\",\n    \".cfg\",\n    \".ini\",\n)\n\nTARGET_FILENAMES = {\n    \"Dockerfile\",\n    \"Jenkinsfile\",\n    \"Makefile\",\n    \".env\",\n    \".env.example\",\n    \"cloudbuild.yaml\",\n    \"build.gradle\",\n    \"build.gradle.kts\",\n    \"pom.xml\",\n}\n\nSKIP_DIR_PREFIXES = (\n    \".git/\",\n    \"dist/\",\n    \"build/\",\n    \"node_modules/\",\n    \"coverage/\",\n    \"reports/\",\n    \"journal/\",\n    \"state/\",\n    \"agentcontrol/reports/\",\n    \"agentcontrol/journal/\",\n    \"agentcontrol/state/\",\n)\n\nMAX_FILE_BYTES = 2 * 1024 * 1024  # 2 MiB\n\n\n@dataclass(slots=True)\nclass Finding:\n    kind: str\n    file: str\n    line: int\n    snippet: str\n    pattern: str\n\n\ndef run(cmd: Sequence[str]) -> str:\n    result = subproce"}
{"id": "scripts/lib/quality_guard.py:142-181", "path": "scripts/lib/quality_guard.py", "start": 3000, "end": 4200, "start_line": 142, "end_line": 181, "weights": {"line": 0.1954743014208494, "base": 0.13777941848296615, "str": 0.1325462939332456, "candidates": 0.10865267564357689, "rel": 0.09990163014483952, "result": 0.09669825049153162, "args": 0.09330881061652778, "decode": 0.08824248815569072, "cmd": 0.08617525388469571, "run": 0.08443682904373595, "target": 0.08266765108977969, "none": 0.0798859683954086, "include_untracked": 0.0782691474282095, "subprocess": 0.07785160321968884, "pipe": 0.07243511709571793, "is": 0.06881468951771362, "strip": 0.0666546148725989, "1024": 0.06660108676322635, "if": 0.059910250293118916, "ignore": 0.05832246597324704, "splitlines": 0.05832246597324704, "not": 0.05818644784596241, "git": 0.056627746035745115, "output": 0.056627746035745115, "stdout": 0.05374039789959906, "stderr": 0.05374039789959906, "set": 0.04409784160700558, "mib": 0.041204228911599576, "porcelain": 0.041204228911599576, "status": 0.037653145519337856, "kind": 0.037529224424074456, "sequence": 0.037529224424074456, "runtimeerror": 0.037529224424074456, "expanded": 0.037529224424074456, "in": 0.0366065048731808, "slots": 0.03621755854785896, "changed_files": 0.03621755854785896, "only": 0.03621755854785896, "append": 0.03590311895099452, "finding": 0.035108560851259976, "failed": 0.035108560851259976, "utf": 0.03209899650713468, "pattern": 0.03185686931354014, "returncode": 0.03185686931354014, "add": 0.03185686931354014, "path": 0.03125237060752413, "startswith": 0.030655041366323122, "dataclass": 0.030121890487519364, "class": 0.030121890487519364, "snippet": 0.02962553889408806, "diff": 0.02916123298662352, "elif": 0.02687019894979953, "def": 0.026707723853301436, "file": 0.024882764585568175, "check": 0.024882764585568175, "bool": 0.022938229839237875, "raise": 0.022218204957532964, "join": 0.02204892080350279, "continue": 0.021721853364101658, "name": 0.02041018748788616, "command": 0.019076351348811606, "false": 0.018241299757065173, "int": 0.017764685472596103, "list": 0.017146394610720386}, "norm": 0.49447703534745696, "snippet": "2 * 1024 * 1024 # 2 MiB @dataclass(slots=True) class Finding: kind: str file: str line: int snippet: str pattern: str def run(cmd: Sequence[str]) -> str: result = subprocess.run(cmd, check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE) if result.returncode != 0: raise RuntimeError( f\"Command {' '.join(cmd)}…", "text": "2 * 1024 * 1024  # 2 MiB\n\n\n@dataclass(slots=True)\nclass Finding:\n    kind: str\n    file: str\n    line: int\n    snippet: str\n    pattern: str\n\n\ndef run(cmd: Sequence[str]) -> str:\n    result = subprocess.run(cmd, check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if result.returncode != 0:\n        raise RuntimeError(\n            f\"Command {' '.join(cmd)} failed: {result.stderr.decode('utf-8', 'ignore')}\"\n        )\n    return result.stdout.decode(\"utf-8\", \"ignore\")\n\n\ndef changed_files(base: str | None, target: str | None, include_untracked: bool) -> list[str]:\n    args = [\"git\", \"diff\", \"--name-only\"]\n    if base is not None and target is not None:\n        args.append(f\"{base}..{target}\")\n    elif base is not None:\n        args.append(base)\n    output = run(args)\n    candidates = {line.strip() for line in output.splitlines() if line.strip()}\n    if include_untracked:\n        status = run([\"git\", \"status\", \"--porcelain\"])\n        for line in status.splitlines():\n            if line.startswith(\"?? \"):\n                candidates.add(line[3:].strip())\n\n    expanded: set[str] = set()\n    for rel in candidates:\n        if not rel:\n            continue\n        path = Path(rel)"}
{"id": "scripts/lib/quality_guard.py:174-207", "path": "scripts/lib/quality_guard.py", "start": 4000, "end": 5200, "start_line": 174, "end_line": 207, "weights": {"extra_paths": 0.26377862050840883, "rel": 0.2488588994647436, "line": 0.20868608216204354, "candidate": 0.18671369710075056, "extra": 0.1847544457649142, "if": 0.13431491597973433, "continue": 0.1298639835531239, "normalized": 0.11698291927442066, "path": 0.1167763310334907, "candidates": 0.10826323953015905, "is_dir": 0.10494817114677714, "strip": 0.099623564164422, "prefix": 0.09335684855037528, "startswith": 0.09163549999825621, "in": 0.09118824690631057, "item": 0.08855806250060733, "ls": 0.06594465512710221, "others": 0.06594465512710221, "standard": 0.06594465512710221, "cont": 0.06594465512710221, "set": 0.06590967724057824, "except": 0.06541527899918687, "not": 0.06522513105313528, "try": 0.06493199177656195, "skip_dir_prefixes": 0.06158481525497141, "exclude": 0.05849145963721033, "expanded": 0.056092066612326345, "runtimeerror": 0.056092066612326345, "rglob": 0.056092066612326345, "st_size": 0.056092066612326345, "stat": 0.05247408557338857, "max_file_bytes": 0.05103826414731843, "is_file": 0.048638871122434466, "add": 0.0476140304793772, "oserror": 0.04502089008349668, "files": 0.043585068657426555, "splitlines": 0.043585068657426555, "any": 0.042933191003486394, "git": 0.04231858440305684, "str": 0.03962136528327127, "replace": 0.036825835760411776, "run": 0.03155032052978306, "exists": 0.030911359019344335, "or": 0.027117580797594416}, "norm": 0.6719856998903444, "snippet": "if line.startswith(\"?? \"): candidates.add(line[3:].strip()) expanded: set[str] = set() for rel in candidates: if not rel: continue path = Path(rel) normalized = rel.replace(\"\\\\\", \"/\") if any(normalized.startswith(prefix) for prefix in SKIP_DIR_PREFIXES): continue if path.is_dir(): try: extra = run([ \"git\", \"ls-files\",…", "text": "if line.startswith(\"?? \"):\n                candidates.add(line[3:].strip())\n\n    expanded: set[str] = set()\n    for rel in candidates:\n        if not rel:\n            continue\n        path = Path(rel)\n        normalized = rel.replace(\"\\\\\", \"/\")\n        if any(normalized.startswith(prefix) for prefix in SKIP_DIR_PREFIXES):\n            continue\n        if path.is_dir():\n            try:\n                extra = run([\n                    \"git\",\n                    \"ls-files\",\n                    \"--others\",\n                    \"--exclude-standard\",\n                    rel,\n                ])\n            except RuntimeError:\n                extra = \"\"\n            extra_paths = [line.strip() for line in extra.splitlines() if line.strip()]\n            if not extra_paths:\n                extra_paths = [str(p) for p in path.rglob(\"*\") if p.is_file()]\n            for item in extra_paths:\n                candidate = Path(item)\n                if not candidate.exists() or candidate.is_dir():\n                    continue\n                try:\n                    if candidate.stat().st_size > MAX_FILE_BYTES:\n                        continue\n                except OSError:\n                    cont"}
{"id": "scripts/lib/quality_guard.py:202-238", "path": "scripts/lib/quality_guard.py", "start": 5000, "end": 6200, "start_line": 202, "end_line": 238, "weights": {"base": 0.1773272145290027, "continue": 0.16774097875611835, "hunk": 0.1590941060753428, "args": 0.1501148689316824, "expanded": 0.14490450541517635, "split": 0.11630396604903308, "line": 0.10782114245038915, "target": 0.10639632871740164, "none": 0.10281620006446106, "st_size": 0.09660300361011757, "stat": 0.0903720362652803, "is": 0.08856705410150179, "max_file_bytes": 0.08789923269815951, "set": 0.08513333310241356, "except": 0.08449473537394969, "try": 0.08387048937805917, "add": 0.0820019413811496, "path": 0.08044591693418247, "oserror": 0.07753597736602205, "output": 0.0728820064719312, "int": 0.06859142446363495, "if": 0.0642555925211692, "star": 0.056785675248338004, "not": 0.056166085073533156, "changed_line_numbers": 0.053031368691780933, "numbers": 0.053031368691780933, "example": 0.053031368691780933, "indexerror": 0.053031368691780933, "str": 0.05117759682422539, "unified": 0.04830150180505879, "11": 0.04661333924215181, "append": 0.04620864383507627, "length": 0.04518601813264015, "rel": 0.042859032685594725, "extend": 0.04188347235542967, "candidate": 0.040195309792522685, "start_line": 0.040195309792522685, "startswith": 0.039454173610360306, "sorted": 0.038767988683011026, "item": 0.03812916579887259, "diff": 0.03753158689945064, "splitlines": 0.03753158689945064, "git": 0.0364410032359656, "start": 0.0364410032359656, "elif": 0.034582941240945686, "in": 0.031409285045506975, "10": 0.031113557449821517, "run": 0.027168331567313183, "exists": 0.02661811471110206, "else": 0.02251436067322233, "def": 0.01718691488707824, "return": 0.015595708804423986}, "norm": 0.5609762324689405, "snippet": "continue try: if candidate.stat().st_size > MAX_FILE_BYTES: continue except OSError: continue expanded.add(item) else: try: if path.exists() and path.stat().st_size > MAX_FILE_BYTES: continue except OSError: continue expanded.add(rel) return sorted(expanded) def changed_line_numbers(path: str, base: str | None,…", "text": "               continue\n                try:\n                    if candidate.stat().st_size > MAX_FILE_BYTES:\n                        continue\n                except OSError:\n                    continue\n                expanded.add(item)\n        else:\n            try:\n                if path.exists() and path.stat().st_size > MAX_FILE_BYTES:\n                    continue\n            except OSError:\n                continue\n            expanded.add(rel)\n\n    return sorted(expanded)\n\n\ndef changed_line_numbers(path: str, base: str | None, target: str | None) -> set[int]:\n    args = [\"git\", \"diff\", \"--unified=0\"]\n    if base is not None and target is not None:\n        args.append(f\"{base}..{target}\")\n    elif base is not None:\n        args.append(base)\n    args.extend([\"--\", path])\n    output = run(args)\n    numbers: set[int] = set()\n    for line in output.splitlines():\n        if line.startswith(\"@@\"):\n            # Example: @@ -10,0 +11,5 @@\n            try:\n                hunk = line.split(\"+\")[1].split(\" \")[0]\n            except IndexError:\n                continue\n            if \",\" in hunk:\n                start, length = hunk.split(\",\", 1)\n                start_line = int(star"}
{"id": "scripts/lib/quality_guard.py:233-275", "path": "scripts/lib/quality_guard.py", "start": 6000, "end": 7200, "start_line": 233, "end_line": 275, "weights": {"path": 0.24341824865429354, "length_int": 0.15860826534880615, "hunk": 0.14812209875980192, "return": 0.11616114143984763, "start_line": 0.11226965838601163, "idx": 0.11226965838601163, "split": 0.1082830028732377, "offset": 0.10573884356587077, "is_binary": 0.10573884356587077, "numbers": 0.09874806583986795, "read_lines": 0.08994072749907499, "int": 0.08514797519623649, "length": 0.08413948204008856, "chunk": 0.08413948204008856, "except": 0.07866751224471179, "start": 0.06785566119800492, "rows": 0.06692346772782776, "or": 0.06522245726317967, "fh": 0.06519789085615564, "if": 0.05982417234729547, "in": 0.058486254912323336, "lines": 0.0554324516333832, "continue": 0.052057545131209144, "try": 0.052057545131209144, "indexerror": 0.049374032919933974, "rb": 0.049374032919933974, "def": 0.048004831236321974, "range": 0.046894015053970346, "st_size": 0.044970363749537494, "scan_realness": 0.044970363749537494, "read": 0.043398626190968924, "stat": 0.04206974102004428, "exception": 0.04206974102004428, "finding": 0.04206974102004428, "max_file_bytes": 0.04091860832500529, "1024": 0.03990323732796751, "is_file": 0.03899495702057246, "errors": 0.03899495702057246, "add": 0.038173317539500685, "oserror": 0.036094334291079236, "sorted": 0.036094334291079236, "ignore": 0.03494320159604025, "splitlines": 0.03494320159604025, "not": 0.03486170797667575, "iterable": 0.031814705960787074, "open": 0.030757789391025588, "read_text": 0.027952423870037414, "bool": 0.02748632713494883, "len": 0.027044143562642363, "set": 0.026420689583507656, "as": 0.025839299231822026, "exists": 0.02478238266206054, "false": 0.02185810919165568, "encoding": 0.021740819087726557, "else": 0.020961646144034583, "list": 0.020546110783535635, "utf": 0.01923172635556776, "str": 0.015882702462690638}, "norm": 0.5485815788201563, "snippet": "split(\"+\")[1].split(\" \")[0] except IndexError: continue if \",\" in hunk: start, length = hunk.split(\",\", 1) start_line = int(start) length_int = int(length) else: start_line = int(hunk) length_int = 1 for offset in range(length_int or 1): numbers.add(start_line + offset) return numbers def is_binary(path: Path) ->…", "text": "split(\"+\")[1].split(\" \")[0]\n            except IndexError:\n                continue\n            if \",\" in hunk:\n                start, length = hunk.split(\",\", 1)\n                start_line = int(start)\n                length_int = int(length)\n            else:\n                start_line = int(hunk)\n                length_int = 1\n            for offset in range(length_int or 1):\n                numbers.add(start_line + offset)\n    return numbers\n\n\ndef is_binary(path: Path) -> bool:\n    try:\n        with path.open(\"rb\") as fh:\n            chunk = fh.read(1024)\n            return b\"\\0\" in chunk\n    except OSError:\n        return False\n\n\ndef read_lines(path: Path) -> list[str]:\n    try:\n        if not path.exists() or not path.is_file():\n            return []\n        if path.stat().st_size > MAX_FILE_BYTES:\n            return []\n        if is_binary(path):\n            return []\n        return path.read_text(encoding=\"utf-8\", errors=\"ignore\").splitlines()\n    except Exception:\n        return []\n\n\ndef scan_realness(path: Path, lines: set[int]) -> Iterable[Finding]:\n    rows = read_lines(path)\n    for idx in sorted(lines):\n        if idx <= 0 or idx > len(rows):\n            continue\n    "}
{"id": "scripts/lib/quality_guard.py:267-302", "path": "scripts/lib/quality_guard.py", "start": 7000, "end": 8200, "start_line": 267, "end_line": 302, "weights": {"idx": 0.319198048352386, "kind": 0.23014244977704484, "pattern": 0.19535756623156234, "rows": 0.17124534389179455, "text": 0.16689241310639985, "path": 0.1597088056781564, "finding": 0.14353205759779813, "snippet": 0.12111617371406588, "match": 0.1076490431983486, "lines": 0.0945612410216537, "continue": 0.08880404757676853, "in": 0.08729933637648261, "allow": 0.08422629145165207, "secret": 0.08422629145165207, "if": 0.08164239990925028, "normalized": 0.07999567273912588, "read_lines": 0.07671414992568161, "realness": 0.07671414992568161, "search": 0.07671414992568161, "yield": 0.06807022838300339, "prefix": 0.06383960967047721, "sorted": 0.061572687908311635, "any": 0.05871745240182697, "line": 0.05708178129726485, "iterable": 0.05427214546251913, "file": 0.05086329819697024, "qa": 0.04896312567520544, "len": 0.04613412725391933, "norma": 0.04509450681485665, "set": 0.04507058811304247, "rn": 0.042113145725826036, "realness_patterns": 0.042113145725826036, "scan_secrets": 0.042113145725826036, "should_inspect": 0.042113145725826036, "def": 0.04094529723098051, "str": 0.04064103277217899, "secret_patterns": 0.03999783636956294, "scan_realness": 0.038357074962840805, "group": 0.038357074962840805, "target_prefixes": 0.038357074962840805, "or": 0.03708727962023942, "int": 0.03631310706898321, "startswith": 0.03133125551410966, "replace": 0.025182372983222755, "bool": 0.02344422020333871, "strip": 0.022708312419831483, "true": 0.017186498070943457, "return": 0.012384827579983753}, "norm": 0.66896036931653, "snippet": "rn [] def scan_realness(path: Path, lines: set[int]) -> Iterable[Finding]: rows = read_lines(path) for idx in sorted(lines): if idx <= 0 or idx > len(rows): continue text = rows[idx - 1] if \"qa:allow-realness\" in text: continue for kind, pattern in REALNESS_PATTERNS: if pattern.search(text): yield…", "text": "rn []\n\n\ndef scan_realness(path: Path, lines: set[int]) -> Iterable[Finding]:\n    rows = read_lines(path)\n    for idx in sorted(lines):\n        if idx <= 0 or idx > len(rows):\n            continue\n        text = rows[idx - 1]\n        if \"qa:allow-realness\" in text:\n            continue\n        for kind, pattern in REALNESS_PATTERNS:\n            if pattern.search(text):\n                yield Finding(kind=\"realness\", file=str(path), line=idx, snippet=text.strip(), pattern=kind)\n\n\ndef scan_secrets(path: Path, lines: set[int]) -> Iterable[Finding]:\n    rows = read_lines(path)\n    for idx in sorted(lines):\n        if idx <= 0 or idx > len(rows):\n            continue\n        text = rows[idx - 1]\n        if \"qa:allow-secret\" in text:\n            continue\n        for kind, pattern in SECRET_PATTERNS:\n            match = pattern.search(text)\n            if match:\n                snippet = match.group(0)\n                yield Finding(kind=\"secret\", file=str(path), line=idx, snippet=snippet, pattern=kind)\n\n\ndef should_inspect(path: str) -> bool:\n    normalized = path.replace(\"\\\\\", \"/\")\n    if any(normalized.startswith(prefix) for prefix in TARGET_PREFIXES):\n        return True\n    if any(norma"}
{"id": "scripts/lib/quality_guard.py:295-334", "path": "scripts/lib/quality_guard.py", "start": 8000, "end": 9200, "start_line": 295, "end_line": 334, "weights": {"rel": 0.1978109200873603, "normalized": 0.18597284602600206, "path": 0.1485155389554138, "lines": 0.10991733999098208, "files": 0.10393362526001716, "base": 0.09821199573913997, "target": 0.09821199573913997, "should_inspect": 0.09790406527713404, "include_untracked": 0.09298642301300103, "suffix": 0.08342034116795106, "finding": 0.08342034116795106, "findings": 0.07912436803494412, "errors": 0.07732333357925479, "prefix": 0.07420672577081112, "in": 0.07248296548963148, "exc": 0.0715716714147896, "any": 0.06825276518502965, "rows": 0.06635147227716257, "str": 0.06298781147596971, "true": 0.05993240352944385, "if": 0.05931285463492542, "return": 0.0575841555855655, "none": 0.05694435695877843, "bool": 0.0545028025240011, "diff_failed": 0.05241754638308124, "continue": 0.05161260884803642, "rn": 0.04895203263856702, "endswith": 0.04895203263856702, "target_suffixes": 0.04895203263856702, "target_filenames": 0.04895203263856702, "build_report": 0.04895203263856702, "json_path": 0.04895203263856702, "changed_line_numbers": 0.04895203263856702, "range": 0.046493211506500515, "kind": 0.04458600166620812, "target_prefixes": 0.04458600166620812, "runtimeerror": 0.04458600166620812, "unified": 0.04458600166620812, "read_lines": 0.04458600166620812, "scan_realness": 0.04458600166620812, "changed_files": 0.04302769776198629, "append": 0.042654132770839646, "list": 0.04074100599812195, "new": 0.038661666789627396, "asdict": 0.038661666789627396, "dict": 0.03796290463918563, "startswith": 0.03641923717879414, "diff": 0.03464454175333906, "not": 0.03456374466063579, "git": 0.03363784914089133, "def": 0.03172968902229829, "replace": 0.02927181816853244, "len": 0.026812997036465936, "set": 0.026194871723819558, "except": 0.025998380115061448, "try": 0.02580630442401821, "as": 0.025618450520438936, "name": 0.02424800051979638, "false": 0.021671287745573156}, "norm": 0.5339474205745975, "snippet": "rn=kind) def should_inspect(path: str) -> bool: normalized = path.replace(\"\\\\\", \"/\") if any(normalized.startswith(prefix) for prefix in TARGET_PREFIXES): return True if any(normalized.endswith(suffix) for suffix in TARGET_SUFFIXES): return True if Path(normalized).name in TARGET_FILENAMES: return True return False def…", "text": "rn=kind)\n\n\ndef should_inspect(path: str) -> bool:\n    normalized = path.replace(\"\\\\\", \"/\")\n    if any(normalized.startswith(prefix) for prefix in TARGET_PREFIXES):\n        return True\n    if any(normalized.endswith(suffix) for suffix in TARGET_SUFFIXES):\n        return True\n    if Path(normalized).name in TARGET_FILENAMES:\n        return True\n    return False\n\n\ndef build_report(\n    base: str | None,\n    target: str | None,\n    include_untracked: bool,\n    json_path: Path | None,\n) -> dict:\n    files = changed_files(base, target, include_untracked)\n    findings: list[dict] = []\n    errors: list[str] = []\n\n    for rel in files:\n        if not should_inspect(rel):\n            continue\n        path = Path(rel)\n        try:\n            lines = changed_line_numbers(rel, base, target)\n        except RuntimeError as exc:\n            errors.append(f\"diff_failed:{rel}:{exc}\")\n            continue\n        if not lines:\n            # for new files git diff --unified=0 может не дать строк; сканируем весь файл\n            rows = read_lines(path)\n            lines = set(range(1, len(rows) + 1))\n        for finding in scan_realness(path, lines):\n            findings.append(asdict(finding))\n      "}
{"id": "scripts/lib/quality_guard.py:329-362", "path": "scripts/lib/quality_guard.py", "start": 9000, "end": 10200, "start_line": 329, "end_line": 362, "weights": {"finding": 0.18951805663398585, "findings": 0.1797582730114264, "json_path": 0.16681712093336915, "base": 0.14874826539131877, "target": 0.14874826539131877, "parser": 0.1450468991853256, "report": 0.12897392722083725, "add_argument": 0.1115611990434891, "help": 0.10625086243783995, "lines": 0.0936431707204726, "asdict": 0.08783330125022144, "errors": 0.08783330125022144, "none": 0.08624582218999452, "dest": 0.08129985976243088, "rows": 0.07537011899444679, "default": 0.06650102380035523, "path": 0.0632632938996969, "files_scanned": 0.059542261425441785, "scanning": 0.059542261425441785, "scan_secrets": 0.055605706977789715, "range": 0.05281267714816077, "helper": 0.05281267714816077, "read_lines": 0.050646234902391736, "scan_realness": 0.050646234902391736, "sequence": 0.050646234902391736, "realness": 0.050646234902391736, "untracked": 0.050646234902391736, "append": 0.04845178188532269, "include": 0.047379514158496464, "true": 0.04538570364365651, "parent": 0.04064992988121544, "argumentparser": 0.04064992988121544, "store_true": 0.04064992988121544, "files": 0.03935350859359873, "description": 0.03935350859359873, "secrets": 0.03935350859359873, "exist_ok": 0.03718706634782969, "isoformat": 0.0362617247963314, "generated_at": 0.035416954145946644, "utc": 0.03463984047921328, "action": 0.03463984047921328, "write_text": 0.034273429527923505, "now": 0.03357965317858229, "indent": 0.03357965317858229, "argparse": 0.033250511900177616, "in": 0.032934007620531586, "argv": 0.03262392431631771, "mkdir": 0.03232517034867932, "parents": 0.032035335754993094, "ensure_ascii": 0.032035335754993094, "timezone": 0.0317539033581654, "dumps": 0.03148039969829456, "main": 0.03148039969829456, "datetime": 0.030703286031561198, "len": 0.03045748207054868, "set": 0.029755339725115414, "false": 0.024616899672155912, "encoding": 0.02448480596287651, "int": 0.023973701754280177, "utf": 0.021659031623746213, "json": 0.020037147306628096, "def": 0.01802123114373252, "str": 0.01788731539487489, "return": 0.016352782047357187}, "norm": 0.5695213160227262, "snippet": "ем весь файл rows = read_lines(path) lines = set(range(1, len(rows) + 1)) for finding in scan_realness(path, lines): findings.append(asdict(finding)) for finding in scan_secrets(path, lines): findings.append(asdict(finding)) report = { \"generated_at\": datetime.now(timezone.utc).isoformat(), \"base\": base, \"target\":…", "text": "ем весь файл\n            rows = read_lines(path)\n            lines = set(range(1, len(rows) + 1))\n        for finding in scan_realness(path, lines):\n            findings.append(asdict(finding))\n        for finding in scan_secrets(path, lines):\n            findings.append(asdict(finding))\n\n    report = {\n        \"generated_at\": datetime.now(timezone.utc).isoformat(),\n        \"base\": base,\n        \"target\": target,\n        \"files_scanned\": files,\n        \"findings\": findings,\n        \"errors\": errors,\n    }\n\n    if json_path:\n        json_path.parent.mkdir(parents=True, exist_ok=True)\n        json_path.write_text(json.dumps(report, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n\n    return report\n\n\ndef main(argv: Sequence[str] | None = None) -> int:\n    parser = argparse.ArgumentParser(description=\"Realness & secrets scanning helper\")\n    parser.add_argument(\"--base\", dest=\"base\", help=\"Базовый ревизионный указатель\", default=None)\n    parser.add_argument(\"--target\", dest=\"target\", help=\"Целевой ревизионный указатель\", default=None)\n    parser.add_argument(\n        \"--include-untracked\",\n        action=\"store_true\",\n        help=\"Добавлять непроиндексированные файлы\",\n    )\n"}
{"id": "scripts/lib/quality_guard.py:356-377", "path": "scripts/lib/quality_guard.py", "start": 10000, "end": 10706, "start_line": 356, "end_line": 377, "weights": {"args": 0.277926957336372, "output": 0.22489304854195916, "parser": 0.16006961374380577, "help": 0.1563405547299645, "report": 0.1265172809880594, "exc": 0.11962693650757689, "add_argument": 0.10943622382361311, "default": 0.09785150644909414, "none": 0.09517842520252967, "dumps": 0.09264231911212399, "json": 0.08844969311068689, "build_report": 0.08181982598160487, "sys": 0.07804730129023855, "include_untracked": 0.07771008208943657, "error": 0.07771008208943657, "untracked": 0.07452231707066213, "runtimeerror": 0.07452231707066213, "print": 0.07323772086683242, "include": 0.06971557083321624, "pragma": 0.06612536471491758, "cover": 0.062015620822749286, "store_true": 0.05981346825378844, "dest": 0.05981346825378844, "parse_args": 0.05882785580397486, "no": 0.057039810904631914, "base": 0.054718111911806554, "target": 0.054718111911806554, "stdout": 0.05335653791460192, "__name__": 0.05335653791460192, "__main__": 0.05335653791460192, "action": 0.050970050990842404, "file": 0.049410061105628234, "return": 0.048123901453651155, "argv": 0.048003774351153196, "exit": 0.048003774351153196, "ensure_ascii": 0.04713770832520413, "main": 0.046321159556061996, "except": 0.043454435335174124, "try": 0.043133394537287574, "as": 0.042819410155590786, "if": 0.03965487995592156, "false": 0.036222009517600844, "else": 0.03473644218154302, "path": 0.031029139388898955, "str": 0.026319906938173057}, "norm": 0.6047234849801711, "snippet": "t\", help=\"Целевой ревизионный указатель\", default=None) parser.add_argument( \"--include-untracked\", action=\"store_true\", help=\"Добавлять непроиндексированные файлы\", ) parser.add_argument(\"--output\", dest=\"output\", help=\"Путь к JSON-отчёту\", default=None) args = parser.parse_args(argv) try: report =…", "text": "t\", help=\"Целевой ревизионный указатель\", default=None)\n    parser.add_argument(\n        \"--include-untracked\",\n        action=\"store_true\",\n        help=\"Добавлять непроиндексированные файлы\",\n    )\n    parser.add_argument(\"--output\", dest=\"output\", help=\"Путь к JSON-отчёту\", default=None)\n    args = parser.parse_args(argv)\n\n    try:\n        report = build_report(args.base, args.target, args.include_untracked, Path(args.output) if args.output else None)\n    except RuntimeError as exc:\n        print(json.dumps({\"error\": str(exc)}), file=sys.stdout)\n        return 2\n\n    print(json.dumps(report, ensure_ascii=False))\n    return 0\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    sys.exit(main())\n"}
{"id": "scripts/lib/progress_utils.py:1-49", "path": "scripts/lib/progress_utils.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 49, "weights": {"phase": 0.3371723073858213, "weight": 0.20258493960956694, "float": 0.19104991987787792, "numeric": 0.16681712093336915, "exc": 0.16259971952486177, "valueerror": 0.13481870475856983, "status_weights": 0.11908452285088357, "import": 0.08794187235757661, "mapping": 0.08273884951298861, "iterable": 0.0716603085718699, "str": 0.07154926157949956, "return": 0.06541112818942875, "datetime": 0.061406572063122396, "raise": 0.059967582312564695, "at_risk": 0.059542261425441785, "keyerror": 0.059542261425441785, "typeerror": 0.059542261425441785, "except": 0.05906428103810075, "try": 0.05862791490505107, "as": 0.05820114001730786, "feasibility": 0.055605706977789715, "beta": 0.055605706977789715, "scaling": 0.055605706977789715, "optimization": 0.055605706977789715, "sustain": 0.055605706977789715, "innovate": 0.055605706977789715, "_normalise_weight": 0.055605706977789715, "status_key": 0.055605706977789715, "weight_key": 0.055605706977789715, "def": 0.05406369343119757, "75": 0.05281267714816077, "ga": 0.05281267714816077, "status": 0.05081346822512584, "phase_order": 0.047379514158496464, "status_score": 0.04608309287087974, "blocked": 0.0449395682528566, "weighted_status_average": 0.0449395682528566, "dict": 0.04312291109499726, "none": 0.04312291109499726, "ready": 0.042146538423227665, "foundation": 0.03998009617745864, "ops": 0.03998009617745864, "backlog": 0.03935350859359873, "typing": 0.03820998397557558, "build": 0.03820998397557558, "__future__": 0.037685059497223394, "annotations": 0.037685059497223394, "core": 0.03718706634782969, "tuple": 0.03583015428593495, "done": 0.03502062410206067, "review": 0.03502062410206067, "in_progress": 0.034273429527923505, "items": 0.03357965317858229, "timezone": 0.0317539033581654, "is": 0.03095547521994237, "planned": 0.027190761326653407, "if": 0.02694991841664572, "sdk": 0.02516401556100185, "int": 0.023973701754280177}, "norm": 0.6408278787568644, "snippet": "\"\"\"Утилиты пересчёта прогресса для SDK.\"\"\" from __future__ import annotations from datetime import datetime, timezone from typing import Dict, Iterable, Mapping STATUS_WEIGHTS: Mapping[str, float] = { \"done\": 1.0, \"review\": 0.9, \"ready\": 0.75, \"in_progress\": 0.5, \"at_risk\": 0.4, \"blocked\": 0.3, \"planned\": 0.0,…", "text": "\"\"\"Утилиты пересчёта прогресса для SDK.\"\"\"\nfrom __future__ import annotations\n\nfrom datetime import datetime, timezone\nfrom typing import Dict, Iterable, Mapping\n\nSTATUS_WEIGHTS: Mapping[str, float] = {\n    \"done\": 1.0,\n    \"review\": 0.9,\n    \"ready\": 0.75,\n    \"in_progress\": 0.5,\n    \"at_risk\": 0.4,\n    \"blocked\": 0.3,\n    \"planned\": 0.0,\n    \"backlog\": 0.0,\n}\n\nPHASE_ORDER: tuple[str, ...] = (\n    \"Phase 0 – Feasibility\",\n    \"Phase 1 – Foundation\",\n    \"Phase 2 – Core Build\",\n    \"Phase 3 – Beta\",\n    \"Phase 4 – GA\",\n    \"Phase 5 – Ops & Scaling\",\n    \"Phase 6 – Optimization\",\n    \"Phase 7 – Sustain & Innovate\",\n)\n\n\ndef status_score(status: str) -> float:\n    try:\n        return STATUS_WEIGHTS[status]\n    except KeyError as exc:\n        raise ValueError(f\"Неизвестный статус '{status}'\") from exc\n\n\ndef _normalise_weight(weight: float | int | None) -> float:\n    if weight is None:\n        return 1.0\n    try:\n        numeric = float(weight)\n    except (TypeError, ValueError) as exc:\n        raise ValueError(f\"Вес '{weight}' нечисловой\") from exc\n    if numeric <= 0:\n        return 1.0\n    return numeric\n\n\ndef weighted_status_average(items: Iterable[dict], status_key: str, weight_key"}
{"id": "scripts/lib/progress_utils.py:43-79", "path": "scripts/lib/progress_utils.py", "start": 1000, "end": 2200, "start_line": 43, "end_line": 79, "weights": {"total_weight": 0.41278470765494346, "weight": 0.3289723906722923, "weight_key": 0.3095885307412076, "accumulated": 0.3095885307412076, "item": 0.22259188682585085, "items": 0.1246379919781613, "none": 0.1200448606158032, "value_key": 0.11050185453730639, "numeric": 0.10319617691373587, "status_key": 0.10319617691373587, "_normalise_weight": 0.10319617691373587, "value": 0.09347849398362099, "return": 0.09104521896636707, "int": 0.08898346957444535, "if": 0.08752653683964669, "round": 0.07303443937190394, "get": 0.06868537591179551, "iterable": 0.06649560164777119, "str": 0.06639255804223834, "dict": 0.0600224303079016, "is": 0.057448899957730885, "continue": 0.05440247959657892, "def": 0.05016721102174188, "status": 0.04715123628097263, "weighted_numeric_average": 0.04396477439932556, "else": 0.04381172887762183, "status_score": 0.04276178888018571, "compute_phase_progress": 0.04276178888018571, "valueerror": 0.041700680450848925, "weighted_status_average": 0.041700680450848925, "exc": 0.03772020520509181, "float": 0.035456111256615186, "100": 0.03450691742185999, "in": 0.030560385449682464, "raise": 0.02782279719907281, "tasks": 0.024314105606624854, "list": 0.021471611269280485}, "norm": 0.8232038033894038, "snippet": "raise ValueError(f\"Вес '{weight}' нечисловой\") from exc if numeric <= 0: return 1.0 return numeric def weighted_status_average(items: Iterable[dict], status_key: str, weight_key: str | None = None) -> int: total_weight = 0.0 accumulated = 0.0 for item in items: status = item.get(status_key) if status is None: continue…", "text": "     raise ValueError(f\"Вес '{weight}' нечисловой\") from exc\n    if numeric <= 0:\n        return 1.0\n    return numeric\n\n\ndef weighted_status_average(items: Iterable[dict], status_key: str, weight_key: str | None = None) -> int:\n    total_weight = 0.0\n    accumulated = 0.0\n    for item in items:\n        status = item.get(status_key)\n        if status is None:\n            continue\n        weight = _normalise_weight(item.get(weight_key)) if weight_key else 1.0\n        total_weight += weight\n        accumulated += status_score(status) * weight\n    if total_weight == 0:\n        return 0\n    return int(round(accumulated / total_weight * 100))\n\n\ndef weighted_numeric_average(items: Iterable[dict], value_key: str, weight_key: str | None = None) -> int:\n    total_weight = 0.0\n    accumulated = 0.0\n    for item in items:\n        value = item.get(value_key)\n        if value is None:\n            continue\n        weight = _normalise_weight(item.get(weight_key)) if weight_key else 1.0\n        total_weight += weight\n        accumulated += float(value) * weight\n    if total_weight == 0:\n        return 0\n    return int(round(accumulated / total_weight))\n\n\ndef compute_phase_progress(tasks: list[dict"}
{"id": "scripts/lib/progress_utils.py:72-98", "path": "scripts/lib/progress_utils.py", "start": 2000, "end": 3200, "start_line": 72, "end_line": 98, "weights": {"relevant": 0.27659520743697763, "phase_id": 0.24268592452170934, "title": 0.24248605782415533, "phase_values": 0.19414873961736748, "title_to_id": 0.1559199896649281, "default_value": 0.14561155471302561, "in": 0.14373740614045563, "weight": 0.13262446258338179, "id_to_title": 0.10394665977661872, "extra_titles": 0.10394665977661872, "task": 0.09804204953031553, "accumulated": 0.09707436980868374, "total_weight": 0.09707436980868374, "mid": 0.09707436980868374, "milestones": 0.09613926278789053, "if": 0.09409632531913592, "int": 0.0837047891759613, "phase_order": 0.08271338912415485, "weighted_status_average": 0.07845382254312255, "dict": 0.07528237021669014, "tasks": 0.06861523022886505, "get": 0.06461081971363815, "roadmap_phase": 0.06113769970359745, "size_points": 0.0412127280120002, "list": 0.040395743235425996, "compute_phase_progress": 0.04022507259068317, "id": 0.03527233862741017, "round": 0.03435094394187008, "float": 0.033352782622748184, "str": 0.031227008231730746, "status": 0.029569419362643852, "value": 0.029311053198254035, "items": 0.029311053198254035, "return": 0.028548077133521872, "is": 0.027020457183509018, "continue": 0.025587606928899408, "else": 0.0206063640060001, "none": 0.018820592554172535, "not": 0.01713541578514571, "def": 0.015730396676308895}, "norm": 0.6686632316597045, "snippet": "weight += weight accumulated += float(value) * weight if total_weight == 0: return 0 return int(round(accumulated / total_weight)) def compute_phase_progress(tasks: list[dict], milestones: list[dict], default_value: int) -> Dict[str, int]: id_to_title = {m[\"id\"]: m[\"title\"] for m in milestones if \"id\" in m and \"title\"…", "text": "weight += weight\n        accumulated += float(value) * weight\n    if total_weight == 0:\n        return 0\n    return int(round(accumulated / total_weight))\n\n\ndef compute_phase_progress(tasks: list[dict], milestones: list[dict], default_value: int) -> Dict[str, int]:\n    id_to_title = {m[\"id\"]: m[\"title\"] for m in milestones if \"id\" in m and \"title\" in m}\n    title_to_id = {title: mid for mid, title in id_to_title.items()}\n    phase_values: Dict[str, int] = {}\n\n    for title in PHASE_ORDER:\n        phase_id = title_to_id.get(title)\n        if phase_id is None:\n            phase_values[title] = default_value\n            continue\n        relevant = [task for task in tasks if task.get(\"roadmap_phase\") == phase_id]\n        phase_values[title] = weighted_status_average(relevant, \"status\", \"size_points\") if relevant else default_value\n\n    extra_titles = [m[\"title\"] for m in milestones if m[\"title\"] not in PHASE_ORDER]\n    for title in extra_titles:\n        phase_id = title_to_id.get(title)\n        relevant = [task for task in tasks if task.get(\"roadmap_phase\") == phase_id]\n        if relevant:\n            phase_values[title] = weighted_status_average(relevant, \"status\", \"size_points\")\n   "}
{"id": "scripts/lib/progress_utils.py:95-114", "path": "scripts/lib/progress_utils.py", "start": 3000, "end": 3602, "start_line": 95, "end_line": 114, "weights": {"phase_values": 0.3949922633594718, "relevant": 0.2813640903238221, "progress": 0.17544894325320537, "return": 0.14520142679980955, "replace": 0.11809664571442396, "title": 0.11384623934980237, "00": 0.1026156036438066, "task": 0.09973242969463132, "phase_id": 0.09874806583986795, "default_value": 0.09874806583986795, "if": 0.09571867575567275, "weighted_status_average": 0.07980647465593502, "status_from_progress": 0.07980647465593502, "utc_now_iso": 0.07634663507900137, "microsecond": 0.0698864031920805, "100": 0.06603910058321481, "elif": 0.06439582162107128, "isoformat": 0.06439582162107128, "def": 0.0640064416484293, "str": 0.06353080985076255, "roadmap_phase": 0.06219179797434913, "done": 0.06219179797434913, "utc": 0.061515578782051175, "in_progress": 0.06086488347200209, "now": 0.05963283236886166, "in": 0.058486254912323336, "timezone": 0.056390552515362694, "datetime": 0.05452480105604834, "planned": 0.0482870416662983, "tasks": 0.0465321676264717, "int": 0.04257398759811824, "size_points": 0.04192329228806917, "not": 0.03486170797667575, "get": 0.03286239968193664, "status": 0.03007923693786185}, "norm": 0.6685498814728719, "snippet": "relevant = [task for task in tasks if task.get(\"roadmap_phase\") == phase_id] if relevant: phase_values[title] = weighted_status_average(relevant, \"status\", \"size_points\") elif title not in phase_values: phase_values[title] = default_value return phase_values def status_from_progress(progress: int) -> str: if progress…", "text": "      relevant = [task for task in tasks if task.get(\"roadmap_phase\") == phase_id]\n        if relevant:\n            phase_values[title] = weighted_status_average(relevant, \"status\", \"size_points\")\n        elif title not in phase_values:\n            phase_values[title] = default_value\n\n    return phase_values\n\n\ndef status_from_progress(progress: int) -> str:\n    if progress >= 100:\n        return \"done\"\n    if progress <= 0:\n        return \"planned\"\n    return \"in_progress\"\n\n\ndef utc_now_iso() -> str:\n    return datetime.now(timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\n"}
{"id": "scripts/lib/report_summary.py:1-41", "path": "scripts/lib/report_summary.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 41, "weights": {"reportinfo": 0.223826749154033, "exit_code": 0.210406199590859, "data": 0.18034046651661792, "path": 0.1585430479724764, "failed": 0.14248437834525945, "optional": 0.12928773239655705, "any": 0.11657771571749588, "steps": 0.11023884609092838, "import": 0.11019480356241351, "review": 0.10531749729962772, "fail": 0.0990528835267096, "return": 0.08606099165069003, "verify": 0.07443310914932538, "str": 0.06724063816321584, "dict": 0.06484174952970391, "dataclass": 0.06112325223014877, "if": 0.06078485248717905, "ok": 0.060116057025959714, "not": 0.059035885040793976, "get": 0.05565019508181972, "exit": 0.049054951891689395, "json": 0.04519327385217579, "exists": 0.04196724655181055, "summarize_verify": 0.04180575050154993, "summarize_review": 0.04180575050154993, "def": 0.04064642644827262, "jsondecodeerror": 0.036746282030309455, "else": 0.03549709420011696, "true": 0.03412209835982934, "doctor": 0.03378668270105278, "dataclasses": 0.03301762784223653, "none": 0.032420874764851955, "class": 0.030561626115074386, "load": 0.02914442892937397, "typing": 0.028727214229812302, "loads": 0.028727214229812302, "__future__": 0.028332562979664303, "annotations": 0.028332562979664303, "pathlib": 0.024084960458133495, "read_text": 0.023667745758571824, "bool": 0.023273094508423825, "len": 0.02289869089975558, "except": 0.022202996156658314, "try": 0.0220389607124827, "usr": 0.02112536112887682, "env": 0.0199390915704989, "python3": 0.0199390915704989, "bin": 0.019354838229816155, "false": 0.018507596103883642, "encoding": 0.018408284775009345, "utf": 0.016283797498144965, "status": 0.012734275491941512, "in": 0.012380302134725376}, "norm": 0.5627174561132644, "snippet": "#!/usr/bin/env python3 \"\"\"Сводный обзор отчетов verify/review/doctor.\"\"\" from __future__ import annotations import json from dataclasses import dataclass from pathlib import Path from typing import Any, Dict, Optional @dataclass class ReportInfo: path: Path exists: bool data: Optional[Dict[str, Any]] def load(path:…", "text": "#!/usr/bin/env python3\n\"\"\"Сводный обзор отчетов verify/review/doctor.\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Any, Dict, Optional\n\n\n@dataclass\nclass ReportInfo:\n    path: Path\n    exists: bool\n    data: Optional[Dict[str, Any]]\n\n\ndef load(path: Path) -> ReportInfo:\n    if not path.exists():\n        return ReportInfo(path, False, None)\n    try:\n        return ReportInfo(path, True, json.loads(path.read_text(encoding=\"utf-8\")))\n    except json.JSONDecodeError:\n        return ReportInfo(path, True, None)\n\n\ndef summarize_verify(data: Optional[Dict[str, Any]]) -> str:\n    if not data:\n        return \"verify: отчёт недоступен\"\n    exit_code = data.get(\"exit_code\")\n    steps = data.get(\"steps\", [])\n    failed = [s for s in steps if s.get(\"status\") == \"fail\"]\n    return \"verify: OK\" if exit_code == 0 and not failed else f\"verify: FAIL (exit={exit_code}, failed={len(failed)})\"\n\n\ndef summarize_review(data: Optional[Dict[str, Any]]) -> str:\n    if not data:\n        return \"review: отчёт недоступен\"\n    exit_code = data.get(\"exit_code\")\n    return \"review: OK\" if exit_code == 0 else f\"review: FAIL (exit={"}
{"id": "scripts/lib/report_summary.py:37-72", "path": "scripts/lib/report_summary.py", "start": 1000, "end": 2195, "start_line": 37, "end_line": 72, "weights": {"doctor": 0.2742978091878063, "review": 0.21375551303776294, "data": 0.18301217713167894, "problems": 0.12727528486027426, "exit_code": 0.12201333055639231, "root": 0.12067227747587285, "verify": 0.09441977734682942, "if": 0.09252805323048366, "summarize_doctor": 0.0908570803973408, "build_summary": 0.0908570803973408, "else": 0.09005744269288932, "load": 0.08872859474053854, "str": 0.08188415491876062, "return": 0.07485940226123514, "reports": 0.07398872324253267, "optional": 0.06560155310491969, "exists": 0.06388347530664495, "ok": 0.061006665278196155, "any": 0.05915239649369236, "value": 0.05124006336879965, "summary": 0.050737818158789555, "dict": 0.04935177603094131, "none": 0.04935177603094131, "main": 0.048036758058138375, "json": 0.04586280383517098, "not": 0.04493286805882653, "summarize_verify": 0.042425094953424745, "summarize_review": 0.042425094953424745, "get": 0.042355981812273895, "def": 0.04124859572898777, "pragma": 0.034287226148475784, "fail": 0.03350677788434374, "cwd": 0.03350677788434374, "path": 0.032178366773672994, "cover": 0.03215624783401815, "results": 0.03156333888828825, "missing": 0.03156333888828825, "no": 0.02957619824684618, "__name__": 0.027666352992756552, "__main__": 0.027666352992756552, "key": 0.025620031684399826, "items": 0.025620031684399826, "in": 0.02512742803640558, "exit": 0.024890845959857216, "systemexit": 0.02466290774751089, "len": 0.023237930764937142, "raise": 0.022876522141459868, "print": 0.01898755726177137, "int": 0.018291046523635987, "status": 0.012922931425155462}, "norm": 0.567461742650294, "snippet": "Optional[Dict[str, Any]]) -> str: if not data: return \"review: отчёт недоступен\" exit_code = data.get(\"exit_code\") return \"review: OK\" if exit_code == 0 else f\"review: FAIL (exit={exit_code})\" def summarize_doctor(data: Optional[Dict[str, Any]]) -> str: if not data: return \"doctor: отчёт недоступен\" problems = [r for…", "text": "Optional[Dict[str, Any]]) -> str:\n    if not data:\n        return \"review: отчёт недоступен\"\n    exit_code = data.get(\"exit_code\")\n    return \"review: OK\" if exit_code == 0 else f\"review: FAIL (exit={exit_code})\"\n\n\ndef summarize_doctor(data: Optional[Dict[str, Any]]) -> str:\n    if not data:\n        return \"doctor: отчёт недоступен\"\n    problems = [r for r in data.get(\"results\", []) if r.get(\"status\") == \"missing\"]\n    return \"doctor: OK\" if not problems else f\"doctor: требуется {len(problems)} исправлений\"\n\n\ndef build_summary(root: Path) -> Dict[str, str]:\n    verify = load(root / \"reports\" / \"verify.json\")\n    review = load(root / \"reports\" / \"review.json\")\n    doctor = load(root / \"reports\" / \"doctor.json\")\n    return {\n        \"verify\": summarize_verify(verify.data if verify.exists else None),\n        \"review\": summarize_review(review.data if review.exists else None),\n        \"doctor\": summarize_doctor(doctor.data if doctor.exists else None),\n    }\n\n\ndef main() -> int:\n    root = Path.cwd()\n    summary = build_summary(root)\n    for key, value in summary.items():\n        print(value)\n    return 0\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    raise SystemExit(main())\n"}
{"id": "scripts/lib/common.sh:1-41", "path": "scripts/lib/common.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 41, "weights": {"declare": 0.23746418104492434, "fi": 0.2230037053941554, "then": 0.1807685515877084, "dev": 0.1491716255306983, "sdk": 0.14671095864810513, "sdk_fix_commands": 0.13811575353750385, "sdk_review_linters": 0.13811575353750385, "sdk_coverage_file": 0.13811575353750385, "null": 0.13651766389887382, "sdk_dev_commands": 0.13433656318020606, "sdk_verify_commands": 0.13433656318020606, "sdk_ship_commands": 0.13433656318020606, "sdk_test_command": 0.13100308103898767, "if": 0.1047487395062079, "level": 0.10263595747661433, "file": 0.09788785690737668, "sdk_root": 0.09423092111077275, "local": 0.07134863527654768, "readonly": 0.057857103083212305, "sc1090": 0.057857103083212305, "sdk_dev": 0.057857103083212305, "log": 0.05424068658111364, "strip_placeholder_array": 0.05403196055389001, "shift": 0.04749283620898486, "err": 0.04749283620898486, "commands": 0.046038584512501285, "load_commands": 0.04477885439340201, "die": 0.03823973004849688, "disable": 0.03613460220590999, "printf": 0.03567431763827384, "source": 0.034816093315578306, "shellcheck": 0.03441458751917457, "config": 0.03230945967658769, "exit": 0.03170060570359173, "dirname": 0.03141030703692425, "bash_source": 0.03141030703692425, "cd": 0.031128675309097062, "bash": 0.030855207980104115, "pwd": 0.030855207980104115, "sh": 0.029362528685623984, "usr": 0.02730353277977476, "gpt": 0.026940643338003098, "env": 0.02577033533168254, "codex": 0.025614398520822066, "bin": 0.025015215447969936, "else": 0.022939159931207657, "return": 0.01588996746111123}, "norm": 0.6463186334760593, "snippet": "#!/usr/bin/env bash # Общие утилиты SDK GPT-5 Codex. SDK_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\" readonly SDK_ROOT sdk::log() { local level=\"$1\"; shift printf ' [%s] %s\\n' \"$level\" \"$*\" } sdk::die() { sdk::log \"ERR\" \"$*\" exit 1 } sdk::load_commands() { local file=\"$SDK_ROOT/config/commands.sh\" if [[…", "text": "#!/usr/bin/env bash\n# Общие утилиты SDK GPT-5 Codex.\n\nSDK_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\"\nreadonly SDK_ROOT\n\nsdk::log() {\n  local level=\"$1\"; shift\n  printf ' [%s] %s\\n' \"$level\" \"$*\"\n}\n\nsdk::die() {\n  sdk::log \"ERR\" \"$*\"\n  exit 1\n}\n\nsdk::load_commands() {\n  local file=\"$SDK_ROOT/config/commands.sh\"\n  if [[ -f \"$file\" ]]; then\n    # shellcheck disable=SC1090\n    source \"$file\"\n  else\n    SDK_DEV_COMMANDS=()\n    SDK_VERIFY_COMMANDS=()\n    SDK_FIX_COMMANDS=()\n    SDK_SHIP_COMMANDS=()\n    SDK_REVIEW_LINTERS=()\n    SDK_TEST_COMMAND=\"\"\n    SDK_COVERAGE_FILE=\"\"\n    return\n  fi\n\n  if ! declare -p SDK_DEV_COMMANDS >/dev/null 2>&1; then SDK_DEV_COMMANDS=(); fi\n  if ! declare -p SDK_VERIFY_COMMANDS >/dev/null 2>&1; then SDK_VERIFY_COMMANDS=(); fi\n  if ! declare -p SDK_FIX_COMMANDS >/dev/null 2>&1; then SDK_FIX_COMMANDS=(); fi\n  if ! declare -p SDK_SHIP_COMMANDS >/dev/null 2>&1; then SDK_SHIP_COMMANDS=(); fi\n  if ! declare -p SDK_REVIEW_LINTERS >/dev/null 2>&1; then SDK_REVIEW_LINTERS=(); fi\n  if [[ -z \"${SDK_TEST_COMMAND:-}\" ]]; then SDK_TEST_COMMAND=\"\"; fi\n  if [[ -z \"${SDK_COVERAGE_FILE:-}\" ]]; then SDK_COVERAGE_FILE=\"\"; fi\n\n  sdk::strip_placeholder_array SDK_DEV"}
{"id": "scripts/lib/common.sh:37-80", "path": "scripts/lib/common.sh", "start": 1000, "end": 2200, "start_line": 37, "end_line": 80, "weights": {"strip_placeholder_array": 0.35065639706402085, "sdk": 0.34382262077736203, "arr_ref": 0.2503205276253267, "local": 0.19293253416617487, "strip_placeholder_scalar": 0.18774039571899503, "var_name": 0.18774039571899503, "fi": 0.18090606713097301, "snippet": 0.16807958801135672, "sdk_coverage_file": 0.1493905089283205, "then": 0.14664387603288592, "sdk_test_command": 0.1416972101033948, "auto_detect_commands": 0.12516026381266335, "configure": 0.11688546568800695, "agents_file": 0.11688546568800695, "echo": 0.09231459213033479, "if": 0.08497474276268907, "value": 0.0705858015794689, "sdk_root": 0.06794882746763203, "_review_linters": 0.06258013190633167, "auto_detect": 0.06258013190633167, "print_quickref": 0.05550720149245469, "eval": 0.05323022647904438, "case": 0.05136980243012648, "esac": 0.05136980243012648, "sdk_fix_commands": 0.049796836309440165, "sdk_review_linters": 0.049796836309440165, "sdk_dev_commands": 0.04843427107857769, "sdk_verify_commands": 0.04843427107857769, "sdk_ship_commands": 0.04843427107857769, "eq": 0.04074272207473708, "printf": 0.03858650683323497, "lib": 0.035650975481686185, "inf": 0.033669791660860086, "dev": 0.032269780216844936, "agents": 0.029734460224003105, "null": 0.02953239259853188, "log": 0.029334248865296148, "scripts": 0.02894914347771608, "python3": 0.027874036175085198, "md": 0.027057273851885846, "true": 0.02385065038416643, "in": 0.017307157065891598}, "norm": 0.8051140157463472, "snippet": "_REVIEW_LINTERS=(); fi if [[ -z \"${SDK_TEST_COMMAND:-}\" ]]; then SDK_TEST_COMMAND=\"\"; fi if [[ -z \"${SDK_COVERAGE_FILE:-}\" ]]; then SDK_COVERAGE_FILE=\"\"; fi sdk::strip_placeholder_array SDK_DEV_COMMANDS sdk::strip_placeholder_array SDK_VERIFY_COMMANDS sdk::strip_placeholder_array SDK_FIX_COMMANDS…", "text": "_REVIEW_LINTERS=(); fi\n  if [[ -z \"${SDK_TEST_COMMAND:-}\" ]]; then SDK_TEST_COMMAND=\"\"; fi\n  if [[ -z \"${SDK_COVERAGE_FILE:-}\" ]]; then SDK_COVERAGE_FILE=\"\"; fi\n\n  sdk::strip_placeholder_array SDK_DEV_COMMANDS\n  sdk::strip_placeholder_array SDK_VERIFY_COMMANDS\n  sdk::strip_placeholder_array SDK_FIX_COMMANDS\n  sdk::strip_placeholder_array SDK_SHIP_COMMANDS\n  sdk::strip_placeholder_array SDK_REVIEW_LINTERS\n  sdk::strip_placeholder_scalar SDK_TEST_COMMAND\n  sdk::strip_placeholder_scalar SDK_COVERAGE_FILE\n\n  sdk::auto_detect_commands\n}\n\nsdk::strip_placeholder_array() {\n  local -n arr_ref=\"$1\"\n  if [[ ${#arr_ref[@]} -eq 1 ]]; then\n    case \"${arr_ref[0]}\" in\n      \"echo\"*\"configure\"* ) arr_ref=() ;;\n    esac\n  fi\n}\n\nsdk::strip_placeholder_scalar() {\n  local var_name=\"$1\"\n  local value=\"${!var_name:-}\"\n  if [[ \"$value\" == echo*configure* ]]; then\n    printf -v \"$var_name\" '%s' \"\"\n  fi\n}\n\nsdk::auto_detect_commands() {\n  local snippet\n  snippet=$(python3 -m scripts.lib.auto_detect \"$SDK_ROOT\" 2>/dev/null || true)\n  if [[ -n \"$snippet\" ]]; then\n    eval \"$snippet\"\n  fi\n}\n\nsdk::print_quickref() {\n  local agents_file=\"$SDK_ROOT/AGENTS.md\"\n  if [[ -f \"$agents_file\" ]]; then\n    sdk::log \"INF\" "}
{"id": "scripts/lib/common.sh:71-128", "path": "scripts/lib/common.sh", "start": 2000, "end": 3200, "start_line": 71, "end_line": 128, "weights": {"sdk": 0.2981824498777122, "local": 0.26771523325005503, "commands_ref": 0.21709213900249574, "rel": 0.16385046124050373, "log": 0.15264193214862068, "agents_file": 0.15205454385961967, "inf": 0.11680140115979783, "cmd": 0.10600318840683808, "then": 0.10598156232465206, "fi": 0.10459465828221448, "array_name": 0.10136969590641311, "path": 0.09610795385942154, "eval": 0.0923285344238292, "sdk_root": 0.08839360741364523, "agents": 0.0773622239456364, "snippet": 0.07288406913766797, "md": 0.07039680099517202, "if": 0.061412424710498, "dev": 0.05597236214603192, "quickref": 0.054273034750623936, "sed": 0.054273034750623936, "40p": 0.054273034750623936, "null": 0.051224326985064156, "command_exists": 0.050684847953206554, "eof": 0.050684847953206554, "indent_style": 0.050684847953206554, "space": 0.050684847953206554, "print_quickref": 0.048138988904960704, "ensure_file": 0.048138988904960704, "ensure_editorconfig": 0.048138988904960704, "editorconfig": 0.048138988904960704, "run_command_group": 0.04455080210754332, "do": 0.04318663679933749, "40": 0.042004943059297466, "true": 0.04136926969289045, "title": 0.038956235293737686, "cat": 0.03770841371609658, "die": 0.03587089721363424, "eq": 0.03533439613561269, "wrn": 0.03305272260196579, "done": 0.03192145382754203, "indent": 0.03060800245481395, "run": 0.02596619300238782, "root": 0.024027665869089724, "command": 0.02346560033172401, "else": 0.021518150023964705, "in": 0.015009746835905988, "return": 0.014905633193608766}, "norm": 0.6607622128758659, "snippet": "2>/dev/null || true) if [[ -n \"$snippet\" ]]; then eval \"$snippet\" fi } sdk::print_quickref() { local agents_file=\"$SDK_ROOT/AGENTS.md\" if [[ -f \"$agents_file\" ]]; then sdk::log \"INF\" \"AGENTS.md quickref (первые 40 строк):\" sed -n '1,40p' \"$agents_file\" else sdk::log \"WRN\" \"AGENTS.md отсутствует — создайте документ…", "text": "2>/dev/null || true)\n  if [[ -n \"$snippet\" ]]; then\n    eval \"$snippet\"\n  fi\n}\n\nsdk::print_quickref() {\n  local agents_file=\"$SDK_ROOT/AGENTS.md\"\n  if [[ -f \"$agents_file\" ]]; then\n    sdk::log \"INF\" \"AGENTS.md quickref (первые 40 строк):\"\n    sed -n '1,40p' \"$agents_file\"\n  else\n    sdk::log \"WRN\" \"AGENTS.md отсутствует — создайте документ управления проектом.\"\n  fi\n}\n\nsdk::run_command_group() {\n  local title=\"$1\"\n  local array_name=\"$2\"\n  local -n commands_ref=\"$array_name\"\n\n  sdk::log \"INF\" \"Запуск набора команд: $title\"\n  if [[ ${#commands_ref[@]} -eq 0 ]]; then\n    sdk::log \"INF\" \"Команды не заданы — пропуск\"\n    return 0\n  fi\n\n  local i=0\n  for cmd in \"${commands_ref[@]}\"; do\n    i=$((i + 1))\n    sdk::log \"RUN\" \"($i/${#commands_ref[@]}) $cmd\"\n    eval \"$cmd\"\n  done\n}\n\nsdk::command_exists() {\n  command -v \"$1\" >/dev/null 2>&1\n}\n\nsdk::ensure_file() {\n  local rel=\"$1\"\n  local path=\"$SDK_ROOT/$rel\"\n  if [[ ! -f \"$path\" ]]; then\n    sdk::die \"Файл $rel обязателен для SDK.\"\n  fi\n  sdk::log \"INF\" \"Обнаружен $rel\"\n}\n\n\nsdk::ensure_editorconfig() {\n  local path=\"$SDK_ROOT/.editorconfig\"\n  if [[ ! -f \"$path\" ]]; then\n    cat <<'EOF' > \"$path\"\nroot = true\n\n[*]\nindent_style = space\nindent"}
{"id": "scripts/lib/common.sh:116-174", "path": "scripts/lib/common.sh", "start": 3000, "end": 4128, "start_line": 116, "end_line": 174, "weights": {"sdk": 0.23999014840585098, "eof": 0.21212547476712373, "shellcheck": 0.1688864017144678, "log": 0.15970868826661236, "sdk_root": 0.15414317342194306, "inf": 0.152761091794643, "files": 0.15012634759780255, "path": 0.1206688754012737, "shopt": 0.11357135049667601, "nullglob": 0.11357135049667601, "fi": 0.10943700357305775, "codexignore": 0.10606273738356187, "local": 0.10504104637936186, "editorconfig": 0.10073529159741777, "then": 0.08871049290878283, "cat": 0.07890834722072061, "true": 0.06492677049023084, "sh": 0.05763755630881745, "indent_size": 0.056785675248338004, "end_of_line": 0.056785675248338004, "trim_trailing_whitespace": 0.056785675248338004, "insert_final_newline": 0.056785675248338004, "indent_style": 0.053031368691780933, "space": 0.053031368691780933, "ensure_codexignore": 0.053031368691780933, "artefacts": 0.053031368691780933, "run_shellcheck_if_available": 0.053031368691780933, "command_exists": 0.053031368691780933, "scripts": 0.05253733445955881, "if": 0.05140447401693536, "ensure_editorconfig": 0.050367645798708886, "charset": 0.050367645798708886, "lf": 0.050367645798708886, "generated": 0.050367645798708886, "root": 0.05028011561494702, "runtime": 0.04830150180505879, "within": 0.04661333924215181, "journal": 0.04518601813264015, "rel": 0.042859032685594725, "agentcontrol": 0.042859032685594725, "ignore": 0.03753158689945064, "eq": 0.036970247808557725, "printf": 0.035013682126453956, "wrn": 0.034582941240945686, "lib": 0.03234995923338191, "return": 0.03119141760884797, "reports": 0.030828634684388612, "state": 0.029047413456171425, "utf": 0.020656298678202407}, "norm": 0.6325853243064234, "snippet": ":log \"INF\" \"Обнаружен $rel\" } sdk::ensure_editorconfig() { local path=\"$SDK_ROOT/.editorconfig\" if [[ ! -f \"$path\" ]]; then cat <<'EOF' > \"$path\" root = true [*] indent_style = space indent_size = 2 charset = utf-8 end_of_line = lf trim_trailing_whitespace = true insert_final_newline = true EOF fi sdk::log \"INF\"…", "text": ":log \"INF\" \"Обнаружен $rel\"\n}\n\n\nsdk::ensure_editorconfig() {\n  local path=\"$SDK_ROOT/.editorconfig\"\n  if [[ ! -f \"$path\" ]]; then\n    cat <<'EOF' > \"$path\"\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ncharset = utf-8\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nEOF\n  fi\n  sdk::log \"INF\" \"Обнаружен .editorconfig\"\n}\n\nsdk::ensure_codexignore() {\n  local path=\"$SDK_ROOT/.codexignore\"\n  if [[ ! -f \"$path\" ]]; then\n    cat <<'EOF' > \"$path\"\n# Ignore generated artefacts within agentcontrol runtime\nreports/\nstate/\njournal/\nEOF\n  fi\n  sdk::log \"INF\" \"Обнаружен .codexignore\"\n}\n\n\nsdk::run_shellcheck_if_available() {\n  if ! sdk::command_exists shellcheck; then\n    sdk::log \"WRN\" \"shellcheck не установлен — шаг проверки пропущен\"\n    return 0\n  fi\n\n  shopt -s nullglob\n  local files=(\"$SDK_ROOT\"/scripts/*.sh \"$SDK_ROOT\"/scripts/lib/*.sh)\n  shopt -u nullglob\n\n  if [[ ${#files[@]} -eq 0 ]]; then\n    sdk::log \"INF\" \"Shellcheck: нечего проверять\"\n    return 0\n  fi\n\n  sdk::log \"INF\" \"Shellcheck: ${#files[@]} файлов\"\n  shellcheck \"${files[@]}\"\n}\n\nsdk::root() {\n  printf '%s\\n' \"$SDK_ROOT\"\n}\n"}
{"id": "scripts/lib/auto_detect.py:1-39", "path": "scripts/lib/auto_detect.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 39, "weights": {"yarn": 0.35964996669491306, "condition": 0.17938402717324173, "add_command": 0.1435072217385934, "skip": 0.14086118181550128, "wrap": 0.10209793156061753, "snippet": 0.10209793156061753, "skip_quoted": 0.10136946986480173, "bucket": 0.10136946986480173, "import": 0.09981281380529357, "values": 0.09496531819404444, "str": 0.09135835466142714, "shlex": 0.08991249167372826, "lint_cmd": 0.08622416851150991, "result": 0.08331233565076175, "lint": 0.07845551348265477, "command": 0.06574246704507801, "true": 0.05795116704913166, "key": 0.05716866574204919, "install": 0.05716866574204919, "dev": 0.05227171010331907, "shell": 0.05068473493240087, "sdk_": 0.05068473493240087, "_commands": 0.05068473493240087, "__all__": 0.047333783625721826, "detect_yarn": 0.047333783625721826, "def": 0.046021160524077266, "if": 0.04588167928784313, "build_snippet": 0.04495624583686413, "quote": 0.04495624583686413, "root": 0.04487811972243205, "build_cmd": 0.043112084255754954, "commands": 0.04033132196962923, "else": 0.040190924838148956, "test_cmd": 0.03825434322350604, "echo": 0.037383595160218226, "dict": 0.036707932584997674, "path": 0.0359014835904616, "not": 0.03342114153135858, "setdefault": 0.032998237713423424, "package": 0.0325258541279693, "build": 0.0325258541279693, "__future__": 0.03207901758854553, "annotations": 0.03207901758854553, "lock": 0.03207901758854553, "config": 0.028304154758002437, "test": 0.028304154758002437, "return": 0.027840273568227943, "pathlib": 0.027269748617886686, "bool": 0.026350528493008795, "sh": 0.025722545790711922, "fi": 0.02441982724357487, "usr": 0.02391879731120764, "null": 0.02391879731120764, "exists": 0.023758317262801844, "env": 0.0225756656624657, "python3": 0.0225756656624657, "sys": 0.0225756656624657, "bin": 0.021914155681692672, "verify": 0.021068875936895826, "false": 0.020954881539107927, "append": 0.020622039397472057, "then": 0.019794903376339972, "none": 0.018353966292498837, "json": 0.017056414649443755}, "norm": 0.6065039705517027, "snippet": "#!/usr/bin/env python3 \"\"\"Автоматическое определение команд для разных стеков. Скрипт печатает shell-скрипт, который дополняет переменные SDK_*_COMMANDS, если в config/commands.sh оставлены значения по умолчанию. \"\"\" from __future__ import annotations import shlex import sys from pathlib import Path __all__ =…", "text": "#!/usr/bin/env python3\n\"\"\"Автоматическое определение команд для разных стеков.\n\nСкрипт печатает shell-скрипт, который дополняет переменные SDK_*_COMMANDS,\nесли в config/commands.sh оставлены значения по умолчанию.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport shlex\nimport sys\nfrom pathlib import Path\n\n__all__ = [\"build_snippet\"]\n\n\ndef wrap(condition: str, command: str, skip: str) -> str:\n    \"\"\"Сформировать безопасную конструкцию if/else.\"\"\"\n\n    skip_quoted = shlex.quote(skip)\n    return f\"if {condition}; then {command}; else echo {skip_quoted}; fi\"\n\n\ndef add_command(bucket: dict, key: str, snippet: str) -> None:\n    values = bucket.setdefault(key, [])\n    if snippet not in values:\n        values.append(snippet)\n\n\ndef detect_yarn(root: Path, result: dict) -> bool:\n    if not (root / \"yarn.lock\").exists():\n        return False\n    condition = \"[ -f package.json ] && command -v yarn >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"yarn install\", \"skip yarn install\"))\n    lint_cmd = \"yarn lint || true\"\n    test_cmd = \"yarn test || true\"\n    build_cmd = \"yarn build || true\"\n    add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip yarn lint\"))\n    add_command"}
{"id": "scripts/lib/auto_detect.py:35-58", "path": "scripts/lib/auto_detect.py", "start": 1000, "end": 2200, "start_line": 35, "end_line": 58, "weights": {"yarn": 0.33219577076400364, "pnpm": 0.33219577076400364, "add_command": 0.2982430619720004, "condition": 0.2651049439751114, "result": 0.2565087179069255, "skip": 0.22768973472849155, "wrap": 0.2200431247629594, "lint_cmd": 0.1991054272880286, "lint": 0.1811663574694891, "test_cmd": 0.1413366574059307, "true": 0.12489729895830666, "coverage_file": 0.12457341403650138, "build_cmd": 0.11946325637281716, "test": 0.10457412902956625, "build": 0.09012889349964012, "root": 0.08290461811319508, "verify": 0.0583816943900243, "install": 0.052804645456396584, "dev": 0.04828150322520311, "veri": 0.04681567119710309, "exists": 0.043889410516015616, "detect_pnpm": 0.043720517700094205, "lcov": 0.041524471345500455, "info": 0.039821085457605716, "coverage_candidates": 0.03533416435148268, "review_linters": 0.03452988560600309, "coverage": 0.03452988560600309, "ship": 0.03380232698154259, "test_candidates": 0.03380232698154259, "relative_to": 0.03380232698154259, "package": 0.03004296449988004, "lock": 0.029630237619954272, "return": 0.02571506184546245, "yaml": 0.025188088418048007, "bool": 0.024339037768351633, "null": 0.022092934921039118, "if": 0.021189630510797784, "command": 0.020241319370113076, "false": 0.019355272261313426, "dict": 0.01695290016330045, "path": 0.016580456162007075, "json": 0.01575439826399003, "not": 0.015434954676696134, "def": 0.014169364945072134, "str": 0.014064072409710793}, "norm": 0.8611174785281434, "snippet": "lint_cmd = \"yarn lint || true\" test_cmd = \"yarn test || true\" build_cmd = \"yarn build || true\" add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip yarn lint\")) add_command(result, \"verify\", wrap(condition, test_cmd, \"skip yarn test\")) add_command(result, \"review_linters\", wrap(condition, lint_cmd, \"skip yarn…", "text": "   lint_cmd = \"yarn lint || true\"\n    test_cmd = \"yarn test || true\"\n    build_cmd = \"yarn build || true\"\n    add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip yarn lint\"))\n    add_command(result, \"verify\", wrap(condition, test_cmd, \"skip yarn test\"))\n    add_command(result, \"review_linters\", wrap(condition, lint_cmd, \"skip yarn lint\"))\n    add_command(result, \"ship\", wrap(condition, build_cmd, \"skip yarn build\"))\n    add_command(result, \"test_candidates\", wrap(condition, test_cmd, \"skip yarn test\"))\n    coverage_file = root / \"coverage\" / \"lcov.info\"\n    if coverage_file.exists():\n        add_command(result, \"coverage_candidates\", str(coverage_file.relative_to(root)))\n    return True\n\n\ndef detect_pnpm(root: Path, result: dict) -> bool:\n    if not (root / \"pnpm-lock.yaml\").exists():\n        return False\n    condition = \"[ -f package.json ] && command -v pnpm >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"pnpm install\", \"skip pnpm install\"))\n    lint_cmd = \"pnpm lint || true\"\n    test_cmd = \"pnpm test || true\"\n    build_cmd = \"pnpm build || true\"\n    add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip pnpm lint\"))\n    add_command(result, \"veri"}
{"id": "scripts/lib/auto_detect.py:54-79", "path": "scripts/lib/auto_detect.py", "start": 2000, "end": 3200, "start_line": 54, "end_line": 79, "weights": {"pnpm": 0.32720034563973294, "result": 0.25265144395343786, "add_command": 0.22847860303118156, "condition": 0.22847860303118156, "npm": 0.20881694120500288, "skip": 0.1922278533798006, "wrap": 0.1857721762230785, "lint": 0.14275364107370267, "test_cmd": 0.13921129413666858, "coverage_file": 0.12270012961489984, "root": 0.12248689818979575, "lint_cmd": 0.11766681642736126, "test": 0.10300158573588857, "package_json": 0.0922233522830151, "package": 0.08877357179287862, "build_cmd": 0.0784445442849075, "true": 0.07029665376385895, "if": 0.0626129683514551, "build": 0.05918238119525241, "install": 0.0520105906375034, "return": 0.05065673837226437, "dev": 0.04755546558271885, "json": 0.04655247005825625, "pr": 0.04611167614150755, "run": 0.04412300465067404, "exists": 0.04322941938043643, "detect_node": 0.043063066306107824, "detect_yarn": 0.043063066306107824, "detect_pnpm": 0.043063066306107824, "lcov": 0.04090004320496662, "info": 0.03922227214245375, "verify": 0.03833584944908864, "present": 0.03785143336956688, "coverage_candidates": 0.034802823534167145, "review_linters": 0.03401063920591282, "coverage": 0.03401063920591282, "ship": 0.033294021312647214, "test_candidates": 0.033294021312647214, "relative_to": 0.033294021312647214, "available": 0.033294021312647214, "not": 0.03040570019018336, "null": 0.021760710335760335, "command": 0.01993693862770536, "dict": 0.016697969333777134, "none": 0.016697969333777134, "path": 0.016331125994157345, "def": 0.01395629178800338, "str": 0.013852582599038451}, "norm": 0.7468764897650702, "snippet": "\"pnpm lint || true\" test_cmd = \"pnpm test || true\" build_cmd = \"pnpm build || true\" add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip pnpm lint\")) add_command(result, \"verify\", wrap(condition, test_cmd, \"skip pnpm test\")) add_command(result, \"review_linters\", wrap(condition, lint_cmd, \"skip pnpm lint\"))…", "text": "\"pnpm lint || true\"\n    test_cmd = \"pnpm test || true\"\n    build_cmd = \"pnpm build || true\"\n    add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip pnpm lint\"))\n    add_command(result, \"verify\", wrap(condition, test_cmd, \"skip pnpm test\"))\n    add_command(result, \"review_linters\", wrap(condition, lint_cmd, \"skip pnpm lint\"))\n    add_command(result, \"ship\", wrap(condition, build_cmd, \"skip pnpm build\"))\n    add_command(result, \"test_candidates\", wrap(condition, test_cmd, \"skip pnpm test\"))\n    coverage_file = root / \"coverage\" / \"lcov.info\"\n    if coverage_file.exists():\n        add_command(result, \"coverage_candidates\", str(coverage_file.relative_to(root)))\n    return True\n\n\ndef detect_node(root: Path, result: dict) -> None:\n    package_json = root / \"package.json\"\n    if not package_json.exists():\n        return\n    if detect_yarn(root, result):\n        return\n    if detect_pnpm(root, result):\n        return\n    condition = \"[ -f package.json ] && command -v npm >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"npm install\", \"skip npm install (package.json/npm not available)\"))\n    lint_cmd = \"npm run lint --if-present\"\n    test_cmd = \"npm run test --if-pr"}
{"id": "scripts/lib/auto_detect.py:76-106", "path": "scripts/lib/auto_detect.py", "start": 3000, "end": 4200, "start_line": 76, "end_line": 106, "weights": {"npm": 0.38867580786630945, "add_command": 0.23196682597822252, "condition": 0.23196682597822252, "result": 0.2052069743255404, "skip": 0.1951626297672785, "wrap": 0.1886083926539652, "pyproject": 0.16609788538200182, "coverage_file": 0.12457341403650138, "lint_cmd": 0.11946325637281716, "present": 0.1152879535454747, "lint": 0.10869981448169344, "test_cmd": 0.10600249305444803, "root": 0.08290461811319508, "build_cmd": 0.07964217091521143, "pyproject_text": 0.07964217091521143, "test": 0.07843059677217469, "run": 0.06719495746419445, "if": 0.06356889153239335, "build": 0.06008592899976008, "false": 0.05806581678394028, "install": 0.052804645456396584, "not": 0.046304864030088405, "exists": 0.043889410516015616, "detect_poetry": 0.043720517700094205, "lcov": 0.041524471345500455, "poetry": 0.041524471345500455, "info": 0.039821085457605716, "verify": 0.038921129593349535, "return": 0.03857259276819368, "tool": 0.0372525951017186, "coverage_candidates": 0.03533416435148268, "toml": 0.03533416435148268, "review_linters": 0.03452988560600309, "coverage": 0.03452988560600309, "errors": 0.03452988560600309, "available": 0.03380232698154259, "ship": 0.03380232698154259, "test_candidates": 0.03380232698154259, "relative_to": 0.03380232698154259, "oserror": 0.03196139525011596, "ignore": 0.030942071642295184, "package": 0.03004296449988004, "read_text": 0.024751764648277403, "bool": 0.024339037768351633, "dev": 0.024140751612601555, "except": 0.02321992727833732, "try": 0.023048378760382675, "encoding": 0.01925141232195634, "utf": 0.017029620284319542, "dict": 0.01695290016330045, "path": 0.016580456162007075, "json": 0.01575439826399003, "def": 0.014169364945072134, "str": 0.014064072409710793, "in": 0.012947338873720432}, "norm": 0.7389481512360453, "snippet": ">&1\" add_command(result, \"dev\", wrap(condition, \"npm install\", \"skip npm install (package.json/npm not available)\")) lint_cmd = \"npm run lint --if-present\" test_cmd = \"npm run test --if-present\" build_cmd = \"npm run build --if-present\" add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip npm lint\"))…", "text": ">&1\"\n    add_command(result, \"dev\", wrap(condition, \"npm install\", \"skip npm install (package.json/npm not available)\"))\n    lint_cmd = \"npm run lint --if-present\"\n    test_cmd = \"npm run test --if-present\"\n    build_cmd = \"npm run build --if-present\"\n\n    add_command(result, \"verify\", wrap(condition, lint_cmd, \"skip npm lint\"))\n    add_command(result, \"verify\", wrap(condition, test_cmd, \"skip npm test\"))\n    add_command(result, \"review_linters\", wrap(condition, lint_cmd, \"skip npm lint\"))\n    add_command(result, \"ship\", wrap(condition, build_cmd, \"skip npm build\"))\n    add_command(result, \"test_candidates\", wrap(condition, test_cmd, \"skip npm test\"))\n\n    coverage_file = root / \"coverage\" / \"lcov.info\"\n    if coverage_file.exists():\n        add_command(result, \"coverage_candidates\", str(coverage_file.relative_to(root)))\n\n\ndef detect_poetry(root: Path, result: dict) -> bool:\n    pyproject = root / \"pyproject.toml\"\n    if not pyproject.exists():\n        return False\n\n    try:\n        pyproject_text = pyproject.read_text(encoding=\"utf-8\", errors=\"ignore\")\n    except OSError:\n        return False\n\n    if \"tool.poetry\" not in pyproject_text:\n        return False\n\n    condition = \"[ -f "}
{"id": "scripts/lib/auto_detect.py:99-127", "path": "scripts/lib/auto_detect.py", "start": 4000, "end": 5200, "start_line": 99, "end_line": 127, "weights": {"poetry": 0.5307029996351766, "condition": 0.21176065646792439, "add_command": 0.21176065646792439, "result": 0.19123454822817126, "ruff": 0.17690099987839222, "skip": 0.17321344511865502, "wrap": 0.167396337653587, "pytest_cmd": 0.14958177870293915, "coverage_xml": 0.1396923858222522, "root": 0.11037098549622516, "pytest": 0.10800255694102633, "requirements": 0.09886369232050413, "pyproject": 0.08845049993919611, "pyproject_text": 0.08482214951132276, "tool": 0.07935105623292905, "toml": 0.07526464276494685, "exists": 0.070116009482903, "build": 0.06399395690218351, "install": 0.056239093941365476, "dev": 0.05142176359757405, "project_text": 0.04986059290097972, "run": 0.047710240801135353, "if": 0.04513563572218715, "detect_python_generic": 0.044225249969598056, "requirements_text": 0.044225249969598056, "false": 0.04122830351596844, "return": 0.04108137928970221, "xml": 0.03967552811646453, "coverage_candidates": 0.037632321382473424, "errors": 0.03677573182427972, "review_linters": 0.03677573182427972, "coverage": 0.03677573182427972, "test_candidates": 0.03600085231367545, "relative_to": 0.03600085231367545, "ship": 0.03600085231367545, "txt": 0.03600085231367545, "missing": 0.03464268902373101, "oserror": 0.03404018518508286, "ignore": 0.03295456410683471, "check": 0.028119546970682738, "in": 0.02757888443020125, "read_text": 0.026361635519710085, "except": 0.024730166450912108, "null": 0.023529873777692074, "command": 0.021557827947031004, "verify": 0.020726292588328414, "encoding": 0.02050353670062017, "or": 0.02050353670062017, "true": 0.019002957216652933, "utf": 0.018137237863787483, "dict": 0.01805552781619804, "none": 0.01805552781619804, "path": 0.017658859814820547, "not": 0.016438854167863365, "def": 0.015090949656946746, "str": 0.014978808826602555}, "norm": 0.8073570735277684, "snippet": "project_text = pyproject.read_text(encoding=\"utf-8\", errors=\"ignore\") except OSError: return False if \"tool.poetry\" not in pyproject_text: return False condition = \"[ -f pyproject.toml ] && command -v poetry >/dev/null 2>&1\" add_command(result, \"dev\", wrap(condition, \"poetry install\", \"skip poetry install (missing…", "text": "project_text = pyproject.read_text(encoding=\"utf-8\", errors=\"ignore\")\n    except OSError:\n        return False\n\n    if \"tool.poetry\" not in pyproject_text:\n        return False\n\n    condition = \"[ -f pyproject.toml ] && command -v poetry >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"poetry install\", \"skip poetry install (missing poetry)\"))\n    pytest_cmd = \"poetry run pytest\"\n    add_command(result, \"verify\", wrap(condition, pytest_cmd, \"skip pytest (poetry)\"))\n    add_command(result, \"test_candidates\", wrap(condition, pytest_cmd, \"skip pytest (poetry)\"))\n\n    if \"[tool.ruff\" in pyproject_text or (root / \"ruff.toml\").exists():\n        add_command(result, \"review_linters\", wrap(condition, \"poetry run ruff check\", \"skip ruff (poetry)\"))\n\n    coverage_xml = root / \"coverage.xml\"\n    if coverage_xml.exists():\n        add_command(result, \"coverage_candidates\", str(coverage_xml.relative_to(root)))\n\n    add_command(result, \"ship\", wrap(condition, \"poetry build\", \"skip poetry build\"))\n    return True\n\n\ndef detect_python_generic(root: Path, result: dict) -> None:\n    requirements = root / \"requirements.txt\"\n    requirements_text = \"\"\n    if requirements.exists():\n        "}
{"id": "scripts/lib/auto_detect.py:119-146", "path": "scripts/lib/auto_detect.py", "start": 5000, "end": 6200, "start_line": 119, "end_line": 146, "weights": {"pytest": 0.28437370497316106, "requirements": 0.2603108228989421, "requirements_text": 0.19962222922057102, "pyproject": 0.19962222922057102, "pyproject_text": 0.19143347504390273, "pytest_cond": 0.15763452712052314, "pip": 0.14056028747987007, "result": 0.12331244787452199, "txt": 0.1218744449884976, "add_command": 0.11947963644749864, "skip": 0.11727662614455726, "wrap": 0.11333807081499744, "has_tests_dir": 0.11252941150129367, "root": 0.09963766030117942, "installed": 0.09237138785600726, "dev": 0.08703959067662763, "errors": 0.08299844063094322, "condition": 0.07965309096499909, "exists": 0.07912173547153274, "oserror": 0.07682463812413196, "ignore": 0.07437452082826916, "install": 0.06346246380539407, "read_text": 0.059495067319712665, "except": 0.055813036210315393, "try": 0.055400690231378544, "null": 0.05310411880102981, "detect_python_generic": 0.049905557305142755, "command": 0.04865344655935437, "encoding": 0.04627403695736295, "or": 0.04627403695736295, "tests": 0.04618569392800363, "toml": 0.0424658305508645, "utf": 0.040933582701758904, "test_candidates": 0.04062481499616587, "missing": 0.039092208714852424, "if": 0.03819965500341069, "not": 0.037100533259581535, "build": 0.036106682105360416, "in": 0.03112112646710783, "verify": 0.023388385214352245, "true": 0.021443704015122113, "dict": 0.020374586434792286, "none": 0.020374586434792286, "path": 0.019926970249751624, "def": 0.017029236768848162, "return": 0.015452628907135694}, "norm": 0.7017935709275568, "snippet": "y build\")) return True def detect_python_generic(root: Path, result: dict) -> None: requirements = root / \"requirements.txt\" requirements_text = \"\" if requirements.exists(): condition = \"[ -f requirements.txt ] && command -v pip >/dev/null 2>&1\" add_command(result, \"dev\", wrap(condition, \"pip install -r…", "text": "y build\"))\n    return True\n\n\ndef detect_python_generic(root: Path, result: dict) -> None:\n    requirements = root / \"requirements.txt\"\n    requirements_text = \"\"\n    if requirements.exists():\n        condition = \"[ -f requirements.txt ] && command -v pip >/dev/null 2>&1\"\n        add_command(result, \"dev\", wrap(condition, \"pip install -r requirements.txt\", \"skip pip install (requirements/pip missing)\"))\n        try:\n            requirements_text = requirements.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        except OSError:\n            requirements_text = \"\"\n\n    pyproject = root / \"pyproject.toml\"\n    pyproject_text = \"\"\n    if pyproject.exists():\n        try:\n            pyproject_text = pyproject.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        except OSError:\n            pyproject_text = \"\"\n\n    pytest_cond = \"command -v pytest >/dev/null 2>&1\"\n    has_tests_dir = (root / \"tests\").exists()\n    if has_tests_dir or \"pytest\" in requirements_text or \"pytest\" in pyproject_text:\n        add_command(result, \"verify\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)\"))\n        add_command(result, \"test_candidates\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)"}
{"id": "scripts/lib/auto_detect.py:145-165", "path": "scripts/lib/auto_detect.py", "start": 6000, "end": 7200, "start_line": 145, "end_line": 165, "weights": {"ruff": 0.25699397226427845, "flake8": 0.24145090263072852, "add_command": 0.23927286774131615, "pipenv": 0.21416164355356535, "result": 0.21167018611532118, "pytest": 0.20920180320860216, "skip": 0.20130948424813766, "wrap": 0.19454881446983813, "installed": 0.15855876025676835, "coverage_xml": 0.1352926256388742, "dev": 0.12450545123034659, "root": 0.10689473398453303, "condition": 0.10254551474627835, "pytest_cond": 0.09019508375924946, "pipfile": 0.09019508375924946, "requirements_text": 0.08566465742142614, "pyproject_text": 0.0821505857471866, "not": 0.07960547490736983, "test_cmd": 0.07289410283534221, "review_linters": 0.07123488211632134, "null": 0.06836632617297932, "exists": 0.06790763123147298, "command": 0.06263652372011369, "or": 0.0595732680514082, "install": 0.05446778389596813, "in": 0.05342051629787013, "detect_pipenv": 0.04509754187962473, "verify": 0.040146991942746374, "tool": 0.03842590518366249, "xml": 0.03842590518366249, "toml": 0.03644705141767111, "coverage_candidates": 0.03644705141767111, "coverage": 0.03561744105816067, "test_candidates": 0.034866967201433695, "relative_to": 0.034866967201433695, "if": 0.032785530672218614, "elif": 0.029409115386001057, "check": 0.027233891947984066, "bool": 0.025105621635071372, "run": 0.023103778025746646, "false": 0.019964887135685505, "dict": 0.017486849774742984, "path": 0.017102675253723835, "def": 0.01461564415594055, "str": 0.014507035320252866, "return": 0.013262492526596776}, "norm": 0.7505682677014935, "snippet": "add_command(result, \"verify\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)\")) add_command(result, \"test_candidates\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)\")) if \"ruff\" in requirements_text or \"[tool.ruff\" in pyproject_text or (root / \"ruff.toml\").exists(): add_command(result,…", "text": "       add_command(result, \"verify\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)\"))\n        add_command(result, \"test_candidates\", wrap(pytest_cond, \"pytest\", \"skip pytest (not installed)\"))\n\n    if \"ruff\" in requirements_text or \"[tool.ruff\" in pyproject_text or (root / \"ruff.toml\").exists():\n        add_command(result, \"review_linters\", wrap(\"command -v ruff >/dev/null 2>&1\", \"ruff check\", \"skip ruff (not installed)\"))\n    elif \"flake8\" in requirements_text or \"flake8\" in pyproject_text:\n        add_command(result, \"review_linters\", wrap(\"command -v flake8 >/dev/null 2>&1\", \"flake8\", \"skip flake8 (not installed)\"))\n\n    coverage_xml = root / \"coverage.xml\"\n    if coverage_xml.exists():\n        add_command(result, \"coverage_candidates\", str(coverage_xml.relative_to(root)))\n\n\ndef detect_pipenv(root: Path, result: dict) -> bool:\n    if not (root / \"Pipfile\").exists():\n        return False\n    condition = \"[ -f Pipfile ] && command -v pipenv >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"pipenv install --dev\", \"skip pipenv install\"))\n    test_cmd = \"pipenv run pytest\"\n    add_command(result, \"verify\", wrap(condition, test_cmd, \"skip pipenv pytest\"))\n   "}
{"id": "scripts/lib/auto_detect.py:162-185", "path": "scripts/lib/auto_detect.py", "start": 7000, "end": 8200, "start_line": 162, "end_line": 185, "weights": {"condition": 0.31686813559068977, "pipenv": 0.2779411695169629, "skip": 0.24882048174708984, "go": 0.24882048174708984, "result": 0.24527475945844698, "wrap": 0.24046422810383886, "add_command": 0.22180769491348284, "mod": 0.152308385253908, "dev": 0.13850095450733446, "go_test": 0.1342960494924198, "golangci": 0.1342960494924198, "lint": 0.10393923866497695, "test_cmd": 0.10136004810315834, "pytest": 0.0969657992974178, "cargo": 0.08876083325125554, "download": 0.08361150100309986, "ruff": 0.07941176271913226, "root": 0.07927375892575587, "test": 0.07499568012521814, "toml": 0.06757336540210555, "review_linters": 0.06603525568447306, "test_candidates": 0.06464386619827853, "run": 0.06425211261174797, "null": 0.06337608338663046, "command": 0.05806451468944847, "install": 0.05049203324662739, "exists": 0.04196724655181055, "detect_go": 0.04180575050154993, "detect_rust": 0.03970588135956613, "verify": 0.03721655457466269, "return": 0.03688328213601001, "dict": 0.032420874764851955, "none": 0.032420874764851955, "path": 0.03170860959449528, "not": 0.029517942520396988, "def": 0.027097617632181745, "check": 0.025246016623313695, "if": 0.020261617495726348, "true": 0.01706104917991467}, "norm": 0.8072986471210684, "snippet": "result, \"dev\", wrap(condition, \"pipenv install --dev\", \"skip pipenv install\")) test_cmd = \"pipenv run pytest\" add_command(result, \"verify\", wrap(condition, test_cmd, \"skip pipenv pytest\")) add_command(result, \"test_candidates\", wrap(condition, test_cmd, \"skip pipenv pytest\")) add_command(result, \"review_linters\",…", "text": "result, \"dev\", wrap(condition, \"pipenv install --dev\", \"skip pipenv install\"))\n    test_cmd = \"pipenv run pytest\"\n    add_command(result, \"verify\", wrap(condition, test_cmd, \"skip pipenv pytest\"))\n    add_command(result, \"test_candidates\", wrap(condition, test_cmd, \"skip pipenv pytest\"))\n    add_command(result, \"review_linters\", wrap(condition, \"pipenv run ruff check\", \"skip pipenv ruff\"))\n    return True\n\n\ndef detect_go(root: Path, result: dict) -> None:\n    if not (root / \"go.mod\").exists():\n        return\n    condition = \"[ -f go.mod ] && command -v go >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"go mod download\", \"skip go mod download\"))\n    go_test = \"go test ./...\"\n    add_command(result, \"verify\", wrap(condition, go_test, \"skip go test\"))\n    add_command(result, \"test_candidates\", wrap(condition, go_test, \"skip go test\"))\n    add_command(result, \"review_linters\", wrap(condition + \" && command -v golangci-lint >/dev/null 2>&1\", \"golangci-lint run\", \"skip golangci-lint\"))\n\n\ndef detect_rust(root: Path, result: dict) -> None:\n    if not (root / \"Cargo.toml\").exists():\n        return\n    condition = \"[ -f Cargo.toml ] && command -v cargo >/dev/null 2>&1\"\n    a"}
{"id": "scripts/lib/auto_detect.py:178-198", "path": "scripts/lib/auto_detect.py", "start": 8000, "end": 9200, "start_line": 178, "end_line": 198, "weights": {"cargo": 0.3302779647151657, "condition": 0.2572499826721452, "gradlew": 0.24176469983380267, "gradle": 0.2318472086642822, "dev": 0.21082923075005358, "result": 0.19912676767885773, "add_command": 0.1929374870041089, "wrap": 0.18301999583458847, "skip": 0.15781669444144122, "null": 0.15006830609328053, "cargo_test": 0.1362856205960112, "fmt": 0.0908570803973408, "fetch": 0.08485018990684949, "verify_cmd": 0.08058823327793423, "root": 0.08044818498391523, "command": 0.07856630629584632, "check": 0.07686009505319948, "test": 0.07610672723818433, "quiet": 0.0745813427874429, "toml": 0.06857445229695157, "build": 0.05830560517754497, "gci": 0.0454285401986704, "bat": 0.0454285401986704, "exists": 0.0425889835377633, "warmup": 0.042425094953424745, "name": 0.04202986756764705, "detect_rust": 0.04029411663896711, "detect_gradle": 0.04029411663896711, "kts": 0.04029411663896711, "tasks": 0.03998319588644976, "verify": 0.037767910938731775, "lint": 0.03515969307926381, "review_linters": 0.03350677788434374, "dict": 0.03290118402062754, "none": 0.03290118402062754, "test_candidates": 0.032800776552459845, "path": 0.032178366773672994, "not": 0.029955245372551016, "any": 0.02957619824684618, "def": 0.02749906381932518, "version": 0.026719439129720367, "return": 0.02495313408707838, "if": 0.020561789606774145, "in": 0.01256371401820279}, "norm": 0.7724819920989435, "snippet": "gci-lint\")) def detect_rust(root: Path, result: dict) -> None: if not (root / \"Cargo.toml\").exists(): return condition = \"[ -f Cargo.toml ] && command -v cargo >/dev/null 2>&1\" add_command(result, \"dev\", wrap(condition, \"cargo fetch\", \"skip cargo fetch\")) cargo_test = \"cargo test\" add_command(result, \"verify\",…", "text": "gci-lint\"))\n\n\ndef detect_rust(root: Path, result: dict) -> None:\n    if not (root / \"Cargo.toml\").exists():\n        return\n    condition = \"[ -f Cargo.toml ] && command -v cargo >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"cargo fetch\", \"skip cargo fetch\"))\n    cargo_test = \"cargo test\"\n    add_command(result, \"verify\", wrap(condition, cargo_test, \"skip cargo test\"))\n    add_command(result, \"test_candidates\", wrap(condition, cargo_test, \"skip cargo test\"))\n    add_command(result, \"review_linters\", wrap(condition + \" && command -v cargo >/dev/null 2>&1\", \"cargo fmt -- --check\", \"skip cargo fmt\"))\n\n\ndef detect_gradle(root: Path, result: dict) -> None:\n    if not any((root / name).exists() for name in (\"gradlew\", \"gradlew.bat\", \"build.gradle\", \"build.gradle.kts\")):\n        return\n    condition = \"command -v ./gradlew >/dev/null 2>&1 && ./gradlew --version >/dev/null || command -v gradle >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"./gradlew --quiet tasks >/dev/null 2>&1 || gradle --quiet tasks >/dev/null 2>&1\", \"skip gradle warmup\"))\n    verify_cmd = \"./gradlew check || gradle check\"\n    add_command(result, \"verify\", wrap(condition, verify_cmd, "}
{"id": "scripts/lib/auto_detect.py:196-220", "path": "scripts/lib/auto_detect.py", "start": 9000, "end": 10200, "start_line": 196, "end_line": 220, "weights": {"dotnet": 0.29264025351084955, "condition": 0.28518132203162083, "skip": 0.24882048174708984, "gradle": 0.22846257788086202, "add_command": 0.22180769491348284, "result": 0.2207472835126023, "wrap": 0.210406199590859, "mvn": 0.20902875250774966, "build": 0.1436360711490615, "dev": 0.11541746208944538, "root": 0.09909219865719485, "ship": 0.0969657992974178, "verify": 0.09304138643665673, "restore": 0.0895306996616132, "null": 0.08450144451550728, "projects": 0.08361150100309986, "verify_cmd": 0.07941176271913226, "gradlew": 0.07941176271913226, "pom": 0.07941176271913226, "check": 0.0757380498699411, "xml": 0.07124218917262973, "glob": 0.07124218917262973, "package": 0.057454428459624604, "test": 0.04999712008347876, "csproj": 0.0447653498308066, "sln": 0.0447653498308066, "warmup": 0.04180575050154993, "configuration": 0.04180575050154993, "def": 0.04064642644827262, "detect_maven": 0.03970588135956613, "detect_dotnet": 0.03970588135956613, "detect_ruby": 0.03970588135956613, "tasks": 0.039399499596136624, "command": 0.03870967645963231, "quiet": 0.036746282030309455, "list": 0.03479341388160779, "dict": 0.032420874764851955, "none": 0.032420874764851955, "path": 0.03170860959449528, "not": 0.029517942520396988, "release": 0.02795815937099605, "return": 0.024588854757340007, "exists": 0.020983623275905274, "if": 0.020261617495726348}, "norm": 0.785660645310428, "snippet": "tasks >/dev/null 2>&1 || gradle --quiet tasks >/dev/null 2>&1\", \"skip gradle warmup\")) verify_cmd = \"./gradlew check || gradle check\" add_command(result, \"verify\", wrap(condition, verify_cmd, \"skip gradle check\")) add_command(result, \"ship\", wrap(condition, \"./gradlew build || gradle build\", \"skip gradle build\")) def…", "text": "tasks >/dev/null 2>&1 || gradle --quiet tasks >/dev/null 2>&1\", \"skip gradle warmup\"))\n    verify_cmd = \"./gradlew check || gradle check\"\n    add_command(result, \"verify\", wrap(condition, verify_cmd, \"skip gradle check\"))\n    add_command(result, \"ship\", wrap(condition, \"./gradlew build || gradle build\", \"skip gradle build\"))\n\n\ndef detect_maven(root: Path, result: dict) -> None:\n    if not (root / \"pom.xml\").exists():\n        return\n    condition = \"[ -f pom.xml ] && command -v mvn >/dev/null 2>&1\"\n    add_command(result, \"verify\", wrap(condition, \"mvn -B verify\", \"skip mvn verify\"))\n    add_command(result, \"ship\", wrap(condition, \"mvn -B package\", \"skip mvn package\"))\n\n\ndef detect_dotnet(root: Path, result: dict) -> None:\n    projects = list(root.glob(\"**/*.csproj\")) + list(root.glob(\"**/*.sln\"))\n    if not projects:\n        return\n    condition = \"command -v dotnet >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"dotnet restore\", \"skip dotnet restore\"))\n    add_command(result, \"verify\", wrap(condition, \"dotnet test\", \"skip dotnet test\"))\n    add_command(result, \"ship\", wrap(condition, \"dotnet build --configuration Release\", \"skip dotnet build\"))\n\n\ndef detect_ruby(r"}
{"id": "scripts/lib/auto_detect.py:216-251", "path": "scripts/lib/auto_detect.py", "start": 10000, "end": 11200, "start_line": 216, "end_line": 251, "weights": {"result": 0.4518002291873242, "root": 0.29661042993019165, "bundle": 0.2576828960848952, "dotnet": 0.19251723760377615, "condition": 0.18239888477279204, "skip": 0.14322859663592985, "wrap": 0.13841848424464673, "add_command": 0.10943933086367522, "dev": 0.1063004524790186, "gemfile": 0.10307315843395805, "rake": 0.10307315843395805, "poetry_used": 0.10307315843395805, "detect_ruby": 0.09142362598757243, "test": 0.08633956451390659, "str": 0.07741149099462664, "ship": 0.07442192999297612, "build": 0.0661450142770468, "verify": 0.06426892407641331, "install": 0.05812948365368027, "configuration": 0.04812930940094404, "detect_node": 0.04812930940094404, "detect_poetry": 0.04812930940094404, "detect_pipenv": 0.04812930940094404, "detect_go": 0.04812930940094404, "build_snippet": 0.04571181299378622, "detect_python_generic": 0.04571181299378622, "detect_rust": 0.04571181299378622, "detect_gradle": 0.04571181299378622, "detect_maven": 0.04571181299378622, "detect_dotnet": 0.04571181299378622, "list": 0.040056283208237536, "coverage_candidates": 0.03889727336171622, "review_linters": 0.038011890877196676, "dict": 0.03732487262844301, "test_candidates": 0.03721096499648806, "path": 0.03650486986929289, "exec": 0.03460462106116168, "not": 0.03398284138902846, "release": 0.032187124654003856, "def": 0.03119641693788991, "key": 0.029064741826840136, "lines": 0.027017497434758196, "null": 0.024320793904673316, "exists": 0.02415761671259683, "if": 0.02332639997407151, "command": 0.02228246081920011, "none": 0.018662436314221504, "in": 0.01425295287779308, "return": 0.014154088662838576}, "norm": 0.7775485696524449, "snippet": "(result, \"verify\", wrap(condition, \"dotnet test\", \"skip dotnet test\")) add_command(result, \"ship\", wrap(condition, \"dotnet build --configuration Release\", \"skip dotnet build\")) def detect_ruby(root: Path, result: dict) -> None: if not (root / \"Gemfile\").exists(): return condition = \"[ -f Gemfile ] && command -v bundle…", "text": "(result, \"verify\", wrap(condition, \"dotnet test\", \"skip dotnet test\"))\n    add_command(result, \"ship\", wrap(condition, \"dotnet build --configuration Release\", \"skip dotnet build\"))\n\n\ndef detect_ruby(root: Path, result: dict) -> None:\n    if not (root / \"Gemfile\").exists():\n        return\n    condition = \"[ -f Gemfile ] && command -v bundle >/dev/null 2>&1\"\n    add_command(result, \"dev\", wrap(condition, \"bundle install\", \"skip bundle install\"))\n    add_command(result, \"verify\", wrap(condition, \"bundle exec rake test\", \"skip bundle rake\"))\n\n\ndef build_snippet(root: Path) -> str:\n    result: dict[str, list[str] | str] = {\n        \"dev\": [],\n        \"verify\": [],\n        \"ship\": [],\n        \"review_linters\": [],\n        \"test_candidates\": [],\n        \"coverage_candidates\": [],\n    }\n\n    detect_node(root, result)\n    poetry_used = detect_poetry(root, result)\n    if not poetry_used:\n        detect_python_generic(root, result)\n    detect_pipenv(root, result)\n    detect_go(root, result)\n    detect_rust(root, result)\n    detect_gradle(root, result)\n    detect_maven(root, result)\n    detect_dotnet(root, result)\n    detect_ruby(root, result)\n\n    lines: list[str] = []\n    for key in (\"dev\", "}
{"id": "scripts/lib/auto_detect.py:244-276", "path": "scripts/lib/auto_detect.py", "start": 11000, "end": 12200, "start_line": 244, "end_line": 276, "weights": {"result": 0.27430728200658966, "lines": 0.2624556893662225, "coverage_candidates": 0.18892961347119308, "test_candidates": 0.18073897284008486, "append": 0.17823334050672276, "array_name": 0.17532819853201043, "root": 0.1385268491432214, "joined": 0.12516026381266335, "values": 0.11725309695387119, "shlex": 0.11101440298490937, "quote": 0.11101440298490937, "key": 0.10587870236920335, "test_cmd": 0.09446480673559654, "sdk_test_command": 0.09446480673559654, "review_linters": 0.09231459213033479, "ship": 0.09036948642004243, "if": 0.08497474276268907, "dev": 0.06453956043368987, "etect_rust": 0.06258013190633167, "arg": 0.06258013190633167, "fi": 0.060302022376991, "get": 0.058347525965887506, "type": 0.05789828695543216, "detect_gradle": 0.05550720149245469, "detect_maven": 0.05550720149245469, "detect_dotnet": 0.05550720149245469, "detect_ruby": 0.05550720149245469, "cov": 0.05323022647904438, "verify": 0.05202722425233458, "sdk_review_linters": 0.049796836309440165, "then": 0.04888129201096197, "sdk_dev_commands": 0.04843427107857769, "sdk_verify_commands": 0.04843427107857769, "sdk_ship_commands": 0.04843427107857769, "ignore": 0.0413613406647007, "eq": 0.04074272207473708, "in": 0.034614314131783196, "join": 0.031273469302927424, "continue": 0.03080956752663398, "list": 0.024319886233572792, "not": 0.020632439414767282, "str": 0.018799933527266468}, "norm": 0.6791485018524607, "snippet": "etect_rust(root, result) detect_gradle(root, result) detect_maven(root, result) detect_dotnet(root, result) detect_ruby(root, result) lines: list[str] = [] for key in (\"dev\", \"verify\", \"ship\", \"review_linters\"): values = result.get(key, []) if not values: continue array_name = { \"dev\": \"SDK_DEV_COMMANDS\", \"verify\":…", "text": "etect_rust(root, result)\n    detect_gradle(root, result)\n    detect_maven(root, result)\n    detect_dotnet(root, result)\n    detect_ruby(root, result)\n\n    lines: list[str] = []\n    for key in (\"dev\", \"verify\", \"ship\", \"review_linters\"):\n        values = result.get(key, [])\n        if not values:\n            continue\n        array_name = {\n            \"dev\": \"SDK_DEV_COMMANDS\",\n            \"verify\": \"SDK_VERIFY_COMMANDS\",\n            \"ship\": \"SDK_SHIP_COMMANDS\",\n            \"review_linters\": \"SDK_REVIEW_LINTERS\",\n        }[key]\n        joined = \" \".join(shlex.quote(v) for v in values)  # type: ignore[arg-type]\n        lines.append(f\"if [[ ${{#{array_name}[@]}} -eq 0 ]]; then\")\n        lines.append(f\"  {array_name}=({joined})\")\n        lines.append(\"fi\")\n\n    test_candidates = result.get(\"test_candidates\", [])\n    if test_candidates:\n        test_cmd = test_candidates[0]\n        lines.append(\"if [[ -z \\\"${SDK_TEST_COMMAND:-}\\\" ]]; then\")\n        lines.append(f\"  SDK_TEST_COMMAND={shlex.quote(test_cmd)}\")\n        lines.append(\"fi\")\n\n    coverage_candidates = result.get(\"coverage_candidates\", [])\n    if coverage_candidates:\n        cov = coverage_candidates[0]\n        lines.append(\"if "}
{"id": "scripts/lib/auto_detect.py:270-295", "path": "scripts/lib/auto_detect.py", "start": 12000, "end": 12623, "start_line": 270, "end_line": 295, "weights": {"coverage_candidates": 0.30858503533628207, "lines": 0.2679235162280188, "snippet": 0.20589749531391202, "cov": 0.17388540649821166, "append": 0.1663511178062746, "sdk_coverage_file": 0.16266966527750454, "sys": 0.13658277725791748, "if": 0.11566006653810457, "argv": 0.11200880681935746, "main": 0.10808270563081133, "uote": 0.10221421544700841, "fi": 0.09849330321575198, "shlex": 0.090661762437676, "quote": 0.090661762437676, "build_snippet": 0.090661762437676, "root": 0.09050420810690463, "return": 0.08421682754388954, "test_cmd": 0.07714625883407052, "pragma": 0.07714625883407052, "cover": 0.07235155762654083, "no": 0.0665464460554039, "__name__": 0.062249294233702235, "__main__": 0.062249294233702235, "resolve": 0.06150843152418834, "result": 0.05600440340967873, "exit": 0.05600440340967873, "len": 0.052285344221108566, "join": 0.05107999986144813, "print": 0.042722003838985584, "int": 0.04115485467818097, "then": 0.03991972180895228, "path": 0.036200662620382115, "get": 0.03176698635920542, "def": 0.03093644679674083}, "norm": 0.6806079072388216, "snippet": "uote(test_cmd)}\") lines.append(\"fi\") coverage_candidates = result.get(\"coverage_candidates\", []) if coverage_candidates: cov = coverage_candidates[0] lines.append(\"if [[ -z \\\"${SDK_COVERAGE_FILE:-}\\\" ]]; then\") lines.append(f\" SDK_COVERAGE_FILE={shlex.quote(cov)}\") lines.append(\"fi\") return \"\\n\".join(lines) def main()…", "text": "uote(test_cmd)}\")\n        lines.append(\"fi\")\n\n    coverage_candidates = result.get(\"coverage_candidates\", [])\n    if coverage_candidates:\n        cov = coverage_candidates[0]\n        lines.append(\"if [[ -z \\\"${SDK_COVERAGE_FILE:-}\\\" ]]; then\")\n        lines.append(f\"  SDK_COVERAGE_FILE={shlex.quote(cov)}\")\n        lines.append(\"fi\")\n\n    return \"\\n\".join(lines)\n\n\ndef main() -> int:\n    if len(sys.argv) < 2:\n        return 0\n    root = Path(sys.argv[1]).resolve()\n    snippet = build_snippet(root)\n    if snippet:\n        print(snippet)\n    return 0\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    sys.exit(main())\n"}
{"id": "scripts/lib/architecture_tool.py:1-52", "path": "scripts/lib/architecture_tool.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 52, "weights": {"import": 0.2921939629945287, "manifest_path": 0.15311479244195528, "project_root": 0.14837547403597995, "current_dir": 0.0989169826906533, "path": 0.08758224827511801, "yaml": 0.07982998990558764, "manifest": 0.06955055779352474, "dataclass": 0.06753133512524502, "sys": 0.06608844060866974, "root": 0.0656885381421082, "state_dir": 0.06439978650522958, "__file__": 0.06347787660458525, "fh": 0.060991575317048824, "resolve": 0.05952428857179517, "parents": 0.05321999327039175, "ensure_json_seri": 0.04945849134532665, "not": 0.048918848289851456, "as": 0.048344495336957345, "hashlib": 0.04618861144122855, "progress_utils": 0.04618861144122855, "taskprogress": 0.04618861144122855, "architecture": 0.045171748655569374, "percent": 0.04386859472790774, "completed": 0.04386859472790774, "tooling": 0.04206904995924475, "sdk": 0.04180473552876114, "arch": 0.04059871482380964, "total": 0.04059871482380964, "int": 0.03982727872082029, "phase_order": 0.03935556418004142, "weighted_numeric_average": 0.03935556418004142, "safe_load": 0.03935556418004142, "compute_phase_progress": 0.03827869811048882, "status_score": 0.03827869811048882, "status_from_progress": 0.037328834919711534, "weighted_status_average": 0.037328834919711534, "state_file": 0.037328834919711534, "outputs": 0.037328834919711534, "dataclasses": 0.036479153341825846, "load_manifest": 0.036479153341825846, "found": 0.036479153341825846, "dict": 0.03581983744181224, "utc_now_iso": 0.0357105228595329, "filenotfounderror": 0.0357105228595329, "parent": 0.03376566756262251, "class": 0.03376566756262251, "json": 0.033287518912624096, "dt": 0.03219989325261479, "any": 0.03219989325261479, "typing": 0.03173893830229262, "float": 0.03173893830229262, "__future__": 0.03130291232430653, "annotations": 0.03130291232430653, "def": 0.02993849690007177, "tuple": 0.029762144285897584, "str": 0.02971602396245345, "open": 0.028773415881927163, "lib": 0.028175770945203602, "argparse": 0.02761937682030883, "pathlib": 0.026609996635195875, "datetime": 0.02550353597782906, "os": 0.0249058910411055, "raise": 0.0249058910411055, "usr": 0.023340116731097777}, "norm": 0.5074349623017728, "snippet": "#!/usr/bin/env python3 \"\"\"Architecture manifest tooling for GPT-5 Codex SDK.\"\"\" from __future__ import annotations import argparse import datetime as dt import hashlib import json import os import sys from dataclasses import dataclass from pathlib import Path from typing import Any, Dict, List, Tuple import yaml…", "text": "#!/usr/bin/env python3\n\"\"\"Architecture manifest tooling for GPT-5 Codex SDK.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport datetime as dt\nimport hashlib\nimport json\nimport os\nimport sys\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Tuple\n\nimport yaml\n\nCURRENT_DIR = Path(__file__).resolve().parent\nPROJECT_ROOT = CURRENT_DIR.parents[1]\nif str(PROJECT_ROOT) not in sys.path:\n    sys.path.append(str(PROJECT_ROOT))\n\nfrom scripts.lib.progress_utils import (\n    PHASE_ORDER,\n    compute_phase_progress,\n    status_from_progress,\n    status_score,\n    utc_now_iso,\n    weighted_numeric_average,\n    weighted_status_average,\n)\n\nROOT = Path(__file__).resolve().parents[2]\nMANIFEST_PATH = ROOT / \"architecture\" / \"manifest.yaml\"\nSTATE_DIR = ROOT / \".sdk\" / \"arch\"\nSTATE_FILE = STATE_DIR / \"outputs.json\"\n\n\n@dataclass\nclass TaskProgress:\n    percent: float\n    completed: int\n    total: int\n\n\ndef load_manifest() -> dict:\n    if not MANIFEST_PATH.exists():\n        raise FileNotFoundError(f\"Manifest not found: {MANIFEST_PATH}\")\n    with MANIFEST_PATH.open(\"r\", encoding=\"utf-8\") as fh:\n        return yaml.safe_load(fh)\n\n\ndef ensure_json_seri"}
{"id": "scripts/lib/architecture_tool.py:46-76", "path": "scripts/lib/architecture_tool.py", "start": 1000, "end": 2200, "start_line": 46, "end_line": 76, "weights": {"value": 0.43879084116192235, "isinstance": 0.16334087807608227, "ensure_json_serialisable": 0.13817240388191734, "return": 0.12569675752819331, "item": 0.12292387779935046, "fh": 0.1128799304375232, "key": 0.10324490380280525, "val": 0.0915351183107538, "if": 0.0828609431914779, "str": 0.08249523070173645, "replace": 0.07667468788921555, "manifest_path": 0.07084415769702408, "data": 0.06914172736784512, "state_file": 0.06908620194095867, "microsecond": 0.06049867739015924, "any": 0.059593832288421404, "dt": 0.059593832288421404, "isoformat": 0.05574563662719603, "open": 0.0532522920799846, "items": 0.051622451901402626, "in": 0.050629892312160495, "dict": 0.049720072866993106, "ath": 0.0457675591553769, "astimezone": 0.0457675591553769, "as": 0.044736697177482916, "00": 0.04441570903985659, "exists": 0.042906811773119745, "tzinfo": 0.04274170013964433, "encoding": 0.03764082110710867, "safe_load": 0.036418581778545796, "found": 0.03375682846557018, "load_state": 0.03375682846557018, "utf": 0.033296720257400894, "filenotfounderror": 0.033045558467030445, "json": 0.030803375710189464, "not": 0.03017879197980886, "load": 0.029796916144210702, "float": 0.029370360817046904, "def": 0.027704280713499247, "tuple": 0.027541088742173887, "utc": 0.0266261460399923, "yaml": 0.024624175990778274, "timezone": 0.024407851088739076, "bool": 0.023794133937716896, "is": 0.023794133937716896, "datetime": 0.023600287024259727, "raise": 0.023047242455948372, "except": 0.022700078160165588, "try": 0.022532370280672613, "manifest": 0.021453405886559872, "or": 0.018820410553554334, "int": 0.0184275468708273, "list": 0.017786185454403983, "none": 0.016573357622331038}, "norm": 0.6249948897846717, "snippet": "ATH.exists(): raise FileNotFoundError(f\"Manifest not found: {MANIFEST_PATH}\") with MANIFEST_PATH.open(\"r\", encoding=\"utf-8\") as fh: return yaml.safe_load(fh) def ensure_json_serialisable(value: Any) -> Any: if isinstance(value, (str, int, float, bool)) or value is None: return value if isinstance(value, dt.datetime):…", "text": "ATH.exists():\n        raise FileNotFoundError(f\"Manifest not found: {MANIFEST_PATH}\")\n    with MANIFEST_PATH.open(\"r\", encoding=\"utf-8\") as fh:\n        return yaml.safe_load(fh)\n\n\ndef ensure_json_serialisable(value: Any) -> Any:\n    if isinstance(value, (str, int, float, bool)) or value is None:\n        return value\n    if isinstance(value, dt.datetime):\n        if value.tzinfo:\n            return value.astimezone(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\n        return value.replace(microsecond=0).isoformat() + \"Z\"\n    if isinstance(value, dict):\n        return {key: ensure_json_serialisable(val) for key, val in value.items()}\n    if isinstance(value, list):\n        return [ensure_json_serialisable(item) for item in value]\n    if isinstance(value, tuple):\n        return [ensure_json_serialisable(item) for item in value]\n    return str(value)\n\n\ndef load_state() -> Dict[str, str]:\n    if not STATE_FILE.exists():\n        return {}\n    try:\n        with STATE_FILE.open(\"r\", encoding=\"utf-8\") as fh:\n            data = json.load(fh)\n        if isinstance(data, dict):\n            return {str(key): str(value) for key, value in data.items()}\n    except json"}
{"id": "scripts/lib/architecture_tool.py:72-102", "path": "scripts/lib/architecture_tool.py", "start": 2000, "end": 3200, "start_line": 72, "end_line": 102, "weights": {"dict": 0.15863070867088278, "percent": 0.15542016417887314, "completed": 0.15542016417887314, "tasks": 0.15422089841916334, "total": 0.14383544680435414, "taskprogress": 0.1227297389724073, "fh": 0.10804221913305792, "str": 0.09211967428360571, "manifest": 0.08213589682282922, "big_tasks": 0.07564635517234546, "return": 0.07218585218047674, "epics": 0.07008540098337936, "big": 0.069481739334093, "task": 0.06886286812248353, "data": 0.06617851048065175, "in": 0.06057504973062059, "open": 0.050970050990842404, "epic": 0.05032849913361952, "key": 0.049410061105628234, "value": 0.049410061105628234, "state": 0.044816009332378774, "id": 0.04459431383608286, "json": 0.04422484655534344, "ate_file": 0.043806092334432174, "as": 0.042819410155590786, "compute_task_progress": 0.04090991299080243, "organise_entities": 0.04090991299080243, "get": 0.04084326817612126, "def": 0.03977543159580964, "encoding": 0.03602764305966115, "jsondecodeerror": 0.035958861701088536, "save_state": 0.03390398975500438, "true": 0.033390910537833, "state_file": 0.03306268235745879, "dump": 0.03306268235745879, "sum": 0.03306268235745879, "weighted_status_average": 0.03306268235745879, "utf": 0.031869717960655145, "if": 0.029741159966941176, "load": 0.028519905452315957, "state_dir": 0.028519905452315957, "float": 0.028111631067744895, "exist_ok": 0.027359055955903277, "tuple": 0.02636075636750929, "isinstance": 0.026056759121660746, "done": 0.025765173446516066, "status": 0.024922796319942674, "items": 0.024705030552814117, "indent": 0.024705030552814117, "mkdir": 0.023782089613671214, "parents": 0.023568854162602064, "ensure_ascii": 0.023568854162602064, "len": 0.022408004666189387, "except": 0.021727217667587062, "false": 0.018111004758800422, "size_points": 0.01736822109077151, "list": 0.017023920363500953, "none": 0.01586307086708828, "not": 0.014442707590337098}, "norm": 0.49183282016861496, "snippet": "ATE_FILE.open(\"r\", encoding=\"utf-8\") as fh: data = json.load(fh) if isinstance(data, dict): return {str(key): str(value) for key, value in data.items()} except json.JSONDecodeError: return {} return {} def save_state(state: Dict[str, str]) -> None: STATE_DIR.mkdir(parents=True, exist_ok=True) with STATE_FILE.open(\"w\",…", "text": "ATE_FILE.open(\"r\", encoding=\"utf-8\") as fh:\n            data = json.load(fh)\n        if isinstance(data, dict):\n            return {str(key): str(value) for key, value in data.items()}\n    except json.JSONDecodeError:\n        return {}\n    return {}\n\n\ndef save_state(state: Dict[str, str]) -> None:\n    STATE_DIR.mkdir(parents=True, exist_ok=True)\n    with STATE_FILE.open(\"w\", encoding=\"utf-8\") as fh:\n        json.dump(state, fh, ensure_ascii=False, indent=2)\n\n\ndef compute_task_progress(tasks: List[dict]) -> TaskProgress:\n    if not tasks:\n        return TaskProgress(percent=0.0, completed=0, total=0)\n    total = len(tasks)\n    completed = sum(1 for task in tasks if task[\"status\"] == \"done\")\n    percent = float(weighted_status_average(tasks, \"status\", \"size_points\"))\n    return TaskProgress(percent=percent, completed=completed, total=total)\n\n\ndef organise_entities(manifest: dict) -> Tuple[Dict[str, dict], Dict[str, dict], Dict[str, dict]]:\n    tasks = {task[\"id\"]: task for task in manifest.get(\"tasks\", [])}\n    big_tasks = {big[\"id\"]: big for big in manifest.get(\"big_tasks\", [])}\n    epics = {epic[\"id\"]: epic for epic in manifest.get(\"epics\", [])}\n    return tasks, big_tasks, epics\n\n"}
{"id": "scripts/lib/architecture_tool.py:97-125", "path": "scripts/lib/architecture_tool.py", "start": 3000, "end": 4200, "start_line": 97, "end_line": 125, "weights": {"big": 0.3852452873969513, "big_tasks": 0.20971266780452205, "relevant_big_tasks": 0.1701204302587824, "epics": 0.16191346761836814, "progress": 0.13433714466912094, "big_task_tasks": 0.12144263221426742, "in": 0.11755158165546176, "manifest": 0.11385173817025833, "tasks": 0.10688577118159837, "big_id": 0.10329826128606633, "total": 0.09968793342876031, "epic_id": 0.09663544471930964, "epic": 0.09301636803573243, "values": 0.07584688779854375, "get": 0.0754859081802901, "size_points": 0.07222428572400034, "items": 0.06848919361176191, "value": 0.06848919361176191, "stats": 0.06072131610713371, "task": 0.057272088339491246, "organise_entities": 0.0567068100862608, "compute_task_progress": 0.0567068100862608, "st": 0.05385847273525307, "percent": 0.05385847273525307, "completed": 0.05385847273525307, "enrich_manifest": 0.05164913064303316, "metrics": 0.05161371093473948, "weighted_numeric_average": 0.04831772235965482, "progress_pct": 0.04628443044848139, "dict": 0.043976830126581365, "if": 0.04122537025120559, "id": 0.04120926691123169, "round": 0.040132785991491775, "setdefault": 0.03953254221113103, "epic_progress": 0.03953254221113103, "done": 0.03571410180705197, "big_task": 0.03266969883925038, "parent_epic": 0.029894431857526042, "int": 0.024448428521691667, "def": 0.01837808720598465, "return": 0.01667659951364149}, "norm": 0.6554577394523071, "snippet": "st.get(\"tasks\", [])} big_tasks = {big[\"id\"]: big for big in manifest.get(\"big_tasks\", [])} epics = {epic[\"id\"]: epic for epic in manifest.get(\"epics\", [])} return tasks, big_tasks, epics def enrich_manifest(manifest: dict) -> dict: tasks, big_tasks, epics = organise_entities(manifest) for big_id, big in…", "text": "st.get(\"tasks\", [])}\n    big_tasks = {big[\"id\"]: big for big in manifest.get(\"big_tasks\", [])}\n    epics = {epic[\"id\"]: epic for epic in manifest.get(\"epics\", [])}\n    return tasks, big_tasks, epics\n\n\ndef enrich_manifest(manifest: dict) -> dict:\n    tasks, big_tasks, epics = organise_entities(manifest)\n\n    for big_id, big in big_tasks.items():\n        big_task_tasks = [task for task in tasks.values() if task[\"big_task\"] == big_id]\n        progress = compute_task_progress(big_task_tasks)\n        big.setdefault(\"metrics\", {})[\"progress_pct\"] = int(round(progress.percent))\n        big[\"stats\"] = {\"done\": progress.completed, \"total\": progress.total}\n\n    for epic_id, epic in epics.items():\n        relevant_big_tasks = [big for big in big_tasks.values() if big[\"parent_epic\"] == epic_id]\n        if relevant_big_tasks:\n            epic_progress = weighted_numeric_average(\n                (\n                    {\n                        \"value\": big[\"metrics\"][\"progress_pct\"],\n                        \"size_points\": big.get(\"size_points\", 1),\n                    }\n                    for big in relevant_big_tasks\n                ),\n                \"value\",\n                \"size_points\",\n   "}
{"id": "scripts/lib/architecture_tool.py:119-150", "path": "scripts/lib/architecture_tool.py", "start": 4000, "end": 5200, "start_line": 119, "end_line": 150, "weights": {"setdefault": 0.31112624129799227, "program": 0.2851927866605922, "epics_list": 0.2389423218241755, "program_progress": 0.2105668252021127, "size_points": 0.1894715028084165, "epic": 0.15251060343521064, "value": 0.1347547121062588, "progress": 0.1321563468660508, "get": 0.12376747932157955, "meta": 0.11501570998914493, "epic_progress": 0.10370874709933077, "progress_pct": 0.09106611964863547, "big": 0.08422029010193091, "phase_pr": 0.0796474406080585, "manifest": 0.07466899711166293, "relevant_big_tasks": 0.07438165998327716, "phase_map": 0.06774756097332922, "metrics": 0.06770110135595699, "weighted_numeric_average": 0.06337779166656021, "else": 0.0631571676028055, "status_score": 0.061643617736371614, "compute_phase_progress": 0.061643617736371614, "green": 0.053479868912704426, "round": 0.052641706300528175, "100": 0.04974373810164233, "values": 0.04974373810164233, "milestones": 0.049110099605935424, "in": 0.04405458162226953, "epics": 0.04247600059598749, "tasks": 0.035050204186173495, "health": 0.032929099561455316, "int": 0.03206871793105011, "list": 0.030952582479092647, "status": 0.02265708756358425, "if": 0.018024945434509804}, "norm": 0.7022413165163371, "snippet": "\"size_points\": big.get(\"size_points\", 1), } for big in relevant_big_tasks ), \"value\", \"size_points\", ) else: epic_progress = int(round(status_score(epic[\"status\"]) * 100)) epic.setdefault(\"metrics\", {})[\"progress_pct\"] = epic_progress program = manifest.setdefault(\"program\", {}) meta = program.get(\"meta\", {})…", "text": "        \"size_points\": big.get(\"size_points\", 1),\n                    }\n                    for big in relevant_big_tasks\n                ),\n                \"value\",\n                \"size_points\",\n            )\n        else:\n            epic_progress = int(round(status_score(epic[\"status\"]) * 100))\n        epic.setdefault(\"metrics\", {})[\"progress_pct\"] = epic_progress\n\n    program = manifest.setdefault(\"program\", {})\n    meta = program.get(\"meta\", {})\n    epics_list = list(epics.values())\n    if epics_list:\n        program_progress = weighted_numeric_average(\n            (\n                {\n                    \"value\": epic[\"metrics\"][\"progress_pct\"],\n                    \"size_points\": epic.get(\"size_points\", 0),\n                }\n                for epic in epics_list\n            ),\n            \"value\",\n            \"size_points\",\n        )\n    else:\n        program_progress = 0.0\n    program.setdefault(\"progress\", {})[\"progress_pct\"] = program_progress\n    program.setdefault(\"progress\", {}).setdefault(\"health\", \"green\")\n    phase_map = compute_phase_progress(manifest.get(\"tasks\", []), program.get(\"milestones\", []), program_progress)\n    program.setdefault(\"progress\", {})[\"phase_pr"}
{"id": "scripts/lib/architecture_tool.py:148-173", "path": "scripts/lib/architecture_tool.py", "start": 5000, "end": 6200, "start_line": 148, "end_line": 173, "weights": {"manifest": 0.33286652922936055, "milestones": 0.31844022481322337, "program_block": 0.24981887187897966, "program": 0.23115625866174314, "program_progress": 0.2133374413231931, "get": 0.18057023825232557, "phase_map": 0.16473354299830578, "phase_progress": 0.15538972174531793, "milestone": 0.15410810394710958, "setdefault": 0.12608800305234424, "program_meta": 0.12057658565710191, "phase_value": 0.11452012097390653, "progress": 0.10711619693353593, "copy": 0.09522978977655588, "meta": 0.09322325967541219, "title": 0.06950612507672145, "render_program_section": 0.06028829282855096, "yaml_dump": 0.06028829282855096, "updated_at": 0.05786237186262591, "epics_map": 0.057260060486953264, "tasks": 0.05681822573337597, "big_tasks_map": 0.05136936798236986, "compute_phase_progress": 0.04996377437579593, "status_from_progress": 0.04872395294783401, "ensure_json_serialisable": 0.04872395294783401, "green": 0.04334684111871832, "tasks_map": 0.04266748826463862, "big_tasks": 0.03715961306711706, "epics": 0.034427916272537225, "health": 0.026689901749811146, "int": 0.025992539796745876, "dict": 0.02337715706728799, "def": 0.019538808503204733, "str": 0.01939361563865383, "status": 0.018364165709431446, "in": 0.017853698867972386, "return": 0.017729858430292532}, "norm": 0.7718483230768505, "snippet": "\", {}).setdefault(\"health\", \"green\") phase_map = compute_phase_progress(manifest.get(\"tasks\", []), program.get(\"milestones\", []), program_progress) program.setdefault(\"progress\", {})[\"phase_progress\"] = phase_map milestones = program.get(\"milestones\", []) for milestone in milestones: title = milestone.get(\"title\")…", "text": "\", {}).setdefault(\"health\", \"green\")\n    phase_map = compute_phase_progress(manifest.get(\"tasks\", []), program.get(\"milestones\", []), program_progress)\n    program.setdefault(\"progress\", {})[\"phase_progress\"] = phase_map\n    milestones = program.get(\"milestones\", [])\n    for milestone in milestones:\n        title = milestone.get(\"title\")\n        phase_value = phase_map.get(title, program_progress)\n        milestone[\"status\"] = status_from_progress(int(phase_value))\n    meta.setdefault(\"updated_at\", manifest.get(\"updated_at\"))\n    manifest[\"tasks_map\"] = tasks\n    manifest[\"big_tasks_map\"] = big_tasks\n    manifest[\"epics_map\"] = epics\n    return manifest\n\n\ndef render_program_section(manifest: dict) -> str:\n    program_meta = manifest[\"program\"][\"meta\"].copy()\n    program_progress = manifest[\"program\"][\"progress\"].copy()\n    milestones = manifest[\"program\"].get(\"milestones\", [])\n\n    program_block = program_meta | program_progress\n    program_block[\"phase_progress\"] = manifest[\"program\"][\"progress\"].get(\"phase_progress\", program_progress.get(\"phase_progress\", {}))\n    program_block[\"milestones\"] = milestones\n    program_block = ensure_json_serialisable(program_block)\n\n    yaml_dump ="}
{"id": "scripts/lib/architecture_tool.py:169-192", "path": "scripts/lib/architecture_tool.py", "start": 6000, "end": 7200, "start_line": 169, "end_line": 192, "weights": {"epic": 0.39144388215037396, "program_block": 0.1977732735708589, "get": 0.17868929827053048, "yaml_dump": 0.1193205795565071, "big": 0.10132753652888563, "id": 0.08671116579238333, "values": 0.07979724653805123, "milestones": 0.0787807847845214, "phase_progress": 0.07688553940523543, "yaml": 0.06874249130758935, "risks": 0.06642529057612634, "budgets": 0.06588413460939174, "spec": 0.06484225084741962, "progres": 0.06388388465438025, "docs_updates": 0.06384999982681017, "scope_paths": 0.06337105153046227, "artifacts": 0.06199692720146649, "manifest": 0.05989075809997964, "epic_block": 0.05966028977825355, "type": 0.05910450126700366, "epics_map": 0.0566636015235475, "epics_data": 0.05244000664742078, "priority": 0.05144356834772621, "dependencies": 0.05117817197736309, "big_tasks_map": 0.05083427039922017, "size_points": 0.05065731151475024, "sort_keys": 0.04944331839271472, "allow_unicode": 0.04944331839271472, "ensure_json_serialisable": 0.04821641177129407, "dump": 0.04821641177129407, "big_tasks_planned": 0.047118906399858385, "title": 0.0458547352936704, "program_progress": 0.04222303526188197, "status": 0.03634574463324973, "in": 0.03533544567619534, "progress": 0.035333467738492746, "epics": 0.034069292144698296, "lines": 0.03349043952850235, "program": 0.03267834013819285, "strip": 0.03217010926142794, "parent_epic": 0.03145143351677219, "metrics": 0.027150962522961914, "false": 0.02641188193991728, "true": 0.024347538933836566, "progress_pct": 0.024347538933836566, "if": 0.01445750831726307}, "norm": 0.6026312909479631, "snippet": "[\"progress\"].get(\"phase_progress\", program_progress.get(\"phase_progress\", {})) program_block[\"milestones\"] = milestones program_block = ensure_json_serialisable(program_block) yaml_dump = yaml.dump(program_block, sort_keys=False, allow_unicode=True).strip() lines = [\"## Program\", \"```yaml\", yaml_dump, \"```\", \"\", \"##…", "text": "[\"progress\"].get(\"phase_progress\", program_progress.get(\"phase_progress\", {}))\n    program_block[\"milestones\"] = milestones\n    program_block = ensure_json_serialisable(program_block)\n\n    yaml_dump = yaml.dump(program_block, sort_keys=False, allow_unicode=True).strip()\n    lines = [\"## Program\", \"```yaml\", yaml_dump, \"```\", \"\", \"## Epics\"]\n    epics_data = []\n    for epic in manifest[\"epics_map\"].values():\n        epic_block = {\n            \"id\": epic[\"id\"],\n            \"title\": epic[\"title\"],\n            \"type\": epic[\"type\"],\n            \"status\": epic[\"status\"],\n            \"priority\": epic[\"priority\"],\n            \"size_points\": epic[\"size_points\"],\n            \"scope_paths\": epic.get(\"scope_paths\", []),\n            \"spec\": epic.get(\"spec\", \"\"),\n            \"budgets\": epic.get(\"budgets\", {}),\n            \"risks\": epic.get(\"risks\", []),\n            \"dependencies\": epic.get(\"dependencies\", []),\n            \"docs_updates\": epic.get(\"docs_updates\", []),\n            \"artifacts\": epic.get(\"artifacts\", []),\n            \"big_tasks_planned\": [big[\"id\"] for big in manifest[\"big_tasks_map\"].values() if big[\"parent_epic\"] == epic[\"id\"]],\n            \"progress_pct\": epic[\"metrics\"][\"progres"}
{"id": "scripts/lib/architecture_tool.py:190-215", "path": "scripts/lib/architecture_tool.py", "start": 7000, "end": 8200, "start_line": 190, "end_line": 215, "weights": {"big": 0.44842824676613213, "epic": 0.199886237693808, "get": 0.14193759862623698, "epics_dump": 0.13048623248554264, "epics_data": 0.10711150293941267, "big_tasks_map": 0.10383170124096035, "parent_epic": 0.09636183885989777, "artifacts": 0.09497401613841674, "id": 0.08855608421349788, "values": 0.08149506029417998, "yaml": 0.07020509750562316, "tests_required": 0.06570915934249111, "verify_commands": 0.06570915934249111, "docs_updates": 0.06520851046142315, "scope_paths": 0.06471937177579125, "audit": 0.06377358959343309, "manifest": 0.06116502954891538, "epic_block": 0.06092965764587596, "big_tasks_data": 0.06092965764587596, "big_block": 0.06092965764587596, "type": 0.06036204384715268, "health": 0.05394767374961827, "priority": 0.05253811235512464, "size_points": 0.05173512665336195, "sort_keys": 0.05049530389043206, "allow_unicode": 0.05049530389043206, "progress_pct": 0.04973114335421937, "dump": 0.04924229287281096, "ensure_json_serialisable": 0.04924229287281096, "big_tasks_planned": 0.048121436323259624, "extend": 0.048121436323259624, "title": 0.04683036795949318, "green": 0.04380797772636426, "status": 0.03711905834885079, "in": 0.03608726366930588, "lines": 0.03420300207166197, "strip": 0.032854579671245554, "tasks": 0.02871133747165275, "metrics": 0.027728642576641954, "false": 0.026973836874809136, "append": 0.026545391139299136, "true": 0.024865571677109684, "if": 0.014765114877204838}, "norm": 0.6451020766437647, "snippet": "t(\"artifacts\", []), \"big_tasks_planned\": [big[\"id\"] for big in manifest[\"big_tasks_map\"].values() if big[\"parent_epic\"] == epic[\"id\"]], \"progress_pct\": epic[\"metrics\"][\"progress_pct\"], \"health\": epic.get(\"health\", \"green\"), \"tests_required\": epic.get(\"tests_required\", []), \"verify_commands\":…", "text": "t(\"artifacts\", []),\n            \"big_tasks_planned\": [big[\"id\"] for big in manifest[\"big_tasks_map\"].values() if big[\"parent_epic\"] == epic[\"id\"]],\n            \"progress_pct\": epic[\"metrics\"][\"progress_pct\"],\n            \"health\": epic.get(\"health\", \"green\"),\n            \"tests_required\": epic.get(\"tests_required\", []),\n            \"verify_commands\": epic.get(\"verify_commands\", []),\n            \"docs_updates\": epic.get(\"docs_updates\", []),\n            \"artifacts\": epic.get(\"artifacts\", []),\n            \"audit\": epic.get(\"audit\", {}),\n        }\n        epics_data.append(epic_block)\n    epics_dump = yaml.dump(ensure_json_serialisable(epics_data), sort_keys=False, allow_unicode=True).strip()\n    lines.extend([\"```yaml\", epics_dump, \"```\", \"\", \"## Big Tasks\"])\n\n    big_tasks_data = []\n    for big in manifest[\"big_tasks_map\"].values():\n        big_block = {\n            \"id\": big[\"id\"],\n            \"title\": big[\"title\"],\n            \"type\": big[\"type\"],\n            \"status\": big[\"status\"],\n            \"priority\": big[\"priority\"],\n            \"size_points\": big[\"size_points\"],\n            \"parent_epic\": big[\"parent_epic\"],\n            \"scope_paths\": big.get(\"scope_paths\", []),\n           "}
{"id": "scripts/lib/architecture_tool.py:211-237", "path": "scripts/lib/architecture_tool.py", "start": 8000, "end": 9200, "start_line": 211, "end_line": 237, "weights": {"big": 0.5578462226106392, "get": 0.24593795890997744, "acceptance": 0.12316963050994283, "big_tasks_data": 0.12316963050994283, "big_dump": 0.12316963050994283, "manifest": 0.092734077058033, "yaml": 0.07095999102718901, "lines": 0.06914155257497259, "risks": 0.06856804188503364, "budgets": 0.06800942927421083, "spec": 0.06693393635862672, "tests_required": 0.066415709442948, "verify_commands": 0.066415709442948, "docs_updates": 0.06590967724057824, "scope_paths": 0.06541527899918687, "parent_epic": 0.06493199177656195, "audit": 0.06445932711594313, "artifacts": 0.06399682807893316, "big_block": 0.06158481525497141, "manifest_tasks": 0.06158481525497141, "manifest_big_tasks": 0.06158481525497141, "render_tasks_board": 0.05849145963721033, "health": 0.05452775626305503, "priority": 0.053103038294427064, "dependencies": 0.05282908075082642, "size_points": 0.052291418337806705, "sort_keys": 0.05103826414731843, "allow_unicode": 0.05103826414731843, "progress_pct": 0.05026588683114646, "dump": 0.049771779892948724, "ensure_json_serialisable": 0.049771779892948724, "extend": 0.048638871122434466, "green": 0.04427903125030366, "tasks_map": 0.043585068657426555, "strip": 0.033207854721474, "join": 0.03295483862028912, "tasks": 0.02902006153048773, "metrics": 0.028026800023702624, "false": 0.027263878131527516, "append": 0.026830825452624937, "true": 0.02513294341557323, "dict": 0.02387989162787483, "def": 0.01995899793338118, "str": 0.019810682641635637, "return": 0.018111145708363342}, "norm": 0.7293558526192241, "snippet": "\"priority\": big[\"priority\"], \"size_points\": big[\"size_points\"], \"parent_epic\": big[\"parent_epic\"], \"scope_paths\": big.get(\"scope_paths\", []), \"spec\": big.get(\"spec\", \"\"), \"budgets\": big.get(\"budgets\", {}), \"risks\": big.get(\"risks\", []), \"dependencies\": big.get(\"dependencies\", []), \"progress_pct\":…", "text": "           \"priority\": big[\"priority\"],\n            \"size_points\": big[\"size_points\"],\n            \"parent_epic\": big[\"parent_epic\"],\n            \"scope_paths\": big.get(\"scope_paths\", []),\n            \"spec\": big.get(\"spec\", \"\"),\n            \"budgets\": big.get(\"budgets\", {}),\n            \"risks\": big.get(\"risks\", []),\n            \"dependencies\": big.get(\"dependencies\", []),\n            \"progress_pct\": big[\"metrics\"][\"progress_pct\"],\n            \"health\": big.get(\"health\", \"green\"),\n            \"acceptance\": big.get(\"acceptance\", []),\n            \"tests_required\": big.get(\"tests_required\", []),\n            \"verify_commands\": big.get(\"verify_commands\", []),\n            \"docs_updates\": big.get(\"docs_updates\", []),\n            \"artifacts\": big.get(\"artifacts\", []),\n            \"audit\": big.get(\"audit\", {}),\n        }\n        big_tasks_data.append(big_block)\n    big_dump = yaml.dump(ensure_json_serialisable(big_tasks_data), sort_keys=False, allow_unicode=True).strip()\n    lines.extend([\"```yaml\", big_dump, \"```\", \"\"])\n    return \"\\n\".join(lines)\n\n\ndef render_tasks_board(manifest: dict) -> str:\n    tasks = []\n    manifest_tasks = manifest[\"tasks_map\"]\n    manifest_big_tasks = manifest[\"b"}
{"id": "scripts/lib/architecture_tool.py:230-260", "path": "scripts/lib/architecture_tool.py", "start": 9000, "end": 10200, "start_line": 230, "end_line": 260, "weights": {"task": 0.36922218652906064, "get": 0.16221439842998514, "manifest_tasks": 0.12185931529175192, "manifest_big_tasks": 0.12185931529175192, "big_task": 0.10530764625843474, "record": 0.10099060778086412, "manifest": 0.09174754432337306, "item": 0.08761595545272852, "tasks": 0.08613401241495824, "roadmap_phase": 0.0767473251598351, "failure_criteria": 0.07510985619949194, "success_criteria": 0.07433607653628184, "comments": 0.07286814310038925, "blockers": 0.07217048729564476, "system": 0.07020509750562316, "conflicts": 0.06958834140193694, "big": 0.0689889610409434, "owner": 0.06377358959343309, "big_dump": 0.06092965764587596, "render_tasks_board": 0.0578692100666017, "metrics": 0.05545728515328391, "priority": 0.05253811235512464, "dependencies": 0.0522670692534772, "big_tasks_map": 0.051915850620480174, "size_points": 0.05173512665336195, "sort": 0.048121436323259624, "lambda": 0.047107498240234885, "title": 0.04683036795949318, "id": 0.04427804210674894, "tasks_map": 0.04312139771426244, "values": 0.04074753014708999, "status": 0.03711905834885079, "key": 0.03679472635525507, "yaml": 0.03510254875281158, "lines": 0.03420300207166197, "join": 0.032604255230711573, "parent_epic": 0.03212061295329926, "append": 0.026545391139299136, "epic": 0.024985779711726, "dict": 0.023625850227578286, "def": 0.019746668168132444, "str": 0.01959993069863951, "in": 0.01804363183465294, "return": 0.01791847394550841}, "norm": 0.5718906124423749, "snippet": "yaml\", big_dump, \"```\", \"\"]) return \"\\n\".join(lines) def render_tasks_board(manifest: dict) -> str: tasks = [] manifest_tasks = manifest[\"tasks_map\"] manifest_big_tasks = manifest[\"big_tasks_map\"] for task in manifest_tasks.values(): big = manifest_big_tasks[task[\"big_task\"]] record = { \"id\": task[\"id\"], \"title\":…", "text": "yaml\", big_dump, \"```\", \"\"])\n    return \"\\n\".join(lines)\n\n\ndef render_tasks_board(manifest: dict) -> str:\n    tasks = []\n    manifest_tasks = manifest[\"tasks_map\"]\n    manifest_big_tasks = manifest[\"big_tasks_map\"]\n    for task in manifest_tasks.values():\n        big = manifest_big_tasks[task[\"big_task\"]]\n        record = {\n            \"id\": task[\"id\"],\n            \"title\": task[\"title\"],\n            \"epic\": big[\"parent_epic\"],\n            \"status\": task[\"status\"],\n            \"priority\": task[\"priority\"],\n            \"owner\": task[\"owner\"],\n            \"success_criteria\": task.get(\"success_criteria\", []),\n            \"failure_criteria\": task.get(\"failure_criteria\", []),\n            \"blockers\": task.get(\"blockers\", []),\n            \"dependencies\": task.get(\"dependencies\", []),\n            \"conflicts\": task.get(\"conflicts\", []),\n            \"comments\": task.get(\"comments\", []),\n            \"size_points\": task[\"size_points\"],\n            \"big_task\": task[\"big_task\"],\n            \"system\": task[\"system\"],\n            \"roadmap_phase\": task.get(\"roadmap_phase\"),\n            \"metrics\": task.get(\"metrics\", {}),\n        }\n        tasks.append(record)\n    tasks.sort(key=lambda item: item[\"i"}
{"id": "scripts/lib/architecture_tool.py:255-286", "path": "scripts/lib/architecture_tool.py", "start": 10000, "end": 11200, "start_line": 255, "end_line": 286, "weights": {"manifest": 0.2613414898908203, "program": 0.25350469925385977, "version": 0.14574239525302018, "tasks": 0.1363063496128969, "systems": 0.12283064803456574, "progress": 0.10278826978470619, "get": 0.09626359502789522, "ensure_json_serialisable": 0.09351061676857032, "meta": 0.0894566633248905, "name": 0.08597018366109624, "updated_at": 0.08328674737802215, "item": 0.08319090719754021, "roadmap_phase": 0.07287119762651009, "key": 0.0698728136847268, "board": 0.06665938551038968, "id": 0.06306266603082425, "metr": 0.061948009361823285, "task": 0.05842910022513754, "render_architecture_overview": 0.057852402209215566, "program_id": 0.054946522689500614, "purpose": 0.054946522689500614, "metrics": 0.05265641216574433, "health": 0.051223043762263824, "v1": 0.05085091553689289, "overview": 0.05085091553689289, "snapshot": 0.05085091553689289, "big_tasks_map": 0.04929383796288017, "record": 0.04794503601717792, "updated": 0.04675530838428516, "sort": 0.045691060751377834, "lambda": 0.04472833166244525, "adr": 0.04472833166244525, "rfc": 0.04472833166244525, "phase": 0.0438494288645702, "tasks_map": 0.04094354934485525, "roadmap": 0.036435598813255046, "big_tasks": 0.035658214559354764, "indent": 0.0349364068423634, "system": 0.03332969275519484, "ensure_ascii": 0.03332969275519484, "dumps": 0.0327523350396398, "lines": 0.032475577724608344, "architecture": 0.028289377945912134, "false": 0.025611521881131912, "append": 0.025204714819132515, "dependencies": 0.024813659140539682, "progress_pct": 0.02360973472372031, "dict": 0.02243262546860969, "json": 0.02084672901598681, "def": 0.018749361694994443, "str": 0.018610035208809234, "status": 0.017622179216121085, "return": 0.017013500513917076}, "norm": 0.5709418366817006, "snippet": ": task[\"system\"], \"roadmap_phase\": task.get(\"roadmap_phase\"), \"metrics\": task.get(\"metrics\", {}), } tasks.append(record) tasks.sort(key=lambda item: item[\"id\"]) board = { \"version\": manifest.get(\"version\", \"v1\"), \"updated_at\": manifest.get(\"updated_at\"), \"tasks\": tasks, } return…", "text": ": task[\"system\"],\n            \"roadmap_phase\": task.get(\"roadmap_phase\"),\n            \"metrics\": task.get(\"metrics\", {}),\n        }\n        tasks.append(record)\n    tasks.sort(key=lambda item: item[\"id\"])\n    board = {\n        \"version\": manifest.get(\"version\", \"v1\"),\n        \"updated_at\": manifest.get(\"updated_at\"),\n        \"tasks\": tasks,\n    }\n    return json.dumps(ensure_json_serialisable(board), ensure_ascii=False, indent=2) + \"\\n\"\n\n\ndef render_architecture_overview(manifest: dict) -> str:\n    program = manifest[\"program\"]\n    systems = manifest.get(\"systems\", [])\n    big_tasks = manifest[\"big_tasks_map\"]\n    tasks = manifest[\"tasks_map\"]\n\n    lines = [\n        \"# Architecture Overview\",\n        \"\",\n        \"## Program Snapshot\",\n        f\"- Program ID: {program['meta']['program_id']}\",\n        f\"- Name: {program['meta']['name']}\",\n        f\"- Version: {manifest['version']}\",\n        f\"- Updated: {ensure_json_serialisable(manifest['updated_at'])}\",\n        f\"- Progress: {program['progress']['progress_pct']}% (health: {program['progress']['health']})\",\n        \"\",\n        \"## Systems\",\n        \"| ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metr"}
{"id": "scripts/lib/architecture_tool.py:283-307", "path": "scripts/lib/architecture_tool.py", "start": 11000, "end": 12200, "start_line": 283, "end_line": 307, "weights": {"system": 0.39995631306233803, "rfc": 0.178913326649781, "task": 0.13633456719198758, "phase": 0.13154828659371062, "id": 0.1261253320616485, "purpose": 0.10989304537900123, "status": 0.1057330752967265, "metrics": 0.10531282433148866, "deps": 0.10170183107378578, "adr": 0.0894566633248905, "title": 0.08893039572105775, "systems": 0.0818870986897105, "line": 0.07841537632755576, "or": 0.07642227315685698, "progress": 0.06852551318980413, "big_task": 0.06665938551038968, "big": 0.0655046700792796, "lines": 0.06495115544921669, "join": 0.06191515134720987, "owner": 0.060552701230128396, "get": 0.05775815701673713, "name": 0.057313455774064166, "in": 0.05139701189264778, "health": 0.051223043762263824, "traceability": 0.05085091553689289, "dependencies": 0.049627318281079365, "format": 0.04794503601717792, "epic": 0.04744774329095443, "extend": 0.045691060751377834, "row": 0.04304091666584762, "values": 0.03868957407905515, "roadmap": 0.036435598813255046, "roadmap_phase": 0.036435598813255046, "big_tasks": 0.035658214559354764, "key": 0.0349364068423634, "items": 0.0349364068423634, "program": 0.03168808740673247, "tasks": 0.027261269922579382, "append": 0.025204714819132515, "progress_pct": 0.02360973472372031}, "norm": 0.6200397579712106, "snippet": "progress']['progress_pct']}% (health: {program['progress']['health']})\", \"\", \"## Systems\", \"| ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metrics |\", \"| --- | --- | --- | --- | --- | --- | --- | --- | --- |\", ] for system in systems: deps = \", \".join(system.get(\"dependencies\", [])) or…", "text": "progress']['progress_pct']}% (health: {program['progress']['health']})\",\n        \"\",\n        \"## Systems\",\n        \"| ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metrics |\",\n        \"| --- | --- | --- | --- | --- | --- | --- | --- | --- |\",\n    ]\n    for system in systems:\n        deps = \", \".join(system.get(\"dependencies\", [])) or \"—\"\n        metrics = \", \".join(f\"{k}={v}\" for k, v in system.get(\"metrics\", {}).items()) or \"—\"\n        rfc = system.get(\"rfc\") or \"—\"\n        line = f\"| {system['id']} | {system['name']} | {system['purpose']} | {system['adr']} | {rfc} | {system['status']} | {deps} | {system['roadmap_phase']} | {metrics} |\"\n        lines.append(line)\n    lines.extend([\n        \"\",\n        \"## Traceability\",\n        \"| Task ID | Title | Status | Owner | System | Big Task | Epic | Phase |\",\n        \"| --- | --- | --- | --- | --- | --- | --- | --- |\",\n    ])\n    for task in tasks.values():\n        big = big_tasks[task[\"big_task\"]]\n        row = \"| {id} | {title} | {status} | {owner} | {system} | {big_task} | {epic} | {phase} |\".format(\n            id=task[\"id\"],\n            title=task[\"title\"],\n            status=task[\"status\"],\n          "}
{"id": "scripts/lib/architecture_tool.py:303-333", "path": "scripts/lib/architecture_tool.py", "start": 12000, "end": 13200, "start_line": 303, "end_line": 333, "weights": {"adr": 0.48306598195440864, "index": 0.18717954119446548, "lines": 0.14614009976073752, "task": 0.12270111047278882, "title": 0.12005603422342795, "adr_entries": 0.11150641685128189, "systems": 0.11054758323110915, "manifest": 0.1045365959563281, "id": 0.09459399904623637, "system": 0.08999017043902606, "big_task": 0.08999017043902606, "join": 0.08358545431873331, "owner": 0.08174614666067333, "rfc": 0.08051099699240144, "status": 0.07929980647254488, "phase": 0.07892897195622636, "date": 0.06710010711729637, "str": 0.06699612675171324, "dict": 0.06056808876524615, "docs": 0.05410640919400712, "render_adr_files": 0.052067161988294, "get": 0.051982341315063414, "architecture": 0.05092088030264184, "documents": 0.04945187042055054, "md": 0.04821114249972387, "related_systems": 0.04742329268133045, "append": 0.045368486674438525, "decision": 0.04436445416659215, "format": 0.04315053241546012, "record": 0.04315053241546012, "epic": 0.04270296896185898, "outputs": 0.04207977754585664, "extend": 0.041121954676240045, "row": 0.03873682499926285, "content": 0.03806311616150174, "roadmap_phase": 0.032792038931929536, "yaml": 0.02999672347967535, "big": 0.02947710153567582, "parent_epic": 0.02744852379645573, "or": 0.022926681947057097, "def": 0.016874425525494997, "in": 0.015419103567794332, "return": 0.015312150462525367}, "norm": 0.6812398759456143, "snippet": "= \"| {id} | {title} | {status} | {owner} | {system} | {big_task} | {epic} | {phase} |\".format( id=task[\"id\"], title=task[\"title\"], status=task[\"status\"], owner=task[\"owner\"], system=task[\"system\"], big_task=task[\"big_task\"], epic=big[\"parent_epic\"], phase=task.get(\"roadmap_phase\", \"—\"), ) lines.append(row)…", "text": "= \"| {id} | {title} | {status} | {owner} | {system} | {big_task} | {epic} | {phase} |\".format(\n            id=task[\"id\"],\n            title=task[\"title\"],\n            status=task[\"status\"],\n            owner=task[\"owner\"],\n            system=task[\"system\"],\n            big_task=task[\"big_task\"],\n            epic=big[\"parent_epic\"],\n            phase=task.get(\"roadmap_phase\", \"—\"),\n        )\n        lines.append(row)\n    lines.extend([\n        \"\",\n        \"## Documents\",\n        \"- ADR Index: docs/adr/index.md\",\n        \"- RFC Index: docs/rfc/index.md\",\n        \"- Manifest: architecture/manifest.yaml\",\n    ])\n    return \"\\n\".join(lines) + \"\\n\"\n\n\ndef render_adr_files(manifest: dict) -> Dict[str, str]:\n    outputs: Dict[str, str] = {}\n    adr_entries = manifest.get(\"adr\", [])\n    lines = [\"# Architecture Decision Record Index\", \"\", \"| ADR | Title | Status | Date | Systems |\", \"| --- | --- | --- | --- | --- |\"]\n    for adr in adr_entries:\n        systems = \", \".join(adr.get(\"related_systems\", [])) or \"—\"\n        lines.append(f\"| {adr['id']} | {adr['title']} | {adr['status']} | {adr['date']} | {systems} |\")\n        content = \"\\n\".join([\n            f\"# {adr['id']} — {adr['title']}\",\n   "}
{"id": "scripts/lib/architecture_tool.py:329-359", "path": "scripts/lib/architecture_tool.py", "start": 13000, "end": 14200, "start_line": 329, "end_line": 359, "weights": {"adr": 0.821710175489458, "outputs": 0.19087734144512292, "join": 0.18957525721774565, "get": 0.15719745827235673, "or": 0.12999665021527218, "date": 0.11413935746756601, "consequences": 0.10755798340095565, "supersedes": 0.10755798340095565, "authors": 0.10062041151185848, "decision": 0.10062041151185848, "lines": 0.09943553179596575, "content": 0.08632871706732352, "index": 0.0849061836346029, "systems": 0.0835754924771272, "context": 0.08232550027472647, "str": 0.07597498909988099, "dict": 0.06868546148636162, "id": 0.06436292718609898, "superseded_by": 0.06322528790536602, "docs": 0.06135778362206993, "manifest": 0.05927332760410356, "rfc_entries": 0.05904523524445712, "render_rfc_files": 0.05607944068309856, "md": 0.054672429638862124, "status": 0.053956569352453215, "related_systems": 0.05377899170047783, "superseded": 0.05377899170047783, "related": 0.05031020575592924, "request": 0.05031020575592924, "rfc": 0.04565056530496989, "title": 0.04538200606383875, "by": 0.044753540799922165, "comments": 0.03530724459503397, "append": 0.025724399660764112, "def": 0.01913594647221082, "return": 0.017364294338946294}, "norm": 0.9705282286886957, "snippet": "s\", [])) or \"—\" lines.append(f\"| {adr['id']} | {adr['title']} | {adr['status']} | {adr['date']} | {systems} |\") content = \"\\n\".join([ f\"# {adr['id']} — {adr['title']}\", \"\", f\"**Status:** {adr['status']} (date: {adr['date']})\", f\"**Authors:** {', '.join(adr.get('authors', [])) or '—'}\", \"\", \"## Context\",…", "text": "s\", [])) or \"—\"\n        lines.append(f\"| {adr['id']} | {adr['title']} | {adr['status']} | {adr['date']} | {systems} |\")\n        content = \"\\n\".join([\n            f\"# {adr['id']} — {adr['title']}\",\n            \"\",\n            f\"**Status:** {adr['status']} (date: {adr['date']})\",\n            f\"**Authors:** {', '.join(adr.get('authors', [])) or '—'}\",\n            \"\",\n            \"## Context\",\n            adr.get(\"context\", \"\"),\n            \"\",\n            \"## Decision\",\n            adr.get(\"decision\", \"\"),\n            \"\",\n            \"## Consequences\",\n            adr.get(\"consequences\", \"\"),\n            \"\",\n            f\"**Related Systems:** {', '.join(adr.get('related_systems', [])) or '—'}\",\n            f\"**Supersedes:** {', '.join(adr.get('supersedes', [])) or '—'}\",\n            f\"**Superseded by:** {', '.join(adr.get('superseded_by', [])) or '—'}\",\n            \"\",\n        ])\n        outputs[f\"docs/adr/{adr['id']}.md\"] = content\n    outputs[\"docs/adr/index.md\"] = \"\\n\".join(lines) + \"\\n\"\n    return outputs\n\n\ndef render_rfc_files(manifest: dict) -> Dict[str, str]:\n    outputs: Dict[str, str] = {}\n    rfc_entries = manifest.get(\"rfc\", [])\n    lines = [\"# Request for Comments Index\", "}
{"id": "scripts/lib/architecture_tool.py:352-382", "path": "scripts/lib/architecture_tool.py", "start": 14000, "end": 15200, "start_line": 352, "end_line": 382, "weights": {"rfc": 0.9421499648046977, "systems": 0.17248559085704976, "join": 0.16302127615355788, "get": 0.16221439842998514, "date": 0.1570428038915447, "outputs": 0.1477268786184329, "rfc_entries": 0.12185931529175192, "motivation": 0.12185931529175192, "proposal": 0.12185931529175192, "related_systems": 0.1109906849988585, "references": 0.1109906849988585, "or": 0.10731638358196939, "authors": 0.10383170124096035, "str": 0.07839972279455804, "status": 0.07423811669770158, "summary": 0.07286814310038925, "dict": 0.07087755068273485, "title": 0.07024555193923976, "lines": 0.06840600414332394, "id": 0.0664170631601234, "manifest": 0.06116502954891538, "render_rfc_files": 0.0578692100666017, "request": 0.051915850620480174, "related": 0.051915850620480174, "content": 0.04454194444431054, "index": 0.04380797772636426, "comments": 0.036434071550194624, "docs": 0.03165800537947225, "append": 0.026545391139299136, "def": 0.019746668168132444, "in": 0.01804363183465294, "return": 0.01791847394550841}, "norm": 1.0792258914730415, "snippet": "n\" return outputs def render_rfc_files(manifest: dict) -> Dict[str, str]: outputs: Dict[str, str] = {} rfc_entries = manifest.get(\"rfc\", []) lines = [\"# Request for Comments Index\", \"\", \"| RFC | Title | Status | Date | Systems |\", \"| --- | --- | --- | --- | --- |\"] for rfc in rfc_entries: systems = \",…", "text": "n\"\n    return outputs\n\n\ndef render_rfc_files(manifest: dict) -> Dict[str, str]:\n    outputs: Dict[str, str] = {}\n    rfc_entries = manifest.get(\"rfc\", [])\n    lines = [\"# Request for Comments Index\", \"\", \"| RFC | Title | Status | Date | Systems |\", \"| --- | --- | --- | --- | --- |\"]\n    for rfc in rfc_entries:\n        systems = \", \".join(rfc.get(\"related_systems\", [])) or \"—\"\n        lines.append(f\"| {rfc['id']} | {rfc['title']} | {rfc['status']} | {rfc['date']} | {systems} |\")\n        content = \"\\n\".join([\n            f\"# {rfc['id']} — {rfc['title']}\",\n            \"\",\n            f\"**Status:** {rfc['status']} (date: {rfc['date']})\",\n            f\"**Authors:** {', '.join(rfc.get('authors', [])) or '—'}\",\n            \"\",\n            \"## Summary\",\n            rfc.get(\"summary\", \"\"),\n            \"\",\n            \"## Motivation\",\n            rfc.get(\"motivation\", \"\"),\n            \"\",\n            \"## Proposal\",\n            rfc.get(\"proposal\", \"\"),\n            \"\",\n            f\"**Related Systems:** {', '.join(rfc.get('related_systems', [])) or '—'}\",\n            f\"**References:** {', '.join(rfc.get('references', [])) or '—'}\",\n            \"\",\n        ])\n        outputs[f\"docs/rfc/{rfc['id"}
{"id": "scripts/lib/architecture_tool.py:378-407", "path": "scripts/lib/architecture_tool.py", "start": 15000, "end": 16200, "start_line": 378, "end_line": 407, "weights": {"manifest": 0.2712034329055682, "rfc": 0.20887286955575848, "systems": 0.15295892019398752, "outputs": 0.13100308103898767, "generated_marker": 0.11571420616642461, "values": 0.10840380661772997, "dashboard": 0.10263595747661433, "big_tasks": 0.09991028041630533, "references": 0.09842570179144056, "epics": 0.09256562394031236, "join": 0.08673962240623267, "tasks": 0.07638299214156676, "dt": 0.07533559930800442, "get": 0.07192525213405, "or": 0.07137551926914001, "list": 0.0674532693648151, "replace": 0.06461891935317537, "dict": 0.06285367702053847, "docs": 0.05614816048434701, "00": 0.05614816048434701, "ems": 0.05403196055389001, "render_dashboard": 0.05403196055389001, "manifest_version": 0.05403196055389001, "manifest_updated_at": 0.05403196055389001, "program_progress_pct": 0.05403196055389001, "str": 0.05214321185864474, "updated_at": 0.051857786103296805, "epics_map": 0.051317978738307166, "md": 0.05003043089593987, "related_systems": 0.04921285089572028, "generate_outputs": 0.04921285089572028, "big_tasks_map": 0.046038584512501285, "ensure_json_serialisable": 0.043667693679662556, "content": 0.03949946016759614, "index": 0.038848584021492834, "tasks_map": 0.03823973004849688, "microsecond": 0.03823973004849688, "isoformat": 0.03523544956624655, "def": 0.035022392600083954, "generated_at": 0.03441458751917457, "version": 0.034029474363323105, "utc": 0.033659467635461966, "now": 0.032629285635792225, "indent": 0.032629285635792225, "progress": 0.0320001217254274, "return": 0.03177993492222246, "ensure_ascii": 0.031128675309097062, "timezone": 0.030855207980104115, "dumps": 0.030589444989852263, "lines": 0.030330964101285145, "datetime": 0.029834325106139654, "program": 0.02959547786100485, "false": 0.023920194964453384, "progress_pct": 0.022050601298568964, "id": 0.019632716783181133, "json": 0.019470058231912207}, "norm": 0.5721992746527219, "snippet": "ems:** {', '.join(rfc.get('related_systems', [])) or '—'}\", f\"**References:** {', '.join(rfc.get('references', [])) or '—'}\", \"\", ]) outputs[f\"docs/rfc/{rfc['id']}.md\"] = content outputs[\"docs/rfc/index.md\"] = \"\\n\".join(lines) + \"\\n\" return outputs def render_dashboard(manifest: dict) -> str: systems =…", "text": "ems:** {', '.join(rfc.get('related_systems', [])) or '—'}\",\n            f\"**References:** {', '.join(rfc.get('references', [])) or '—'}\",\n            \"\",\n        ])\n        outputs[f\"docs/rfc/{rfc['id']}.md\"] = content\n    outputs[\"docs/rfc/index.md\"] = \"\\n\".join(lines) + \"\\n\"\n    return outputs\n\n\ndef render_dashboard(manifest: dict) -> str:\n    systems = manifest.get(\"systems\", [])\n    epics = manifest[\"epics_map\"]\n    big_tasks = manifest[\"big_tasks_map\"]\n    tasks = manifest[\"tasks_map\"]\n    generated_marker = manifest.get(\"updated_at\") or dt.datetime.now(dt.timezone.utc).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\n    dashboard = {\n        \"generated_at\": generated_marker,\n        \"manifest_version\": manifest[\"version\"],\n        \"manifest_updated_at\": manifest[\"updated_at\"],\n        \"program_progress_pct\": manifest[\"program\"][\"progress\"][\"progress_pct\"],\n        \"systems\": systems,\n        \"epics\": list(epics.values()),\n        \"big_tasks\": list(big_tasks.values()),\n        \"tasks\": list(tasks.values()),\n    }\n    return json.dumps(ensure_json_serialisable(dashboard), ensure_ascii=False, indent=2) + \"\\n\"\n\n\ndef generate_outputs(manifest: dict) -> Dict[str, str]:\n  "}
{"id": "scripts/lib/architecture_tool.py:401-435", "path": "scripts/lib/architecture_tool.py", "start": 16000, "end": 17200, "start_line": 401, "end_line": 435, "weights": {"outputs": 0.35605965615724855, "manifest": 0.2702762416819594, "path": 0.11138665421656035, "str": 0.110228670082947, "content": 0.10735750712218438, "dashboard": 0.09298642301300103, "generate_outputs": 0.08917200333241623, "existing": 0.07912436803494412, "return": 0.07198019448195686, "tasks": 0.06920168518808612, "def": 0.06345937804459657, "update": 0.06308557079403933, "true": 0.05993240352944385, "utf": 0.057202057878098976, "dict": 0.05694435695877843, "text": 0.055427028528621206, "json": 0.05291861980981267, "hexdigest": 0.05241754638308124, "render_program_section": 0.04895203263856702, "render_architecture_overview": 0.04895203263856702, "render_adr_files": 0.04895203263856702, "render_dashboard": 0.04895203263856702, "compute_hash": 0.04895203263856702, "hashlib": 0.04895203263856702, "sha256": 0.04895203263856702, "write_if_changed": 0.04895203263856702, "architecture": 0.04787433190846669, "render_tasks_board": 0.046493211506500515, "render_rfc_files": 0.046493211506500515, "md": 0.04532671517068057, "enrich_manifest": 0.04458600166620812, "encode": 0.04458600166620812, "sync_outputs": 0.04458600166620812, "false": 0.04334257549114631, "encoding": 0.04311000024232959, "overview": 0.04302769776198629, "ensure_json_serialisable": 0.03956218401747206, "load_manifest": 0.038661666789627396, "parent": 0.0357858357073948, "machine": 0.03519615304511317, "values": 0.03273733191304666, "exist_ok": 0.03273733191304666, "write_text": 0.030172335396377106, "indent": 0.029561575020461337, "reports": 0.02845720124712795, "mkdir": 0.02845720124712795, "ensure_ascii": 0.028202047715934094, "board": 0.028202047715934094, "parents": 0.028202047715934094, "dumps": 0.027713514264310603, "read_text": 0.027713514264310603, "bool": 0.02725140126200055, "state": 0.026812997036465936, "data": 0.02639598708629985, "docs": 0.02543463680060164, "exists": 0.024570567425632676, "if": 0.02372514185397017, "list": 0.020370502999060975, "none": 0.018981452319592813}, "norm": 0.5955344744149875, "snippet": "\"tasks\": list(tasks.values()), } return json.dumps(ensure_json_serialisable(dashboard), ensure_ascii=False, indent=2) + \"\\n\" def generate_outputs(manifest: dict) -> Dict[str, str]: manifest = enrich_manifest(manifest) outputs: Dict[str, str] = {} outputs[\"todo.machine.md\"] = render_program_section(manifest)…", "text": "       \"tasks\": list(tasks.values()),\n    }\n    return json.dumps(ensure_json_serialisable(dashboard), ensure_ascii=False, indent=2) + \"\\n\"\n\n\ndef generate_outputs(manifest: dict) -> Dict[str, str]:\n    manifest = enrich_manifest(manifest)\n    outputs: Dict[str, str] = {}\n    outputs[\"todo.machine.md\"] = render_program_section(manifest)\n    outputs[\"data/tasks.board.json\"] = render_tasks_board(manifest)\n    outputs[\"docs/architecture/overview.md\"] = render_architecture_overview(manifest)\n    outputs.update(render_adr_files(manifest))\n    outputs.update(render_rfc_files(manifest))\n    outputs[\"reports/architecture-dashboard.json\"] = render_dashboard(manifest)\n    return outputs\n\n\ndef compute_hash(text: str) -> str:\n    return hashlib.sha256(text.encode(\"utf-8\")).hexdigest()\n\n\ndef write_if_changed(path: Path, content: str) -> bool:\n    if path.exists():\n        existing = path.read_text(encoding=\"utf-8\")\n        if existing == content:\n            return False\n    path.parent.mkdir(parents=True, exist_ok=True)\n    path.write_text(content, encoding=\"utf-8\")\n    return True\n\n\ndef sync_outputs() -> None:\n    manifest = load_manifest()\n    outputs = generate_outputs(manifest)\n    state = "}
{"id": "scripts/lib/architecture_tool.py:427-468", "path": "scripts/lib/architecture_tool.py", "start": 17000, "end": 18200, "start_line": 427, "end_line": 468, "weights": {"rel_path": 0.30503022876227437, "new_state": 0.21410795583971365, "content": 0.1956515316712706, "recorded": 0.17194914748094872, "changed": 0.1462587531293369, "target": 0.14318758257295172, "updated": 0.1297787531788102, "force": 0.12682472002952536, "if": 0.1037697793239069, "skipped": 0.09121663473504928, "state": 0.08795665382990227, "outputs": 0.08651916878587347, "existing": 0.08651916878587347, "state_file": 0.08651916878587347, "str": 0.06887452282886407, "true": 0.06553356273780309, "is": 0.05959652238605727, "getenv": 0.05731638249364957, "continue": 0.056436217151591216, "manifest": 0.053733764276617246, "exists": 0.053733764276617246, "write_if_changed": 0.05352698895992841, "compute_hash": 0.05352698895992841, "nothing": 0.05352698895992841, "managed": 0.05352698895992841, "anymore": 0.05352698895992841, "arch_tool_force": 0.05083837146037906, "stale": 0.05083837146037906, "sync_outputs": 0.048752917709778965, "generate_outputs": 0.048752917709778965, "ensure": 0.048752917709778965, "cleared": 0.048752917709778965, "encoding": 0.04713897222759403, "or": 0.04713897222759403, "append": 0.046640500319516234, "list": 0.044548576652152026, "save_state": 0.04436036042710854, "unlink": 0.04436036042710854, "load_manifest": 0.042274906676508454, "load_state": 0.042274906676508454, "utf": 0.04169869639711888, "not": 0.03779400117097558, "exist_ok": 0.03579689564323793, "write_text": 0.03299217982594506, "items": 0.03232433904106519, "in": 0.03170282976555844, "read_text": 0.030303562326395698, "os": 0.028862901767262448, "root": 0.025375011618758308, "else": 0.02272477525895338, "none": 0.020755419826096813, "dict": 0.020755419826096813, "path": 0.020299436983391837, "def": 0.017347540259854667, "return": 0.015741463092315798}, "norm": 0.6427340017121039, "snippet": "s=True, exist_ok=True) path.write_text(content, encoding=\"utf-8\") return True def sync_outputs() -> None: manifest = load_manifest() outputs = generate_outputs(manifest) state = load_state() force = os.getenv(\"ARCH_TOOL_FORCE\") == \"1\" updated: List[str] = [] skipped: List[str] = [] new_state: Dict[str, str] = {} for…", "text": "s=True, exist_ok=True)\n    path.write_text(content, encoding=\"utf-8\")\n    return True\n\n\ndef sync_outputs() -> None:\n    manifest = load_manifest()\n    outputs = generate_outputs(manifest)\n    state = load_state()\n    force = os.getenv(\"ARCH_TOOL_FORCE\") == \"1\"\n\n    updated: List[str] = []\n    skipped: List[str] = []\n    new_state: Dict[str, str] = {}\n\n    for rel_path, content in outputs.items():\n        target = ROOT / rel_path\n        recorded = rel_path in state\n\n        if not force and not recorded and target.exists():\n            existing = target.read_text(encoding=\"utf-8\")\n            if existing != content:\n                skipped.append(rel_path)\n                continue\n            # пользовательский файл: не трогаем, не берём под управление\n            continue\n\n        changed = write_if_changed(target, content)\n        if changed:\n            updated.append(rel_path)\n\n        if changed or recorded or force:\n            new_state[rel_path] = compute_hash(content)\n\n    if new_state:\n        save_state(new_state)\n    else:\n        # Ensure stale state is cleared if nothing is managed anymore\n        if STATE_FILE.exists():\n            STATE_FILE.unlink()\n\n    if updated"}
{"id": "scripts/lib/architecture_tool.py:461-501", "path": "scripts/lib/architecture_tool.py", "start": 18000, "end": 19200, "start_line": 461, "end_line": 501, "weights": {"rel_path": 0.23049600619748134, "managed": 0.19414873961736748, "unmanaged": 0.14561155471302561, "mismatches": 0.14561155471302561, "print": 0.13033831679690516, "updated": 0.11768073381468384, "state": 0.10634307299208523, "target": 0.0973796906905032, "new_state": 0.09707436980868374, "skipped": 0.08271338912415485, "if": 0.08233428465424393, "is": 0.08106137155052706, "state_file": 0.07845382254312255, "outputs": 0.07845382254312255, "path": 0.0736284663465399, "manifest": 0.07308702683387347, "content": 0.07096513182652867, "to": 0.06767435192074973, "up": 0.05197332988830936, "_hash": 0.05197332988830936, "not": 0.051406247355437126, "continue": 0.051175213857798815, "artifacts": 0.05043817806221002, "exists": 0.048724684555915644, "nothing": 0.04853718490434187, "anymore": 0.04853718490434187, "adopt": 0.04853718490434187, "confirmed": 0.04853718490434187, "produced": 0.04853718490434187, "stale": 0.04609920123949627, "all": 0.04609920123949627, "user": 0.04609920123949627, "use": 0.04609920123949627, "arch_tool_force": 0.04609920123949627, "check_outputs": 0.04609920123949627, "integrity": 0.04609920123949627, "ensure": 0.044208154194460586, "cleared": 0.044208154194460586, "generate_outputs": 0.044208154194460586, "in": 0.043121221842136695, "append": 0.042292657069391844, "else": 0.0412127280120002, "save_state": 0.04022507259068317, "unlink": 0.04022507259068317, "existing": 0.03922691127156128, "load_state": 0.0383340255456475, "load_manifest": 0.0383340255456475, "none": 0.03764118510834507, "by": 0.03678892760671568, "missing": 0.03611059957558401, "sorted": 0.03548256591326433, "files": 0.03435094394187008, "no": 0.03383717596037487, "are": 0.031652183508662154, "date": 0.03127547365636695, "tuple": 0.03127547365636695, "str": 0.031227008231730746, "items": 0.029311053198254035, "set": 0.025972881285482103, "architecture": 0.023734308615638147, "root": 0.023009544433958806, "list": 0.020197871617712998, "get": 0.016152704928409537, "def": 0.015730396676308895}, "norm": 0.5687308554004464, "snippet": "new_state: save_state(new_state) else: # Ensure stale state is cleared if nothing is managed anymore if STATE_FILE.exists(): STATE_FILE.unlink() if updated: print(\"Updated:\") for path in updated: print(f\" - {path}\") else: print(\"All managed artifacts are up-to-date.\") unmanaged = sorted(set(skipped)) if unmanaged:…", "text": "new_state:\n        save_state(new_state)\n    else:\n        # Ensure stale state is cleared if nothing is managed anymore\n        if STATE_FILE.exists():\n            STATE_FILE.unlink()\n\n    if updated:\n        print(\"Updated:\")\n        for path in updated:\n            print(f\"  - {path}\")\n    else:\n        print(\"All managed artifacts are up-to-date.\")\n\n    unmanaged = sorted(set(skipped))\n    if unmanaged:\n        print(\"Skipped user-managed files (use ARCH_TOOL_FORCE=1 to adopt):\")\n        for path in unmanaged:\n            print(f\"  - {path}\")\n\n\ndef check_outputs() -> None:\n    state = load_state()\n    if not state:\n        print(\"Architecture integrity confirmed (no managed artifacts).\")\n        return\n\n    manifest = load_manifest()\n    outputs = generate_outputs(manifest)\n    mismatches: List[Tuple[str, str]] = []\n\n    for rel_path, _hash in state.items():\n        target = ROOT / rel_path\n        content = outputs.get(rel_path)\n        if content is None:\n            mismatches.append((rel_path, \"not produced by manifest\"))\n            continue\n        if not target.exists():\n            mismatches.append((rel_path, \"missing\"))\n            continue\n        existing = target.r"}
{"id": "scripts/lib/architecture_tool.py:496-529", "path": "scripts/lib/architecture_tool.py", "start": 19000, "end": 20200, "start_line": 496, "end_line": 529, "weights": {"rel_path": 0.23246605753250257, "mismatches": 0.19580813055426807, "subparsers": 0.1572526391492437, "reason": 0.10483509276616249, "parser": 0.09576814497492651, "architecture": 0.09574866381693338, "integrity": 0.09298642301300103, "generated": 0.09298642301300103, "sync": 0.0878154545055973, "print": 0.08763487966971402, "existing": 0.07912436803494412, "artifacts": 0.07630391040180491, "add_parser": 0.07569409973644581, "manifest": 0.07371170227689802, "target": 0.06547466382609332, "help": 0.062358056017649655, "if": 0.05931285463492542, "check": 0.059123150040922674, "argv": 0.057440413753516655, "args": 0.055427028528621206, "ppend": 0.05241754638308124, "rais": 0.05241754638308124, "continue": 0.05161260884803642, "run": 0.05015691981657819, "produced": 0.04895203263856702, "adopt": 0.04895203263856702, "confirmed": 0.04895203263856702, "outdated": 0.046493211506500515, "arch_tool_force": 0.046493211506500515, "edit": 0.046493211506500515, "check_outputs": 0.046493211506500515, "command": 0.04532671517068057, "tooling": 0.04458600166620812, "validate": 0.04458600166620812, "sync_outputs": 0.04458600166620812, "arch": 0.04302769776198629, "append": 0.042654132770839646, "failed": 0.04171017058397553, "add_subparsers": 0.04056887662991978, "none": 0.03796290463918563, "by": 0.03710336288540556, "missing": 0.03641923717879414, "generate": 0.03641923717879414, "content": 0.0357858357073948, "argumentparser": 0.0357858357073948, "dest": 0.0357858357073948, "required": 0.0357858357073948, "parse_args": 0.03519615304511317, "description": 0.03464454175333906, "not": 0.03456374466063579, "to": 0.034126382592514826, "__name__": 0.031922714991642176, "__main__": 0.031922714991642176, "agentcall": 0.030494902302213408, "argparse": 0.02927181816853244, "exit": 0.028720206876758327, "read_text": 0.027713514264310603, "main": 0.027713514264310603, "state": 0.026812997036465936, "exists": 0.024570567425632676, "sys": 0.023347483291951708, "sdk": 0.022152936775924708, "encoding": 0.021555000121164795, "or": 0.021555000121164795}, "norm": 0.538869173547387, "snippet": "ppend((rel_path, \"not produced by manifest\")) continue if not target.exists(): mismatches.append((rel_path, \"missing\")) continue existing = target.read_text(encoding=\"utf-8\") if existing != content: mismatches.append((rel_path, \"outdated\")) if mismatches: print(\"Architecture integrity check failed:\") for rel_path,…", "text": "ppend((rel_path, \"not produced by manifest\"))\n            continue\n        if not target.exists():\n            mismatches.append((rel_path, \"missing\"))\n            continue\n        existing = target.read_text(encoding=\"utf-8\")\n        if existing != content:\n            mismatches.append((rel_path, \"outdated\"))\n\n    if mismatches:\n        print(\"Architecture integrity check failed:\")\n        for rel_path, reason in mismatches:\n            print(f\"  - {rel_path}: {reason}\")\n        print(\"Run `ARCH_TOOL_FORCE=1 agentcall run architecture-sync` to adopt generated artifacts or edit .sdk/arch/state.json.\")\n        sys.exit(1)\n\n    print(\"Architecture integrity confirmed.\")\n\n\ndef main(argv: List[str] | None = None) -> int:\n    parser = argparse.ArgumentParser(description=\"Architecture manifest tooling\")\n    subparsers = parser.add_subparsers(dest=\"command\", required=True)\n    subparsers.add_parser(\"sync\", help=\"Generate artifacts from manifest\")\n    subparsers.add_parser(\"check\", help=\"Validate generated artifacts\")\n    args = parser.parse_args(argv)\n    if args.command == \"sync\":\n        sync_outputs()\n    else:\n        check_outputs()\n    return 0\n\n\nif __name__ == \"__main__\":\n    rais"}
{"id": "scripts/lib/architecture_tool.py:519-530", "path": "scripts/lib/architecture_tool.py", "start": 20000, "end": 20221, "start_line": 519, "end_line": 530, "weights": {"args": 0.30880773037374665, "generated": 0.25903360696478855, "check_outputs": 0.25903360696478855, "sync_outputs": 0.24840772356887378, "parse_args": 0.1960928526799162, "parser": 0.17785512638200637, "__name__": 0.17785512638200637, "__main__": 0.17785512638200637, "date": 0.17573837578339527, "sync": 0.16308584408182356, "argv": 0.16001258117051065, "systemexit": 0.15854726409114142, "main": 0.15440386518687332, "raise": 0.14706335662367057, "artifacts": 0.14170726217478055, "if": 0.1321829331864052, "command": 0.12626727797546727, "else": 0.1157881406051434, "return": 0.08020650242275193}, "norm": 0.8072436237897959, "snippet": "date generated artifacts\") args = parser.parse_args(argv) if args.command == \"sync\": sync_outputs() else: check_outputs() return 0 if __name__ == \"__main__\": raise SystemExit(main())", "text": "date generated artifacts\")\n    args = parser.parse_args(argv)\n    if args.command == \"sync\":\n        sync_outputs()\n    else:\n        check_outputs()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/auth.py:1-43", "path": "scripts/agents/auth.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 43, "weights": {"import": 0.3354819575122367, "candidate": 0.14841345154162225, "probe": 0.14685609791570103, "override": 0.11598500036888218, "path": 0.11138665421656035, "config_env_key": 0.10483509276616249, "agents": 0.09962314878469418, "default_config_path": 0.08605539552397258, "glob": 0.08342034116795106, "true": 0.07990987137259181, "root": 0.06961862162069588, "exist_ok": 0.06547466382609332, "parents": 0.05640409543186819, "datetime": 0.05405877711539836, "json": 0.05291861980981267, "os": 0.0527919741725997, "interactive": 0.05241754638308124, "authentication": 0.05241754638308124, "launcher": 0.05241754638308124, "string": 0.05241754638308124, "touch": 0.04895203263856702, "signal": 0.046493211506500515, "template": 0.046493211506500515, "state_env_key": 0.046493211506500515, "state_fallback_env_key": 0.046493211506500515, "writable_dir": 0.046493211506500515, "agents_auth_state_dir": 0.04458600166620812, "agents_auth_state_fallback": 0.04458600166620812, "missing_ok": 0.04458600166620812, "return": 0.04318811668917411, "configured": 0.04302769776198629, "time": 0.04302769776198629, "agents_config_path": 0.04302769776198629, "default_state_dir": 0.04302769776198629, "auth_status": 0.04171017058397553, "permissionerror": 0.04171017058397553, "state_filename": 0.04056887662991978, "unlink": 0.04056887662991978, "resolve_config_path": 0.03710336288540556, "expanduser": 0.03710336288540556, "shutil": 0.0357858357073948, "write": 0.03464454175333906, "typing": 0.03363784914089133, "__file__": 0.03363784914089133, "auth": 0.03363784914089133, "__future__": 0.03317573613858128, "annotations": 0.03317573613858128, "def": 0.03172968902229829, "iterable": 0.031542785397019664, "tuple": 0.031542785397019664, "resolve": 0.031542785397019664, "subprocess": 0.030830122072754273, "config": 0.02927181816853244, "test": 0.02927181816853244, "environ": 0.02845720124712795, "mkdir": 0.02845720124712795, "pathlib": 0.028202047715934094, "timezone": 0.02795429099052168, "ai": 0.02747933499774552, "state": 0.026812997036465936, "except": 0.025998380115061448, "try": 0.02580630442401821, "usr": 0.02473653397141987, "env": 0.023347483291951708}, "norm": 0.5615572199772861, "snippet": "#!/usr/bin/env python3 \"\"\"Interactive authentication launcher for configured AI agents.\"\"\" from __future__ import annotations import json import os import shutil import subprocess import sys import signal import time from datetime import datetime, timezone from glob import glob from pathlib import Path from string…", "text": "#!/usr/bin/env python3\n\"\"\"Interactive authentication launcher for configured AI agents.\"\"\"\nfrom __future__ import annotations\n\nimport json\nimport os\nimport shutil\nimport subprocess\nimport sys\nimport signal\nimport time\nfrom datetime import datetime, timezone\nfrom glob import glob\nfrom pathlib import Path\nfrom string import Template\nfrom typing import Dict, Iterable, List, Tuple\n\nROOT = Path(__file__).resolve().parents[2]\nDEFAULT_CONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nCONFIG_ENV_KEY = \"AGENTS_CONFIG_PATH\"\nSTATE_ENV_KEY = \"AGENTS_AUTH_STATE_DIR\"\nSTATE_FALLBACK_ENV_KEY = \"AGENTS_AUTH_STATE_FALLBACK\"\nDEFAULT_STATE_DIR = ROOT / \"state\" / \"agents\"\nSTATE_FILENAME = \"auth_status.json\"\n\n\ndef resolve_config_path() -> Path:\n    override = os.environ.get(CONFIG_ENV_KEY)\n    if override:\n        return Path(override).expanduser()\n    return DEFAULT_CONFIG_PATH\n\n\ndef writable_dir(candidate: Path) -> Path | None:\n    try:\n        candidate.mkdir(parents=True, exist_ok=True)\n        probe = candidate / \".write-test\"\n        probe.touch(exist_ok=True)\n        probe.unlink(missing_ok=True)\n        return candidate\n    except PermissionError:\n        print(\n            f\"[agents-auth] нет прав "}
{"id": "scripts/agents/auth.py:37-73", "path": "scripts/agents/auth.py", "start": 1000, "end": 2200, "start_line": 37, "end_line": 73, "weights": {"fallback": 0.2437488899769952, "writable_dir": 0.19962222922057102, "preferred": 0.1687941172519405, "fallback_env": 0.1687941172519405, "xdg_state": 0.15763452712052314, "path": 0.13948879174826137, "override": 0.12449766094641482, "candidate": 0.11947963644749864, "expanduser": 0.11947963644749864, "is": 0.1170060164276721, "probe": 0.10508968474701544, "none": 0.10187293217396143, "return": 0.09271577344281416, "environ": 0.091637409520568, "if": 0.0891325283412916, "os": 0.08499992171826831, "agents": 0.08020120464088912, "exc": 0.07682463812413196, "not": 0.07420106651916307, "auth": 0.07221336421072083, "stderr": 0.06853133310132357, "file": 0.06346246380539407, "idate": 0.056264705750646835, "hom": 0.056264705750646835, "except": 0.055813036210315393, "touch": 0.05254484237350772, "get": 0.052459243528963084, "sys": 0.050122120094648615, "state_env_key": 0.049905557305142755, "state_fallback_env_key": 0.049905557305142755, "missing_ok": 0.047858368760975684, "xdg_state_home": 0.047858368760975684, "print": 0.04703339872181899, "default_state_dir": 0.04618569392800363, "permissionerror": 0.044771467507570065, "resolve_state_dir": 0.044771467507570065, "unlink": 0.04354640885963866, "true": 0.042887408030244226, "agentcontrol": 0.0424658305508645, "oserror": 0.03841231906206598, "write": 0.03718726041413458, "exist_ok": 0.03514007186996752, "test": 0.031420208492828394, "as": 0.027498703769645465, "def": 0.017029236768848162}, "norm": 0.625067654763613, "snippet": "idate / \".write-test\" probe.touch(exist_ok=True) probe.unlink(missing_ok=True) return candidate except PermissionError: print( f\"[agents-auth] нет прав на каталог {candidate} — ищу альтернативу\", file=sys.stderr, ) except OSError as exc: print( f\"[agents-auth] не удалось подготовить каталог {candidate}: {exc}\",…", "text": "idate / \".write-test\"\n        probe.touch(exist_ok=True)\n        probe.unlink(missing_ok=True)\n        return candidate\n    except PermissionError:\n        print(\n            f\"[agents-auth] нет прав на каталог {candidate} — ищу альтернативу\",\n            file=sys.stderr,\n        )\n    except OSError as exc:\n        print(\n            f\"[agents-auth] не удалось подготовить каталог {candidate}: {exc}\",\n            file=sys.stderr,\n        )\n    return None\n\n\ndef resolve_state_dir() -> Path:\n    override = os.environ.get(STATE_ENV_KEY)\n    if override:\n        path = writable_dir(Path(override).expanduser())\n        if path is not None:\n            return path\n    preferred = writable_dir(DEFAULT_STATE_DIR)\n    if preferred is not None:\n        return preferred\n    fallback_env = os.environ.get(STATE_FALLBACK_ENV_KEY)\n    if fallback_env:\n        fallback = writable_dir(Path(fallback_env).expanduser())\n        if fallback is not None:\n            return fallback\n    xdg_state = os.environ.get(\"XDG_STATE_HOME\")\n    if xdg_state:\n        fallback = writable_dir(Path(xdg_state).expanduser() / \"agentcontrol\" / \"agents\")\n        if fallback is not None:\n            return fallback\n    hom"}
{"id": "scripts/agents/auth.py:68-99", "path": "scripts/agents/auth.py", "start": 2000, "end": 3200, "start_line": 68, "end_line": 99, "weights": {"fallback": 0.25546758661050456, "config_path": 0.1936246399289383, "state_path": 0.17397750055332328, "fh": 0.1454414488329626, "home_fallback": 0.11793947936193279, "agents": 0.11207604238278095, "xdg_state": 0.11014207343677579, "writable_dir": 0.10460972588962617, "state": 0.09049386499807253, "agentcontrol": 0.08901491403931214, "return": 0.08097771879220148, "not": 0.07776842548643052, "load": 0.07678436083315836, "state_dir": 0.07678436083315836, "object": 0.0693677746636971, "open": 0.06861353017998016, "if": 0.06672696146429109, "none": 0.06406240157862575, "path": 0.0626549929968152, "is": 0.06131565283950124, "json": 0.05953344728603926, "raise": 0.059390970944174656, "as": 0.057641513670987604, "exists": 0.05528377670767352, "xdg_state_home": 0.05015925187448413, "encoding": 0.04849875027262079, "jsondecodeerror": 0.048406159982234576, "permissionerror": 0.046923941906972466, "home": 0.04563998620865975, "state_filename": 0.04563998620865975, "found": 0.04349437513833082, "load_state": 0.04349437513833082, "utf": 0.04290154340857424, "dict": 0.04270826771908383, "filenotfounderror": 0.04257793110175077, "expanduser": 0.04174128324608125, "resolve_config_path": 0.04174128324608125, "auth": 0.03784258028350275, "local": 0.03636036220824065, "load_config": 0.03591305436559745, "stderr": 0.03591305436559745, "def": 0.03569590015008557, "str": 0.03543064395523297, "file": 0.033256771898019004, "config": 0.03293079543959899, "except": 0.029248177629444125, "try": 0.029032092477020485, "updated_at": 0.02642752561033395, "sys": 0.02626591870344567, "print": 0.02464730990710707, "get": 0.018327107514926205}, "norm": 0.5690788405432772, "snippet": "n.get(\"XDG_STATE_HOME\") if xdg_state: fallback = writable_dir(Path(xdg_state).expanduser() / \"agentcontrol\" / \"agents\") if fallback is not None: return fallback home_fallback = Path.home() / \".local\" / \"state\" / \"agentcontrol\" / \"agents\" fallback = writable_dir(home_fallback) if fallback is not None: return fallback…", "text": "n.get(\"XDG_STATE_HOME\")\n    if xdg_state:\n        fallback = writable_dir(Path(xdg_state).expanduser() / \"agentcontrol\" / \"agents\")\n        if fallback is not None:\n            return fallback\n    home_fallback = Path.home() / \".local\" / \"state\" / \"agentcontrol\" / \"agents\"\n    fallback = writable_dir(home_fallback)\n    if fallback is not None:\n        return fallback\n    raise PermissionError(\"не удалось подобрать каталог для хранения state\")\n\n\ndef load_config() -> Dict[str, object]:\n    config_path = resolve_config_path()\n    if not config_path.exists():\n        raise FileNotFoundError(f\"config not found: {config_path}\")\n    with config_path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef load_state(state_dir: Path) -> Dict[str, object]:\n    state_path = state_dir / STATE_FILENAME\n    if state_path.exists():\n        with state_path.open(\"r\", encoding=\"utf-8\") as fh:\n            try:\n                return json.load(fh)\n            except json.JSONDecodeError:\n                print(\n                    f\"[agents-auth] повреждён state-файл {state_path}, пересоздаю\",\n                    file=sys.stderr,\n                )\n    return {\"updated_at\": None, \"agents\":"}
{"id": "scripts/agents/auth.py:95-133", "path": "scripts/agents/auth.py", "start": 3000, "end": 4200, "start_line": 95, "end_line": 133, "weights": {"str": 0.20151178749538748, "value": 0.10808450866856176, "env": 0.10670529473274804, "state_path": 0.10601753939968137, "command": 0.1035786264642505, "mapping": 0.09986837695122454, "state": 0.09803502041457857, "state_dir": 0.09358093976541174, "fh": 0.08862838288258658, "dict": 0.08675116880438902, "isinstance": 0.08549874086794933, "merged": 0.08499540228532125, "object": 0.08454197537138085, "return": 0.07895327582239643, "part": 0.07866000997113118, "def": 0.05800583774388905, "key": 0.05404225433428088, "none": 0.052050701282633415, "templa": 0.04791291349078519, "agents": 0.045530892218004756, "normalize_env": 0.04474521733369016, "expand_path": 0.04474521733369016, "if": 0.04337252495178921, "updated_at": 0.04294472911679267, "normalize_command": 0.042497701142660625, "list": 0.03723982579515834, "save_state": 0.037082488794536045, "state_filename": 0.037082488794536045, "true": 0.03652130840075485, "dump": 0.03616230882847055, "copy": 0.03533917979989379, "microsecond": 0.03166727644641148, "write": 0.03166727644641148, "auth": 0.03074709648034598, "exist_ok": 0.02992396745176921, "stderr": 0.029179356672047924, "isoformat": 0.029179356672047924, "update": 0.028832077276963287, "utc": 0.02787424663561694, "open": 0.02787424663561694, "file": 0.02702112716714044, "now": 0.02702112716714044, "indent": 0.02702112716714044, "items": 0.02702112716714044, "replace": 0.02675627129467418, "in": 0.02650158425714651, "mkdir": 0.026011660514952892, "environ": 0.026011660514952892, "parents": 0.025778434240346006, "ensure_ascii": 0.025778434240346006, "timezone": 0.025551969108523722, "is": 0.024909483966047377, "datetime": 0.024706550478521903, "os": 0.024127581946070953, "continue": 0.023588575137579143, "as": 0.023416864928838713, "sys": 0.021341058946549606, "print": 0.02002593929952449, "false": 0.01980891145493796, "encoding": 0.019702617298252192, "utf": 0.017428752009733282, "path": 0.016969060603304116, "json": 0.016123641973302297, "not": 0.0157967114269312}, "norm": 0.4643919226411886, "snippet": "print( f\"[agents-auth] повреждён state-файл {state_path}, пересоздаю\", file=sys.stderr, ) return {\"updated_at\": None, \"agents\": {}} def save_state(state_dir: Path, state: Dict[str, object]) -> None: state_path = state_dir / STATE_FILENAME state_dir.mkdir(parents=True, exist_ok=True) state[\"updated_at\"] =…", "text": "             print(\n                    f\"[agents-auth] повреждён state-файл {state_path}, пересоздаю\",\n                    file=sys.stderr,\n                )\n    return {\"updated_at\": None, \"agents\": {}}\n\n\ndef save_state(state_dir: Path, state: Dict[str, object]) -> None:\n    state_path = state_dir / STATE_FILENAME\n    state_dir.mkdir(parents=True, exist_ok=True)\n    state[\"updated_at\"] = datetime.now(timezone.utc).replace(microsecond=0).isoformat()\n    with state_path.open(\"w\", encoding=\"utf-8\") as fh:\n        json.dump(state, fh, ensure_ascii=False, indent=2)\n        fh.write(\"\\n\")\n\n\ndef normalize_command(command: object) -> List[str]:\n    if isinstance(command, list):\n        return [str(part) for part in command]\n    if isinstance(command, str):\n        return [command]\n    return []\n\n\ndef normalize_env(mapping: object) -> Dict[str, str]:\n    if not isinstance(mapping, dict):\n        return {}\n    env: Dict[str, str] = {}\n    for key, value in mapping.items():\n        if value is None:\n            continue\n        env[str(key)] = str(value)\n    return env\n\n\ndef expand_path(value: str, env: Dict[str, str]) -> str:\n    merged = os.environ.copy()\n    merged.update(env)\n    templa"}
{"id": "scripts/agents/auth.py:124-161", "path": "scripts/agents/auth.py", "start": 4000, "end": 5200, "start_line": 124, "end_line": 161, "weights": {"str": 0.24384619663307391, "entries": 0.2119533039996153, "resolved": 0.16845258290330414, "env": 0.1405999177655033, "path_pattern": 0.13528352044456995, "path": 0.1277670445425251, "merged": 0.11999350910868883, "matches": 0.11999350910868883, "list": 0.10514774342162356, "templated": 0.0901890136297133, "expand_path": 0.08422629145165207, "iter_credential_sources": 0.08422629145165207, "entry": 0.08140821819377869, "expanded": 0.07671414992568161, "value": 0.07629494729545536, "match": 0.07176602879889907, "os": 0.06812493725949446, "continue": 0.0666030356825764, "dict": 0.06531852709977526, "return": 0.061924137899918776, "isinstance": 0.053646268779889775, "object": 0.05304594533106249, "if": 0.05102649994328143, "none": 0.04898889532483145, "cfg": 0.04896312567520544, "is": 0.04688844040667742, "safe_substitute": 0.04509450681485665, "expandvars": 0.04509450681485665, "cre": 0.04509450681485665, "recursive": 0.042113145725826036, "store_credentials": 0.042113145725826036, "targets": 0.042113145725826036, "def": 0.04094529723098051, "template": 0.03999783636956294, "stored": 0.03701647528053232, "glob": 0.035883014399449534, "copy": 0.033260404517547096, "extend": 0.033260404517547096, "expanduser": 0.031919804835238604, "warnings": 0.02980449547897551, "not": 0.029734986215399904, "state_dir": 0.029358726200913485, "update": 0.027136072731259564, "iterable": 0.027136072731259564, "tuple": 0.027136072731259564, "key": 0.02543164909848512, "in": 0.024942667536137893, "environ": 0.02448156283760272, "append": 0.018347549758044993, "agent": 0.018347549758044993, "true": 0.017186498070943457, "get": 0.014014846923178862}, "norm": 0.5777087960805498, "snippet": "None: continue env[str(key)] = str(value) return env def expand_path(value: str, env: Dict[str, str]) -> str: merged = os.environ.copy() merged.update(env) templated = Template(value).safe_substitute(merged) expanded = os.path.expandvars(templated) return os.path.expanduser(expanded) def…", "text": "None:\n            continue\n        env[str(key)] = str(value)\n    return env\n\n\ndef expand_path(value: str, env: Dict[str, str]) -> str:\n    merged = os.environ.copy()\n    merged.update(env)\n    templated = Template(value).safe_substitute(merged)\n    expanded = os.path.expandvars(templated)\n    return os.path.expanduser(expanded)\n\n\ndef iter_credential_sources(entries: object, env: Dict[str, str]) -> Iterable[Path]:\n    if entries is None:\n        return []\n    if isinstance(entries, (str, Path)):\n        entries = [entries]\n    if not isinstance(entries, list):\n        return []\n    resolved: List[Path] = []\n    for entry in entries:\n        if entry is None:\n            continue\n        path_pattern = expand_path(str(entry), env)\n        matches = glob(path_pattern, recursive=True)\n        if not matches:\n            resolved.append(Path(path_pattern))\n            continue\n        resolved.extend(Path(match) for match in matches)\n    return resolved\n\n\ndef store_credentials(agent: str, cfg: Dict[str, object], env: Dict[str, str], state_dir: Path) -> Tuple[List[str], List[str]]:\n    stored: List[str] = []\n    warnings: List[str] = []\n    targets = iter_credential_sources(cfg.get(\"cre"}
{"id": "scripts/agents/auth.py:158-183", "path": "scripts/agents/auth.py", "start": 5000, "end": 6200, "start_line": 158, "end_line": 183, "weights": {"src_path": 0.5254484237350772, "dest": 0.26888623343446183, "agent_state_dir": 0.2627242118675386, "str": 0.1352215402328157, "shutil": 0.11523695718619792, "warnings": 0.11156178124240375, "true": 0.10721852007561057, "targets": 0.10508968474701544, "stored": 0.09237138785600726, "parents": 0.09081576833296208, "list": 0.08746234315193152, "src": 0.07682463812413196, "state_dir": 0.07326214244631622, "auth": 0.07221336421072083, "exist_ok": 0.07028014373993503, "agent": 0.06867706698424181, "append": 0.06867706698424181, "cfg": 0.06109160634704533, "mkdir": 0.06109160634704533, "credential": 0.056264705750646835, "copytree": 0.056264705750646835, "dirs_exist_ok": 0.056264705750646835, "continue": 0.055400690231378544, "try": 0.055400690231378544, "agents": 0.053467469760592745, "exists": 0.05274782364768849, "iter_credential_sources": 0.05254484237350772, "rmtree": 0.05254484237350772, "copy2": 0.05254484237350772, "name": 0.05205534056543442, "if": 0.050932873337880914, "env": 0.050122120094648615, "credentials_paths": 0.04618569392800363, "is_dir": 0.044771467507570065, "dict": 0.04074917286958457, "expanduser": 0.039826545482499545, "parent": 0.03841231906206598, "tuple": 0.03385785221514955, "resolve": 0.03385785221514955, "source": 0.03385785221514955, "object": 0.03309288332580045, "in": 0.03112112646710783, "state": 0.028780923424463433, "else": 0.02230780690557809, "path": 0.019926970249751624, "not": 0.018550266629790767, "get": 0.017486414509654363}, "norm": 0.775133328644122, "snippet": "cfg: Dict[str, object], env: Dict[str, str], state_dir: Path) -> Tuple[List[str], List[str]]: stored: List[str] = [] warnings: List[str] = [] targets = iter_credential_sources(cfg.get(\"credentials_paths\"), env) agent_state_dir = state_dir / agent agent_state_dir.mkdir(parents=True, exist_ok=True) for src in targets:…", "text": "cfg: Dict[str, object], env: Dict[str, str], state_dir: Path) -> Tuple[List[str], List[str]]:\n    stored: List[str] = []\n    warnings: List[str] = []\n    targets = iter_credential_sources(cfg.get(\"credentials_paths\"), env)\n    agent_state_dir = state_dir / agent\n    agent_state_dir.mkdir(parents=True, exist_ok=True)\n    for src in targets:\n        src_path = src.expanduser().resolve()\n        if not src_path.exists():\n            warnings.append(f\"[agents-auth] {agent}: credential source не найден: {src_path}\")\n            continue\n        try:\n            if agent_state_dir in src_path.parents:\n                warnings.append(f\"[agents-auth] {agent}: пропуск копирования {src_path} (уже внутри state)\")\n                continue\n            if src_path.is_dir():\n                dest = agent_state_dir / src_path.name\n                if dest.exists():\n                    shutil.rmtree(dest)\n                shutil.copytree(src_path, dest, dirs_exist_ok=True)\n            else:\n                dest = agent_state_dir / src_path.name\n                dest.parent.mkdir(parents=True, exist_ok=True)\n                shutil.copy2(src_path, dest)\n            try:\n                stored.append(str("}
{"id": "scripts/agents/auth.py:179-206", "path": "scripts/agents/auth.py", "start": 6000, "end": 7200, "start_line": 179, "end_line": 206, "weights": {"dest": 0.21806993634193705, "src_path": 0.17898086933476065, "export_cmd": 0.17898086933476065, "export_dest": 0.17898086933476065, "stored": 0.15732001994226236, "result": 0.14001100852419682, "try": 0.12580573406708875, "agent_state_dir": 0.1193205795565071, "append": 0.10396944862892162, "true": 0.09739015573534626, "payload": 0.09643282354258814, "relative_to": 0.09225218405379332, "exc": 0.0872279745367748, "root": 0.0848476951002231, "stdout": 0.0778116177921278, "json": 0.06449456789320919, "credentials_export_command": 0.06388388465438025, "except": 0.06337105153046227, "copy2": 0.05966028977825355, "str": 0.05757479642725356, "env": 0.05690949052413228, "normalize_command": 0.0566636015235475, "false": 0.05282376387983456, "export": 0.04944331839271472, "capture_output": 0.04944331839271472, "valueerror": 0.04821641177129407, "cwd": 0.047118906399858385, "returncode": 0.04612609202689666, "parent": 0.0436139872683874, "shutil": 0.0436139872683874, "oserror": 0.0436139872683874, "warnings": 0.04222303526188197, "auth": 0.0409961286404613, "loads": 0.0409961286404613, "exist_ok": 0.039898623269025615, "subprocess": 0.037574211276169264, "write_text": 0.03677253376433459, "check": 0.03602816955618725, "indent": 0.03602816955618725, "mkdir": 0.03468221401993719, "cfg": 0.03468221401993719, "environ": 0.03468221401993719, "parents": 0.03437124565379467, "ensure_ascii": 0.03437124565379467, "text": 0.03377584550962854, "dumps": 0.03377584550962854, "os": 0.03217010926142794, "strip": 0.03217010926142794, "as": 0.03122248657178495, "run": 0.03056437301322733, "agents": 0.030353928145336502, "name": 0.02955225063350183, "if": 0.02891501663452614, "encoding": 0.026270156397669588, "agent": 0.025992362157230404, "utf": 0.023238336012977708, "get": 0.019854366474503386}, "norm": 0.5932441080415286, "snippet": "dest = agent_state_dir / src_path.name dest.parent.mkdir(parents=True, exist_ok=True) shutil.copy2(src_path, dest) try: stored.append(str(dest.relative_to(ROOT))) except ValueError: stored.append(str(dest)) except OSError as exc: warnings.append(f\"[agents-auth] {agent}: не удалось сохранить {src_path}: {exc}\")…", "text": "  dest = agent_state_dir / src_path.name\n                dest.parent.mkdir(parents=True, exist_ok=True)\n                shutil.copy2(src_path, dest)\n            try:\n                stored.append(str(dest.relative_to(ROOT)))\n            except ValueError:\n                stored.append(str(dest))\n        except OSError as exc:\n            warnings.append(f\"[agents-auth] {agent}: не удалось сохранить {src_path}: {exc}\")\n    export_cmd = normalize_command(cfg.get(\"credentials_export_command\"))\n    if export_cmd:\n        export_dest = agent_state_dir / \"export.json\"\n        try:\n            result = subprocess.run(\n                export_cmd,\n                cwd=ROOT,\n                env={**os.environ, **env},\n                capture_output=True,\n                text=True,\n                check=False,\n            )\n            if result.returncode == 0 and result.stdout.strip():\n                try:\n                    payload = json.loads(result.stdout)\n                    export_dest.write_text(json.dumps(payload, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n                    try:\n                        stored.append(str(export_dest.relative_to(ROOT)))\n                 "}
{"id": "scripts/agents/auth.py:203-231", "path": "scripts/agents/auth.py", "start": 7000, "end": 8200, "start_line": 203, "end_line": 231, "weights": {"candidate": 0.260465607455547, "warnings": 0.16213645540562677, "stored": 0.15102721914457184, "export": 0.14239675697101842, "paths": 0.13284314503746236, "append": 0.12476333835470595, "auth": 0.11806885048452856, "export_dest": 0.11454775637424681, "agent": 0.09981067068376476, "except": 0.09125431420386566, "raw": 0.08856209669164158, "agents": 0.08741931305856913, "entry": 0.07381011782902601, "str": 0.07369573942688457, "result": 0.06720528409161448, "json": 0.06191478517748082, "te_text": 0.06132852926820505, "try": 0.06038675235220261, "export_cmd": 0.05727387818712341, "credentials_exist": 0.05727387818712341, "if": 0.05551683193829019, "root": 0.05430252486414278, "false": 0.05071081332464118, "return": 0.050530096526333716, "jsondecodeerror": 0.05034240638152396, "is_dir": 0.048800899583251366, "is_absolute": 0.04746558565700614, "payload": 0.04628775530044231, "valueerror": 0.04628775530044231, "stored_paths": 0.04628775530044231, "is_file": 0.04523415014386405, "relative_to": 0.04428104834582079, "returncode": 0.04428104834582079, "filenotfounderror": 0.04428104834582079, "path": 0.04344079514445854, "not": 0.040439581252943876, "state_dir": 0.039927867633242346, "stderr": 0.03734957654022134, "object": 0.036071242825122495, "indent": 0.034587042773939765, "ensure_ascii": 0.03299639582764289, "dumps": 0.0324248116892434, "bool": 0.031884139476540646, "strip": 0.030883304890970822, "join": 0.03064799991686888, "encoding": 0.025219350141762808, "or": 0.025219350141762808, "else": 0.024315509527080118, "true": 0.023373637376483104, "utf": 0.0223088025724586, "dict": 0.02220829921392359, "get": 0.019060191815523254, "def": 0.018561868078044497, "in": 0.01696101392457377}, "norm": 0.5617821989068997, "snippet": "te_text(json.dumps(payload, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\") try: stored.append(str(export_dest.relative_to(ROOT))) except ValueError: stored.append(str(export_dest)) except json.JSONDecodeError: warnings.append(f\"[agents-auth] {agent}: export командa вернула не-JSON\") else: warnings.append(…", "text": "te_text(json.dumps(payload, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n                    try:\n                        stored.append(str(export_dest.relative_to(ROOT)))\n                    except ValueError:\n                        stored.append(str(export_dest))\n                except json.JSONDecodeError:\n                    warnings.append(f\"[agents-auth] {agent}: export командa вернула не-JSON\")\n            else:\n                warnings.append(\n                    f\"[agents-auth] {agent}: export команда завершилась с кодом {result.returncode}: {result.stderr.strip()}\"\n                )\n        except FileNotFoundError:\n            warnings.append(f\"[agents-auth] {agent}: export команда не найдена: {' '.join(export_cmd)}\")\n    return stored, warnings\n\n\ndef credentials_exist(agent: str, state_dir: Path, entry: Dict[str, object]) -> bool:\n    paths = entry.get(\"stored_paths\", []) or []\n    if not paths:\n        return False\n    for raw in paths:\n        candidate = Path(raw)\n        if not candidate.is_absolute():\n            candidate = ROOT / candidate\n        try:\n            if candidate.is_file():\n                return True\n            if candidate.is_dir():\n "}
{"id": "scripts/agents/auth.py:224-263", "path": "scripts/agents/auth.py", "start": 8000, "end": 9200, "start_line": 224, "end_line": 263, "weights": {"candidate": 0.297918178462227, "process": 0.15999134547825175, "stdout": 0.14646892760871114, "subprocess": 0.14145585421616663, "cwd": 0.13304161807018838, "line": 0.1141635625945297, "child": 0.11230172193553609, "str": 0.1083760873924773, "true": 0.09166132304503177, "is_file": 0.08869441204679225, "exc": 0.08209691721108217, "env": 0.08034281015171617, "stderr": 0.07323446380435557, "if": 0.06803533325770857, "popen": 0.060126009086475536, "preexec_fn": 0.060126009086475536, "setsid": 0.060126009086475536, "assert": 0.060126009086475536, "not": 0.05946997243079981, "try": 0.05920269838451236, "run_with_auto_exit": 0.05615086096776804, "trigger": 0.05615086096776804, "readline": 0.05615086096776804, "buf": 0.053330448492750586, "login_detected": 0.053330448492750586, "command": 0.05199240857813359, "rglob": 0.05114276661712107, "completedprocess": 0.05114276661712107, "print": 0.05026118098704186, "false": 0.049716483651609, "return": 0.04953931031993501, "pipe": 0.04935530037404309, "while": 0.04935530037404309, "break": 0.04935530037404309, "is_dir": 0.04784401919926604, "permissionerror": 0.04784401919926604, "list": 0.046732330409610466, "is_absolute": 0.04653488789902562, "raw": 0.043412792495902734, "end": 0.042559739780318136, "auth": 0.03858459166161064, "file": 0.033908865464646824, "text": 0.031789031067885685, "is": 0.031258960271118276, "os": 0.030277749893108646, "except": 0.029821671308452834, "continue": 0.02960134919225618, "as": 0.02938586971462113, "agents": 0.02856840296031671, "sys": 0.02678093671723872, "root": 0.02661888473732489, "agent": 0.024463399677393322, "dict": 0.021772842366591754, "none": 0.021772842366591754, "path": 0.021294507423754185, "def": 0.01819790988043578, "in": 0.01662844502409193}, "norm": 0.5790941222551584, "snippet": "(raw) if not candidate.is_absolute(): candidate = ROOT / candidate try: if candidate.is_file(): return True if candidate.is_dir(): # Проверяем наличие хотя бы одного файла внутри каталога for child in candidate.rglob(\"*\"): if child.is_file(): return True except PermissionError as exc: print( f\"[agents-auth] {agent}:…", "text": "(raw)\n        if not candidate.is_absolute():\n            candidate = ROOT / candidate\n        try:\n            if candidate.is_file():\n                return True\n            if candidate.is_dir():\n                # Проверяем наличие хотя бы одного файла внутри каталога\n                for child in candidate.rglob(\"*\"):\n                    if child.is_file():\n                        return True\n        except PermissionError as exc:\n            print(\n                f\"[agents-auth] {agent}: нет доступа к {candidate} ({exc})\",\n                file=sys.stderr,\n            )\n            continue\n    return False\n\n\ndef run_with_auto_exit(command: List[str], cwd: Path, env: Dict[str, str], trigger: str) -> subprocess.CompletedProcess[str]:\n    process = subprocess.Popen(\n        command,\n        cwd=cwd,\n        env=env,\n        text=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        preexec_fn=os.setsid,\n    )\n    assert process.stdout is not None\n    buf: List[str] = []\n    login_detected = False\n    try:\n        while True:\n            line = process.stdout.readline()\n            if not line:\n                break\n            print(line, end=\"\")\n       "}
{"id": "scripts/agents/auth.py:255-290", "path": "scripts/agents/auth.py", "start": 9000, "end": 10200, "start_line": 255, "end_line": 290, "weights": {"process": 0.41389065460678176, "break": 0.2736000346821954, "line": 0.21095440914206573, "tail": 0.2063721115522006, "timeout": 0.18676264626235894, "login_detected": 0.17738170911719217, "signal": 0.17738170911719217, "try": 0.164094435739681, "pgid": 0.1333228897134892, "sig": 0.1333228897134892, "trigger": 0.12450843084157262, "wait": 0.12450843084157262, "timeoutexpired": 0.12450843084157262, "buf": 0.11825447274479478, "except": 0.09918947196072354, "end": 0.09437159690418369, "subprocess": 0.07841574527200541, "if": 0.07543047817702471, "os": 0.06713761932819744, "getpgid": 0.0666614448567446, "pid": 0.0666614448567446, "sigterm": 0.0666614448567446, "sigkill": 0.0666614448567446, "killpg": 0.0666614448567446, "processlookuperror": 0.0666614448567446, "ex": 0.0666614448567446, "readline": 0.06225421542078631, "sigint": 0.06225421542078631, "poll": 0.06225421542078631, "terminate": 0.06225421542078631, "communicate": 0.06225421542078631, "st": 0.05912723637239739, "print": 0.05572435283345945, "while": 0.05472000693643908, "append": 0.05424492971943737, "true": 0.05081225516626761, "not": 0.043956066579286815, "stdout": 0.04059736580458841, "in": 0.03687176940124732, "10": 0.036524610919355695, "is": 0.034656673344065914, "continue": 0.032818887147936196, "false": 0.027560224632957164, "none": 0.02413945566730825, "str": 0.020026016148609934}, "norm": 0.8154881063355569, "snippet": "st[str] = [] login_detected = False try: while True: line = process.stdout.readline() if not line: break print(line, end=\"\") buf.append(line) if trigger and trigger in line: login_detected = True pgid = os.getpgid(process.pid) for sig in (signal.SIGINT, signal.SIGTERM, signal.SIGKILL): if process.poll() is not None:…", "text": "st[str] = []\n    login_detected = False\n    try:\n        while True:\n            line = process.stdout.readline()\n            if not line:\n                break\n            print(line, end=\"\")\n            buf.append(line)\n            if trigger and trigger in line:\n                login_detected = True\n                pgid = os.getpgid(process.pid)\n                for sig in (signal.SIGINT, signal.SIGTERM, signal.SIGKILL):\n                    if process.poll() is not None:\n                        break\n                    try:\n                        os.killpg(pgid, sig)\n                    except ProcessLookupError:\n                        break\n                    try:\n                        process.wait(timeout=1)\n                        break\n                    except subprocess.TimeoutExpired:\n                        continue\n                break\n        if login_detected:\n            try:\n                process.wait(timeout=2)\n            except subprocess.TimeoutExpired:\n                process.terminate()\n        try:\n            tail = process.communicate(timeout=10)[0]\n            if tail:\n                print(tail, end=\"\")\n                buf.append(tail)\n        ex"}
{"id": "scripts/agents/auth.py:284-317", "path": "scripts/agents/auth.py", "start": 10000, "end": 11200, "start_line": 284, "end_line": 317, "weights": {"process": 0.4491500157462848, "tail": 0.3483712708771093, "returncode": 0.20312407498082932, "executable": 0.19962222922057102, "buf": 0.14971667191542826, "terminate": 0.10508968474701544, "communicate": 0.10508968474701544, "auth_command": 0.10508968474701544, "exec_path": 0.10508968474701544, "command": 0.09730689311870874, "end": 0.07965309096499909, "if": 0.07639931000682137, "stdout": 0.06853133310132357, "subprocess": 0.0661857666516009, "object": 0.0661857666516009, "cfg": 0.06109160634704533, "is": 0.05850300821383605, "kill": 0.056264705750646835, "130": 0.056264705750646835, "not": 0.055650799889372306, "timeout": 0.05254484237350772, "timeoutexpired": 0.05254484237350772, "poll": 0.05254484237350772, "wait": 0.05254484237350772, "sigint": 0.05254484237350772, "str": 0.050708077587305896, "finally": 0.049905557305142755, "login_detected": 0.049905557305142755, "signal": 0.049905557305142755, "run_auth": 0.049905557305142755, "normalize_command": 0.049905557305142755, "completedprocess": 0.047858368760975684, "print": 0.04703339872181899, "configured": 0.04618569392800363, "append": 0.045784711322827874, "skipped": 0.044771467507570065, "stored_paths": 0.0424658305508645, "which": 0.0424658305508645, "is_file": 0.04149922031547161, "dict": 0.04074917286958457, "path": 0.03985394049950325, "shutil": 0.03841231906206598, "message": 0.03718726041413458, "state_dir": 0.03663107122315811, "elif": 0.03426566655066179, "return": 0.03090525781427139, "10": 0.030828111968630497, "join": 0.02811743111639347, "except": 0.027906518105157697, "try": 0.027700345115689272, "or": 0.023137018478681475, "agent": 0.022892355661413937, "else": 0.02230780690557809, "none": 0.020374586434792286, "get": 0.017486414509654363, "def": 0.017029236768848162, "status": 0.01600546552656869, "in": 0.015560563233553915}, "norm": 0.7637499338868632, "snippet": "process.terminate() try: tail = process.communicate(timeout=10)[0] if tail: print(tail, end=\"\") buf.append(tail) except subprocess.TimeoutExpired: process.terminate() tail = process.communicate()[0] if tail: print(tail, end=\"\") buf.append(tail) finally: returncode = process.poll() if returncode is None: process.kill()…", "text": "             process.terminate()\n        try:\n            tail = process.communicate(timeout=10)[0]\n            if tail:\n                print(tail, end=\"\")\n                buf.append(tail)\n        except subprocess.TimeoutExpired:\n            process.terminate()\n            tail = process.communicate()[0]\n            if tail:\n                print(tail, end=\"\")\n                buf.append(tail)\n    finally:\n        returncode = process.poll()\n        if returncode is None:\n            process.kill()\n            process.wait()\n        elif login_detected and returncode in (130, -signal.SIGINT):\n            process.returncode = 0\n    stdout = \"\".join(buf)\n    return subprocess.CompletedProcess(command, process.returncode or 0, stdout, \"\")\n\n\ndef run_auth(agent: str, cfg: Dict[str, object], state_dir: Path) -> Dict[str, object]:\n    command = normalize_command(cfg.get(\"auth_command\"))\n    if not command:\n        return {\n            \"status\": \"skipped\",\n            \"message\": \"auth_command not configured\",\n            \"stored_paths\": [],\n        }\n    executable = command[0]\n    exec_path = shutil.which(executable) if not Path(executable).is_file() else executable\n    if exec_path is N"}
{"id": "scripts/agents/auth.py:312-340", "path": "scripts/agents/auth.py", "start": 11000, "end": 12200, "start_line": 312, "end_line": 340, "weights": {"executable": 0.28883393342976427, "result": 0.17842110820782603, "auto_exit_trigger": 0.1628191042518718, "env": 0.12086971438753759, "exec_path": 0.10136969590641311, "env_overrides": 0.10136969590641311, "stderr": 0.09915816780589737, "command": 0.09386240132689604, "cfg": 0.08839360741364523, "stored_paths": 0.08192523062025187, "if": 0.0736949096525976, "print": 0.06805274947803013, "stdout": 0.06610544520393158, "else": 0.06455445007189411, "strip": 0.054660716621187294, "auth_env": 0.054273034750623936, "auth_auto_exit_trigger": 0.054273034750623936, "successfully": 0.054273034750623936, "auth_auto_exit": 0.054273034750623936, "not": 0.053680860070279474, "normalize_env": 0.050684847953206554, "logged": 0.050684847953206554, "run_with_auto_exit": 0.050684847953206554, "get": 0.050602279156256424, "root": 0.04805533173817945, "configured": 0.04455080210754332, "skipped": 0.04318663679933749, "capture_output": 0.042004943059297466, "true": 0.04136926969289045, "which": 0.04096261531012593, "is_file": 0.04003022136625137, "found": 0.04003022136625137, "copy": 0.04003022136625137, "cwd": 0.04003022136625137, "shutil": 0.037052590953674254, "oserror": 0.037052590953674254, "exc": 0.037052590953674254, "message": 0.03587089721363424, "microsecond": 0.03587089721363424, "start": 0.0348285694644627, "auth": 0.0348285694644627, "update": 0.0326593441721354, "subprocess": 0.03192145382754203, "utc": 0.03157436787043335, "now": 0.03060800245481395, "check": 0.03060800245481395, "file": 0.03060800245481395, "replace": 0.03030798872317075, "return": 0.029811266387217532, "environ": 0.029464535804548407, "timezone": 0.028943823414964924, "text": 0.02869452361879947, "is": 0.028216052634106762, "datetime": 0.02798618107301596, "os": 0.027330358310593647, "join": 0.027122123820237945, "except": 0.026918676756302558, "try": 0.026719801925753364, "as": 0.02652529832647217, "run": 0.02596619300238782, "agents": 0.0257874079818788, "sys": 0.02417394287750752, "false": 0.022438412975504946, "agent": 0.02208200678844353}, "norm": 0.5493684506797261, "snippet": "not configured\", \"stored_paths\": [], } executable = command[0] exec_path = shutil.which(executable) if not Path(executable).is_file() else executable if exec_path is None: return { \"status\": \"skipped\", \"message\": f\"executable '{executable}' not found\", \"stored_paths\": [], } env_overrides =…", "text": " not configured\",\n            \"stored_paths\": [],\n        }\n    executable = command[0]\n    exec_path = shutil.which(executable) if not Path(executable).is_file() else executable\n    if exec_path is None:\n        return {\n            \"status\": \"skipped\",\n            \"message\": f\"executable '{executable}' not found\",\n            \"stored_paths\": [],\n        }\n    env_overrides = normalize_env(cfg.get(\"auth_env\"))\n    env = os.environ.copy()\n    env.update(env_overrides)\n    start = datetime.now(timezone.utc).replace(microsecond=0)\n    print(f\"[agents-auth] Запуск аутентификации для {agent}: {' '.join(command)}\")\n    auto_exit_trigger = str(cfg.get(\"auth_auto_exit_trigger\", \"Successfully logged in\")) if cfg.get(\"auth_auto_exit\") else \"\"\n    try:\n        if auto_exit_trigger:\n            result = run_with_auto_exit(command, ROOT, env, auto_exit_trigger)\n        else:\n            result = subprocess.run(command, cwd=ROOT, env=env, check=False, capture_output=True, text=True)\n            if result.stdout:\n                print(result.stdout.strip())\n            if result.stderr:\n                print(result.stderr.strip(), file=sys.stderr)\n    except OSError as exc:\n        return {\n    "}
{"id": "scripts/agents/auth.py:334-369", "path": "scripts/agents/auth.py", "start": 12000, "end": 13200, "start_line": 334, "end_line": 369, "weights": {"result": 0.21983036852397256, "stored_paths": 0.21629792196468367, "status": 0.16304633106504554, "env_overrides": 0.16058096687978526, "stderr": 0.13962458519708912, "failed": 0.13682495210257392, "returncode": 0.12415247199762838, "exc": 0.11739091900276237, "started_at": 0.11463276498729914, "start": 0.11034472007899865, "auth": 0.11034472007899865, "isoformat": 0.10471843889781685, "print": 0.09582505533978074, "warn": 0.08454981335301691, "message": 0.07576469878767605, "warnings": 0.07576469878767605, "command": 0.0743442851631256, "stdout": 0.06981229259854456, "file": 0.06464867808213039, "cfg": 0.06223350553110224, "strip": 0.057725803534524896, "return_code": 0.05731638249364957, "finished_at": 0.05731638249364957, "exited": 0.05731638249364957, "except": 0.056856270532003525, "as": 0.056025396465258975, "store_credentials": 0.05352698895992841, "sys": 0.05105898215249251, "return": 0.0472243892769474, "filenotfounderror": 0.0413841573325428, "oserror": 0.03913030633425412, "ok": 0.03848551314278729, "microsecond": 0.03788234939383803, "to": 0.03731576414321714, "state_dir": 0.03731576414321714, "load_config": 0.03490614629927228, "object": 0.03371144189263784, "utc": 0.03334489317157914, "now": 0.03232433904106519, "replace": 0.03200750210951677, "timezone": 0.030566841550383517, "main": 0.030303562326395698, "datetime": 0.029555499637857977, "try": 0.028218108575795608, "agents": 0.02723343085936733, "if": 0.025942444830976723, "agent": 0.023320250159758117, "int": 0.02307748860458746, "dict": 0.020755419826096813, "def": 0.017347540259854667, "str": 0.017218630707216017, "in": 0.01585141488277922}, "norm": 0.5988741367191405, "snippet": "result.stdout: print(result.stdout.strip()) if result.stderr: print(result.stderr.strip(), file=sys.stderr) except OSError as exc: return { \"status\": \"failed\", \"message\": f\"failed to start auth command: {exc}\", \"stored_paths\": [], \"started_at\": start.isoformat(), } status: Dict[str, object] = { \"command\": command,…", "text": "result.stdout:\n                print(result.stdout.strip())\n            if result.stderr:\n                print(result.stderr.strip(), file=sys.stderr)\n    except OSError as exc:\n        return {\n            \"status\": \"failed\",\n            \"message\": f\"failed to start auth command: {exc}\",\n            \"stored_paths\": [],\n            \"started_at\": start.isoformat(),\n        }\n    status: Dict[str, object] = {\n        \"command\": command,\n        \"return_code\": result.returncode,\n        \"started_at\": start.isoformat(),\n        \"finished_at\": datetime.now(timezone.utc).replace(microsecond=0).isoformat(),\n        \"env_overrides\": env_overrides,\n        \"stored_paths\": [],\n    }\n    if result.returncode != 0:\n        status[\"status\"] = \"failed\"\n        status[\"message\"] = f\"auth exited with {result.returncode}\"\n        return status\n    stored_paths, warnings = store_credentials(agent, cfg, env_overrides, state_dir)\n    for warn in warnings:\n        print(warn, file=sys.stderr)\n    status[\"status\"] = \"ok\"\n    status[\"stored_paths\"] = stored_paths\n    return status\n\n\ndef main() -> int:\n    try:\n        cfg = load_config()\n    except FileNotFoundError as exc:\n        print(f\"[agents-auth]"}
{"id": "scripts/agents/auth.py:360-396", "path": "scripts/agents/auth.py", "start": 13000, "end": 14200, "start_line": 360, "end_line": 396, "weights": {"agents_cfg": 0.19143347504390273, "agents": 0.16040240928177824, "entry_state": 0.15763452712052314, "name": 0.15616602169630325, "state_agents": 0.14357510628292705, "state_dir": 0.10989321366947434, "auth": 0.10832004631608126, "skipped_count": 0.10508968474701544, "total_agents": 0.10508968474701544, "stderr": 0.10279699965198535, "isinstance": 0.10040219111098637, "file": 0.0951936957080911, "data": 0.08499992171826831, "stored_paths": 0.084931661101729, "exc": 0.07682463812413196, "ok": 0.07555871387666496, "sys": 0.07518318014197292, "print": 0.07055009808272848, "get": 0.06994565803861745, "status": 0.06402186210627477, "dict": 0.06112375930437686, "cfg": 0.06109160634704533, "state": 0.057561846848926866, "not": 0.055650799889372306, "continue": 0.055400690231378544, "credentials_exist": 0.05254484237350772, "skipping": 0.05254484237350772, "if": 0.050932873337880914, "already": 0.049905557305142755, "login": 0.049905557305142755, "run_auth": 0.049905557305142755, "return": 0.04635788672140708, "credentials": 0.04618569392800363, "present": 0.04618569392800363, "resolve_state_dir": 0.044771467507570065, "load_state": 0.04149922031547161, "filenotfounderror": 0.04062481499616587, "exit_code": 0.03777935693833248, "setdefault": 0.03663107122315811, "load_config": 0.03426566655066179, "items": 0.031731231902697034, "config": 0.031420208492828394, "result": 0.030828111968630497, "main": 0.029747533659856332, "except": 0.027906518105157697, "try": 0.027700345115689272, "as": 0.027498703769645465, "or": 0.023137018478681475, "int": 0.022654048446705124, "else": 0.02230780690557809, "json": 0.018934185069566, "def": 0.017029236768848162, "in": 0.015560563233553915}, "norm": 0.5570846822853458, "snippet": "status\"] = \"ok\" status[\"stored_paths\"] = stored_paths return status def main() -> int: try: cfg = load_config() except FileNotFoundError as exc: print(f\"[agents-auth] {exc}\", file=sys.stderr) return 1 agents_cfg = cfg.get(\"agents\", {}) if not isinstance(agents_cfg, dict) or not agents_cfg: print(\"[agents-auth] в…", "text": "status\"] = \"ok\"\n    status[\"stored_paths\"] = stored_paths\n    return status\n\n\ndef main() -> int:\n    try:\n        cfg = load_config()\n    except FileNotFoundError as exc:\n        print(f\"[agents-auth] {exc}\", file=sys.stderr)\n        return 1\n\n    agents_cfg = cfg.get(\"agents\", {})\n    if not isinstance(agents_cfg, dict) or not agents_cfg:\n        print(\"[agents-auth] в config/agents.json не найдены агенты\", file=sys.stderr)\n        return 1\n\n    state_dir = resolve_state_dir()\n    state = load_state(state_dir)\n    state_agents = state.setdefault(\"agents\", {})\n\n    exit_code = 0\n    skipped_count = 0\n    total_agents = 0\n    for name, data in agents_cfg.items():\n        if not isinstance(data, dict):\n            continue\n        total_agents += 1\n        entry_state = state_agents.get(name, {}) if isinstance(state_agents.get(name), dict) else {}\n        if entry_state.get(\"status\") == \"ok\" and credentials_exist(name, state_dir, entry_state):\n            print(\n                f\"[agents-auth] {name}: credentials already present — skipping login\",\n                file=sys.stderr,\n            )\n            skipped_count += 1\n            continue\n        result = run_auth(name, data, s"}
{"id": "scripts/agents/auth.py:391-413", "path": "scripts/agents/auth.py", "start": 14000, "end": 14750, "start_line": 391, "end_line": 413, "weights": {"exit_code": 0.3027904342851647, "skipped_count": 0.25267887435495623, "result": 0.19766260026945434, "already": 0.15999134547825175, "agents": 0.1285578133214252, "name": 0.1251624732713019, "state_dir": 0.11743490480365394, "auth": 0.11575377498483193, "stderr": 0.10985169570653336, "file": 0.10172659639394048, "authenticated": 0.0901890136297133, "accounts": 0.0901890136297133, "skipping": 0.08422629145165207, "total_agents": 0.08422629145165207, "switch": 0.08422629145165207, "sys": 0.08034281015171617, "login": 0.07999567273912588, "run_auth": 0.07999567273912588, "all": 0.07999567273912588, "state_agents": 0.07671414992568161, "logout": 0.07671414992568161, "or": 0.07417455924047885, "credentials": 0.07403295056106464, "present": 0.07403295056106464, "failed": 0.07176602879889907, "skipped": 0.07176602879889907, "save_state": 0.06980233184853844, "if": 0.06123179993193772, "to": 0.05871745240182697, "get": 0.05605938769271545, "elif": 0.05492584785326668, "__name__": 0.05492584785326668, "__main__": 0.05492584785326668, "agentcall": 0.05246917013763189, "status": 0.05131163948223492, "systemexit": 0.04896312567520544, "main": 0.04768354660182853, "state": 0.04613412725391933, "data": 0.04541662483966297, "raise": 0.04541662483966297, "continue": 0.044402023788384266, "run": 0.04314970307749741, "print": 0.0376958857402814, "return": 0.024769655159967506}, "norm": 0.6709498595875704, "snippet": "-auth] {name}: credentials already present — skipping login\", file=sys.stderr, ) skipped_count += 1 continue result = run_auth(name, data, state_dir) state_agents[name] = result if result.get(\"status\") == \"failed\": exit_code = exit_code or 1 elif result.get(\"status\") == \"skipped\": exit_code = exit_code or 0…", "text": "-auth] {name}: credentials already present — skipping login\",\n                file=sys.stderr,\n            )\n            skipped_count += 1\n            continue\n        result = run_auth(name, data, state_dir)\n        state_agents[name] = result\n        if result.get(\"status\") == \"failed\":\n            exit_code = exit_code or 1\n        elif result.get(\"status\") == \"skipped\":\n            exit_code = exit_code or 0\n    save_state(state_dir, state)\n    if skipped_count and skipped_count == total_agents:\n        print(\n            \"[agents-auth] All agents already authenticated. To switch accounts run: agentcall agents logout\",\n            file=sys.stderr,\n        )\n    return exit_code\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/logs.py:1-51", "path": "scripts/agents/logs.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 51, "weights": {"path": 0.2818677547541203, "import": 0.16133865132267872, "logentry": 0.12457341403650138, "override": 0.10358965681800927, "log_dir": 0.0943041963269826, "return": 0.09000271645911857, "root": 0.08290461811319508, "default_log_dir": 0.07964217091521143, "value": 0.07920696818459487, "config": 0.07843059677217469, "default_config_path": 0.07685863569698313, "str": 0.07032036204855398, "dataclass": 0.06392279050023192, "fh": 0.057732483506214155, "agent": 0.057143513750246996, "def": 0.056677459780288535, "resolve": 0.056343601396203064, "list": 0.05458050803565192, "json": 0.047263194791970095, "os": 0.047150083803008884, "agents": 0.04448820002980617, "inspect": 0.043720517700094205, "if": 0.04237926102159557, "execution": 0.041524471345500455, "discover_logs": 0.039821085457605716, "logs": 0.038429317848491566, "agents_config_path": 0.038429317848491566, "resolve_log_dir": 0.038429317848491566, "is_absolute": 0.036233271493897816, "dataclasses": 0.03452988560600309, "dict": 0.0339058003266009, "none": 0.0339058003266009, "resolve_config_path": 0.03313811799688893, "expanduser": 0.03313811799688893, "class": 0.03196139525011596, "entries": 0.0314347321089942, "not": 0.030869909353392268, "load": 0.030479288269650642, "typing": 0.03004296449988004, "__file__": 0.03004296449988004, "__future__": 0.029630237619954272, "annotations": 0.029630237619954272, "timestamp": 0.029630237619954272, "get": 0.029099529489348477, "load_config": 0.028511127129939955, "iterable": 0.028171800698101532, "isinstance": 0.027846918145286295, "open": 0.027235905109610443, "argparse": 0.026143532257391564, "reports": 0.02541597363293107, "environ": 0.02541597363293107, "pathlib": 0.025188088418048007, "parents": 0.025188088418048007, "as": 0.022880600846498896, "usr": 0.022092934921039118, "exists": 0.021944705258007808, "env": 0.020852332405788928, "python3": 0.020852332405788928, "bin": 0.020241319370113076, "command": 0.020241319370113076, "encoding": 0.01925141232195634, "utf": 0.017029620284319542, "in": 0.012947338873720432}, "norm": 0.4997072032916635, "snippet": "#!/usr/bin/env python3 \"\"\"Inspect agent execution logs.\"\"\" from __future__ import annotations import argparse import json import os from dataclasses import dataclass from pathlib import Path from typing import Iterable, List ROOT = Path(__file__).resolve().parents[2] DEFAULT_CONFIG_PATH = ROOT / \"config\" /…", "text": "#!/usr/bin/env python3\n\"\"\"Inspect agent execution logs.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Iterable, List\n\nROOT = Path(__file__).resolve().parents[2]\nDEFAULT_CONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nDEFAULT_LOG_DIR = ROOT / \"reports\" / \"agents\"\n\n\n@dataclass\nclass LogEntry:\n    path: Path\n    agent: str\n    command: str\n    timestamp: str\n\n\ndef resolve_config_path() -> Path:\n    override = os.environ.get(\"AGENTS_CONFIG_PATH\")\n    if override:\n        return Path(override).expanduser()\n    return DEFAULT_CONFIG_PATH\n\n\ndef load_config(path: Path) -> dict:\n    with path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef resolve_log_dir(config: dict) -> Path:\n    value = config.get(\"log_dir\")\n    if isinstance(value, str):\n        path = Path(value)\n        if not path.is_absolute():\n            return (ROOT / path).resolve()\n        return path\n    return DEFAULT_LOG_DIR\n\n\ndef discover_logs(log_dir: Path, agent: str | None = None) -> List[LogEntry]:\n    if not log_dir.exists():\n        return []\n    entries: List[LogEntry] = []\n    for path in "}
{"id": "scripts/agents/logs.py:44-84", "path": "scripts/agents/logs.py", "start": 1000, "end": 2200, "start_line": 44, "end_line": 84, "weights": {"logentry": 0.23858358536230526, "entry": 0.1942371521816474, "entries": 0.18061183799465966, "10": 0.1768560107674065, "timestamp": 0.1702439091321934, "agent_name": 0.15072073207137737, "parts": 0.1324800167934841, "agent": 0.13132982984705888, "command": 0.1162988086616146, "path": 0.1143178819591014, "header": 0.11213291447155035, "log_dir": 0.10836710279679579, "rows": 0.10214634547931604, "lines": 0.08460742617726909, "format": 0.08327295729299322, "idx": 0.07615953434372719, "return": 0.07387441012621888, "list": 0.06271970660237193, "len": 0.055037204443272175, "continue": 0.05297083539666895, "stem": 0.05024024402379246, "def": 0.04884702125801183, "if": 0.048698975384465076, "str": 0.048484039096634575, "format_list": 0.04771671707246105, "show_entry": 0.04771671707246105, "default_log_dir": 0.04575931749952938, "discover_logs": 0.04575931749952938, "append": 0.04377660994901963, "glob": 0.04280780665197488, "40": 0.04163647864649661, "widths": 0.04060329412319501, "none": 0.03896192844547998, "enumerate": 0.03884302486475508, "sorted": 0.03672756822601045, "split": 0.03672756822601045, "content": 0.03672756822601045, "not": 0.035473316888547254, "start": 0.03452305569723057, "iterable": 0.03237285869694123, "in": 0.029756164779953975, "join": 0.026884210453393752, "try": 0.026485417698334474, "exists": 0.025217161305254584, "log": 0.025217161305254584}, "norm": 0.61738951154468, "snippet": "return DEFAULT_LOG_DIR def discover_logs(log_dir: Path, agent: str | None = None) -> List[LogEntry]: if not log_dir.exists(): return [] entries: List[LogEntry] = [] for path in sorted(log_dir.glob(\"*.log\")): parts = path.stem.split(\"-\", 2) if len(parts) < 3: continue timestamp, agent_name, command = parts if agent and…", "text": " return DEFAULT_LOG_DIR\n\n\ndef discover_logs(log_dir: Path, agent: str | None = None) -> List[LogEntry]:\n    if not log_dir.exists():\n        return []\n    entries: List[LogEntry] = []\n    for path in sorted(log_dir.glob(\"*.log\")):\n        parts = path.stem.split(\"-\", 2)\n        if len(parts) < 3:\n            continue\n        timestamp, agent_name, command = parts\n        if agent and agent_name != agent:\n            continue\n        entries.append(LogEntry(path=path, agent=agent_name, command=command, timestamp=timestamp))\n    return entries\n\n\ndef format_list(entries: Iterable[LogEntry]) -> str:\n    rows = list(entries)\n    if not rows:\n        return \"Логи не найдены.\"\n\n    widths = [8, 10, 10, 40]\n    header = \"{:<8}  {:<10}  {:<10}  {}\".format(\"#\", \"Timestamp\", \"Agent\", \"Command\")\n    lines = [header, \"-\" * len(header)]\n    for idx, entry in enumerate(rows, start=1):\n        lines.append(\n            \"{:<8}  {:<10}  {:<10}  {}\".format(\n                idx,\n                entry.timestamp,\n                entry.agent,\n                entry.command,\n            )\n        )\n    return \"\\n\".join(lines)\n\n\ndef show_entry(entry: LogEntry) -> str:\n    try:\n        content = entry.path.r"}
{"id": "scripts/agents/logs.py:74-108", "path": "scripts/agents/logs.py", "start": 2000, "end": 3200, "start_line": 74, "end_line": 108, "weights": {"last": 0.2575651934876302, "entry": 0.2574771552175326, "logs": 0.23415072735592538, "agent": 0.17408837909958969, "parser": 0.14476580054349358, "args": 0.12567756468698993, "header": 0.09909420348648636, "add_argument": 0.08907599613549905, "list_only": 0.08879671036763319, "help": 0.08483595993098848, "environ": 0.07743005920730163, "list": 0.07390228995008166, "os": 0.07182163928132748, "content": 0.0649138415157394, "log_dir": 0.06384418459346108, "or": 0.058649651492471644, "int": 0.05742537862071763, "config": 0.05309771667780302, "return": 0.05222748994969893, "path": 0.05051255249355644, "filter": 0.047541495556748095, "stamp": 0.044398355183816594, "inspect": 0.044398355183816594, "show": 0.044398355183816594, "get": 0.04432602747796105, "show_entry": 0.04216826159891907, "logentry": 0.04216826159891907, "format_list": 0.04216826159891907, "command": 0.04111027655015214, "discover_logs": 0.04043846662749108, "resolve_log_dir": 0.03902512122598756, "found": 0.03506523266966205, "filenotfounderror": 0.034326394066527745, "available": 0.034326394066527745, "by": 0.03365188726815853, "resolve_config_path": 0.03365188726815853, "argumentparser": 0.0324569207578697, "store_true": 0.0324569207578697, "parse_args": 0.03192209229673054, "description": 0.031421793683261, "timestamp": 0.03008962114894581, "load_config": 0.028953160108698715, "def": 0.02877809004347984, "action": 0.027658167204333086, "argparse": 0.02654885833890151, "default": 0.02654885833890151, "read_text": 0.025135512937397984, "main": 0.025135512937397984, "lines": 0.024923117788652912, "len": 0.024318764754003984, "strip": 0.02394054642710916, "join": 0.023758139470440993, "except": 0.023579926150869682, "try": 0.02340571796597, "log": 0.022284933246504053, "type": 0.02199237256446648, "if": 0.021518151914065965, "print": 0.019870699459993292, "encoding": 0.01954988383082388, "else": 0.018849232191534972, "utf": 0.017293645405006667, "not": 0.01567425629959065, "str": 0.014282120043969875}, "norm": 0.608417024880052, "snippet": "stamp, entry.agent, entry.command, ) ) return \"\\n\".join(lines) def show_entry(entry: LogEntry) -> str: try: content = entry.path.read_text(encoding=\"utf-8\") except FileNotFoundError: return f\"Log not found: {entry.path}\" header = f\"--- {entry.timestamp} {entry.agent} {entry.command} ({entry.path}) ---\" return…", "text": "stamp,\n                entry.agent,\n                entry.command,\n            )\n        )\n    return \"\\n\".join(lines)\n\n\ndef show_entry(entry: LogEntry) -> str:\n    try:\n        content = entry.path.read_text(encoding=\"utf-8\")\n    except FileNotFoundError:\n        return f\"Log not found: {entry.path}\"\n    header = f\"--- {entry.timestamp} {entry.agent} {entry.command} ({entry.path}) ---\"\n    return f\"{header}\\n{content.strip()}\\n{'-' * len(header)}\"\n\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"Inspect agent logs\")\n    parser.add_argument(\"--agent\", help=\"filter logs by agent\")\n    parser.add_argument(\"--last\", type=int, default=-1, help=\"show last N logs\")\n    parser.add_argument(\"--list\", action=\"store_true\", help=\"list available logs\")\n    args = parser.parse_args()\n\n    agent = args.agent or os.environ.get('AGENT')\n    last = args.last if args.last >= 0 else int(os.environ.get('LAST', '1'))\n    list_only = args.list or os.environ.get('LIST') == '1'\n\n    config = load_config(resolve_config_path())\n    log_dir = resolve_log_dir(config)\n    logs = discover_logs(log_dir, agent)\n\n    if list_only or last <= 0:\n        print(format_list(logs))\n        return 0"}
{"id": "scripts/agents/logs.py:102-122", "path": "scripts/agents/logs.py", "start": 3000, "end": 3428, "start_line": 102, "end_line": 122, "weights": {"subset": 0.47175791744773116, "logs": 0.3872492798578766, "last": 0.24341325977951864, "log_dir": 0.21117691827067897, "print": 0.19717847925685655, "entry": 0.18925671238211797, "ig": 0.1572526391492437, "list_only": 0.14685609791570103, "format_list": 0.13947963451950154, "show_entry": 0.13947963451950154, "discover_logs": 0.13375800499862434, "return": 0.12956435006752234, "resolve_log_dir": 0.12908309328595885, "resolve_config_path": 0.11131008865621667, "if": 0.10676313834286576, "load_config": 0.09576814497492651, "__name__": 0.09576814497492651, "__main__": 0.09576814497492651, "config": 0.0878154545055973, "systemexit": 0.08537160374138385, "main": 0.08314054279293179, "raise": 0.07918796125889953, "or": 0.06466500036349437, "agent": 0.06398119915625945, "not": 0.051845616990953684, "in": 0.04348977929377889}, "norm": 0.8831454358744775, "snippet": "ig = load_config(resolve_config_path()) log_dir = resolve_log_dir(config) logs = discover_logs(log_dir, agent) if list_only or last <= 0: print(format_list(logs)) return 0 subset = logs[-last:] if not subset: print(\"Логи не найдены.\") return 0 for entry in subset: print(show_entry(entry)) return 0 if __name__ ==…", "text": "ig = load_config(resolve_config_path())\n    log_dir = resolve_log_dir(config)\n    logs = discover_logs(log_dir, agent)\n\n    if list_only or last <= 0:\n        print(format_list(logs))\n        return 0\n\n    subset = logs[-last:]\n    if not subset:\n        print(\"Логи не найдены.\")\n        return 0\n\n    for entry in subset:\n        print(show_entry(entry))\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/__init__.py:1-2", "path": "scripts/agents/__init__.py", "start": 0, "end": 47, "start_line": 1, "end_line": 2, "weights": {"utilities": 1.5332132317051261, "integration": 1.0467356944412978, "sdk": 0.6479734006957977, "agent": 0.6238166917735297}, "norm": 2.062865778677258, "snippet": "\"\"\"Agent integration utilities for the SDK.\"\"\"", "text": "\"\"\"Agent integration utilities for the SDK.\"\"\"\n"}
{"id": "scripts/agents/status.sh:1-9", "path": "scripts/agents/status.sh", "start": 0, "end": 196, "start_line": 1, "end_line": 9, "weights": {"python": 0.48137033366756093, "script_dir": 0.2949576437300264, "exec": 0.17904130027296697, "lc_all": 0.14890446633557802, "eeuo": 0.14609844367742278, "pipefail": 0.14609844367742278, "dirname": 0.14476054547452044, "bash_source": 0.14476054547452044, "cd": 0.14346259055496907, "bash": 0.14220226286482768, "pwd": 0.14220226286482768, "ifs": 0.14097744212714522, "set": 0.13325217355160382, "py": 0.12846952593358954, "usr": 0.12583367281113586, "env": 0.1187676323981891, "python3": 0.1187676323981891, "bin": 0.11528751467325274, "utf": 0.09699479379329827, "status": 0.07585198879982553}, "norm": 0.8032462263320927, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/status.py\" \"$@\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nexec \"$PYTHON\" \"$SCRIPT_DIR/status.py\" \"$@\"\n"}
{"id": "scripts/agents/run.sh:1-15", "path": "scripts/agents/run.sh", "start": 0, "end": 335, "start_line": 1, "end_line": 15, "weights": {"role": 0.3495872237827957, "python": 0.2913557282724711, "agent": 0.19699474477058831, "script_dir": 0.17852699488922652, "task": 0.15222318216548988, "command": 0.13955857039393751, "shift": 0.1324800167934841, "exec": 0.10836710279679579, "help": 0.09599858623769748, "lc_all": 0.09012638751890249, "eeuo": 0.08842800538370325, "pipefail": 0.08842800538370325, "dirname": 0.0876182248924729, "bash_source": 0.0876182248924729, "cd": 0.08683262059906023, "bash": 0.08606979068134306, "pwd": 0.08606979068134306, "ifs": 0.08532845181379842, "set": 0.08065263136018126, "py": 0.07775787095980419, "run": 0.07721525813867958, "usr": 0.07616248617516116, "env": 0.0718856722410092, "python3": 0.0718856722410092, "codex": 0.07145069061071418, "bin": 0.06977928519696876, "true": 0.061509572043376586, "utf": 0.058707375190680526}, "norm": 0.6924903311910215, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} COMMAND=${1:-help} TASK=${2:-} AGENT=${3:-codex} ROLE=${4:-} shift 4 || true exec \"$PYTHON\" \"$SCRIPT_DIR/run.py\" \"$COMMAND\" \"--task\" \"$TASK\" \"--agent\" \"$AGENT\" \"--role\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nCOMMAND=${1:-help}\nTASK=${2:-}\nAGENT=${3:-codex}\nROLE=${4:-}\nshift 4 || true\n\nexec \"$PYTHON\" \"$SCRIPT_DIR/run.py\" \"$COMMAND\" \"--task\" \"$TASK\" \"--agent\" \"$AGENT\" \"--role\" \"$ROLE\" \"$@\"\n"}
{"id": "scripts/agents/logout.py:1-40", "path": "scripts/agents/logout.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 40, "weights": {"override": 0.23197000073776436, "import": 0.2064504353921457, "path": 0.16707998132484053, "expanduser": 0.14841345154162225, "xdg": 0.14685609791570103, "os": 0.13197993543149925, "default_state_dir": 0.12908309328595885, "environ": 0.1138288049885118, "fallback": 0.1135411496046687, "return": 0.10077227227473962, "agents": 0.09962314878469418, "state_env_key": 0.09298642301300103, "state_fallback_env_key": 0.09298642301300103, "default_config_path": 0.08605539552397258, "root": 0.06961862162069588, "get": 0.06516304894195984, "if": 0.05931285463492542, "datetime": 0.05405877711539836, "json": 0.05291861980981267, "remove": 0.05241754638308124, "agents_auth_state_dir": 0.04458600166620812, "agents_auth_state_fallback": 0.04458600166620812, "xdg_state_home": 0.04458600166620812, "sta": 0.04458600166620812, "stored": 0.04302769776198629, "credentials": 0.04302769776198629, "configured": 0.04302769776198629, "agents_config_path": 0.04302769776198629, "auth_status": 0.04171017058397553, "resolve_state_dir": 0.04171017058397553, "state_filename": 0.04056887662991978, "home": 0.04056887662991978, "agentcontrol": 0.03956218401747206, "resolve_config_path": 0.03710336288540556, "shutil": 0.0357858357073948, "typing": 0.03363784914089133, "__file__": 0.03363784914089133, "__future__": 0.03317573613858128, "annotations": 0.03317573613858128, "local": 0.03232032196288058, "def": 0.03172968902229829, "iterable": 0.031542785397019664, "resolve": 0.031542785397019664, "config": 0.02927181816853244, "pathlib": 0.028202047715934094, "parents": 0.028202047715934094, "timezone": 0.02795429099052168, "ai": 0.02747933499774552, "state": 0.026812997036465936, "usr": 0.02473653397141987, "exists": 0.024570567425632676, "env": 0.023347483291951708, "python3": 0.023347483291951708, "sys": 0.023347483291951708, "bin": 0.022663357585340285, "dict": 0.018981452319592813}, "norm": 0.5805294271047998, "snippet": "#!/usr/bin/env python3 \"\"\"Remove stored credentials for configured AI agents.\"\"\" from __future__ import annotations import json import os import shutil import sys from datetime import datetime, timezone from pathlib import Path from typing import Dict, Iterable ROOT = Path(__file__).resolve().parents[2]…", "text": "#!/usr/bin/env python3\n\"\"\"Remove stored credentials for configured AI agents.\"\"\"\nfrom __future__ import annotations\n\nimport json\nimport os\nimport shutil\nimport sys\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import Dict, Iterable\n\nROOT = Path(__file__).resolve().parents[2]\nDEFAULT_CONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nSTATE_ENV_KEY = \"AGENTS_AUTH_STATE_DIR\"\nSTATE_FALLBACK_ENV_KEY = \"AGENTS_AUTH_STATE_FALLBACK\"\nDEFAULT_STATE_DIR = ROOT / \"state\" / \"agents\"\nSTATE_FILENAME = \"auth_status.json\"\n\n\ndef resolve_config_path() -> Path:\n    override = os.environ.get(\"AGENTS_CONFIG_PATH\")\n    if override:\n        return Path(override).expanduser()\n    return DEFAULT_CONFIG_PATH\n\n\ndef resolve_state_dir() -> Path:\n    override = os.environ.get(STATE_ENV_KEY)\n    if override:\n        return Path(override).expanduser()\n    if DEFAULT_STATE_DIR.exists():\n        return DEFAULT_STATE_DIR\n    fallback = os.environ.get(STATE_FALLBACK_ENV_KEY)\n    if fallback:\n        return Path(fallback).expanduser()\n    xdg = os.environ.get(\"XDG_STATE_HOME\")\n    if xdg:\n        return Path(xdg).expanduser() / \"agentcontrol\" / \"agents\"\n    return Path.home() / \".local\" / \"sta"}
{"id": "scripts/agents/logout.py:36-69", "path": "scripts/agents/logout.py", "start": 1000, "end": 2200, "start_line": 36, "end_line": 69, "weights": {"fh": 0.20679956005936867, "state_path": 0.17669589899946894, "state_dir": 0.1559682329423529, "xdg": 0.1342356520010705, "path": 0.11878342422312882, "candidate": 0.10174437791232305, "object": 0.08454197537138085, "open": 0.08362273990685082, "return": 0.07895327582239643, "state_filename": 0.07416497758907209, "data": 0.07238274583821286, "agentcontrol": 0.0723246176569411, "as": 0.07025059478651614, "raw": 0.06918913804034499, "agents": 0.06829633832700713, "expanduser": 0.06782958527488203, "entries": 0.0643429672855975, "load": 0.06238729317694116, "encoding": 0.05910785189475658, "def": 0.05800583774388905, "iterable": 0.05766415455392657, "str": 0.05757479642725356, "utf": 0.05228625602919985, "dict": 0.052050701282633415, "json": 0.048370925919906896, "roo": 0.04791291349078519, "iter_paths": 0.04474521733369016, "updated_at": 0.04294472911679267, "xdg_state_home": 0.040754392148018355, "home": 0.037082488794536045, "save_state": 0.037082488794536045, "is_absolute": 0.037082488794536045, "true": 0.03652130840075485, "dump": 0.03616230882847055, "load_state": 0.03533917979989379, "none": 0.03470046752175561, "fallback": 0.034594569020172494, "resolve_config_path": 0.033914792637441016, "if": 0.032529393713841906, "microsecond": 0.03166727644641148, "write": 0.03166727644641148, "not": 0.0315934228538624, "exist_ok": 0.02992396745176921, "local": 0.029542794294195526, "load_config": 0.029179356672047924, "isoformat": 0.029179356672047924, "utc": 0.02787424663561694, "now": 0.02702112716714044, "indent": 0.02702112716714044, "replace": 0.02675627129467418, "environ": 0.026011660514952892, "mkdir": 0.026011660514952892, "parents": 0.025778434240346006, "ensure_ascii": 0.025778434240346006, "timezone": 0.025551969108523722, "datetime": 0.024706550478521903, "state": 0.02450875510364464, "os": 0.024127581946070953, "exists": 0.022459034287492366, "false": 0.01980891145493796, "get": 0.014890774855877541, "in": 0.013250792128573255}, "norm": 0.5115838253740076, "snippet": "return Path(fallback).expanduser() xdg = os.environ.get(\"XDG_STATE_HOME\") if xdg: return Path(xdg).expanduser() / \"agentcontrol\" / \"agents\" return Path.home() / \".local\" / \"state\" / \"agentcontrol\" / \"agents\" def load_config() -> Dict[str, object]: with resolve_config_path().open(\"r\", encoding=\"utf-8\") as fh: return…", "text": "    return Path(fallback).expanduser()\n    xdg = os.environ.get(\"XDG_STATE_HOME\")\n    if xdg:\n        return Path(xdg).expanduser() / \"agentcontrol\" / \"agents\"\n    return Path.home() / \".local\" / \"state\" / \"agentcontrol\" / \"agents\"\n\n\ndef load_config() -> Dict[str, object]:\n    with resolve_config_path().open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef load_state(state_dir: Path) -> Dict[str, object]:\n    state_path = state_dir / STATE_FILENAME\n    if not state_path.exists():\n        return {\"updated_at\": None, \"agents\": {}}\n    with state_path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef save_state(state_dir: Path, data: Dict[str, object]) -> None:\n    state_path = state_dir / STATE_FILENAME\n    state_dir.mkdir(parents=True, exist_ok=True)\n    data[\"updated_at\"] = datetime.now(timezone.utc).replace(microsecond=0).isoformat()\n    with state_path.open(\"w\", encoding=\"utf-8\") as fh:\n        json.dump(data, fh, ensure_ascii=False, indent=2)\n        fh.write(\"\\n\")\n\n\ndef iter_paths(entries: Iterable[str]) -> Iterable[Path]:\n    for raw in entries:\n        candidate = Path(raw)\n        if not candidate.is_absolute():\n            candidate = ROO"}
{"id": "scripts/agents/logout.py:62-100", "path": "scripts/agents/logout.py", "start": 2000, "end": 3200, "start_line": 62, "end_line": 100, "weights": {"removed": 0.24687016459966987, "path": 0.24341824865429354, "candidate": 0.1871160973100194, "remove_path": 0.15860826534880615, "agent_dir": 0.10573884356587077, "iter_paths": 0.09874806583986795, "stored_paths": 0.07980647465593502, "raw": 0.07634663507900137, "return": 0.07260071339990477, "entries": 0.07099913631514207, "state_dir": 0.06884115109179714, "iterable": 0.06362941192157415, "entry": 0.06362941192157415, "str": 0.06353080985076255, "object": 0.06219179797434913, "true": 0.060449062180559746, "if": 0.05982417234729547, "is_symlink": 0.05286942178293538, "isoform": 0.05286942178293538, "except": 0.05244500816314119, "rmtree": 0.049374032919933974, "clear_agent": 0.049374032919933974, "logged_out": 0.049374032919933974, "cleared_at": 0.049374032919933974, "def": 0.048004831236321974, "missing_ok": 0.044970363749537494, "logout": 0.044970363749537494, "cleared": 0.044970363749537494, "false": 0.04371621838331136, "or": 0.04348163817545311, "credentials": 0.043398626190968924, "agent": 0.04302184081196757, "is_dir": 0.04206974102004428, "permissionerror": 0.04206974102004428, "is_absolute": 0.04091860832500529, "unlink": 0.04091860832500529, "yield": 0.03990323732796751, "is_file": 0.03899495702057246, "dict": 0.03829017105848895, "filenotfounderror": 0.038173317539500685, "paths": 0.038173317539500685, "shutil": 0.036094334291079236, "write": 0.03494320159604025, "message": 0.03494320159604025, "microsecond": 0.03494320159604025, "auth": 0.03392783059900246, "fh": 0.03259894542807782, "stderr": 0.03219791081053564, "utc": 0.030757789391025588, "file": 0.02981641618443083, "now": 0.02981641618443083, "replace": 0.02952416142860599, "in": 0.029243127456161668, "timezone": 0.028195276257681347, "bool": 0.02748632713494883, "datetime": 0.02726240052802417, "try": 0.026028772565604572, "agents": 0.02512049225820952, "sys": 0.023548754699640944, "root": 0.023406260717302924, "print": 0.02209758819257875, "not": 0.017430853988337876, "get": 0.01643119984096832, "status": 0.015039618468930925}, "norm": 0.5646441082403179, "snippet": "fh.write(\"\\n\") def iter_paths(entries: Iterable[str]) -> Iterable[Path]: for raw in entries: candidate = Path(raw) if not candidate.is_absolute(): candidate = ROOT / candidate yield candidate def remove_path(path: Path) -> bool: try: if path.is_symlink() or path.is_file(): path.unlink(missing_ok=True) return True if…", "text": "    fh.write(\"\\n\")\n\n\ndef iter_paths(entries: Iterable[str]) -> Iterable[Path]:\n    for raw in entries:\n        candidate = Path(raw)\n        if not candidate.is_absolute():\n            candidate = ROOT / candidate\n        yield candidate\n\n\ndef remove_path(path: Path) -> bool:\n    try:\n        if path.is_symlink() or path.is_file():\n            path.unlink(missing_ok=True)\n            return True\n        if path.is_dir():\n            shutil.rmtree(path)\n            return True\n    except FileNotFoundError:\n        return False\n    except PermissionError:\n        print(f\"[agents-auth-logout] недостаточно прав для {path}\", file=sys.stderr)\n    return False\n\n\ndef clear_agent(agent: str, state_dir: Path, entry: Dict[str, object]) -> Dict[str, object]:\n    removed = 0\n    for path in iter_paths(entry.get(\"stored_paths\", []) or []):\n        if remove_path(path):\n            removed += 1\n    agent_dir = state_dir / agent\n    if remove_path(agent_dir):\n        removed += 1\n    return {\n        \"status\": \"logged_out\",\n        \"message\": f\"credentials cleared ({removed} paths removed)\",\n        \"stored_paths\": [],\n        \"cleared_at\": datetime.now(timezone.utc).replace(microsecond=0).isoform"}
{"id": "scripts/agents/logout.py:97-126", "path": "scripts/agents/logout.py", "start": 3000, "end": 3969, "start_line": 97, "end_line": 126, "weights": {"entry_state": 0.2517533107126304, "agents_cfg": 0.22929943714049889, "current_agents": 0.2021819646204562, "state_dir": 0.17550711047579054, "agents": 0.16010863197540134, "name": 0.1558800033415481, "removed": 0.1258766553563152, "cleared": 0.11464971857024944, "logout": 0.11464971857024944, "credentials": 0.11064265138796474, "state": 0.10342155999779717, "auth": 0.08649732636229199, "isinstance": 0.08017464345126385, "cfg": 0.07317566034975759, "main": 0.07126332239394155, "not": 0.06665865041694045, "logged_out": 0.0629383276781576, "cleared_at": 0.0629383276781576, "clear_agent": 0.0629383276781576, "defined": 0.05977698622264352, "keys": 0.05732485928512472, "print": 0.05633670835910187, "resolve_state_dir": 0.053627362179397106, "save_state": 0.052159984238468286, "stored_paths": 0.05086566516532122, "load_state": 0.04970785730094951, "dict": 0.04880944882181009, "paths": 0.04866049268771516, "if": 0.04575563071837104, "message": 0.044542982254293075, "microsecond": 0.044542982254293075, "setdefault": 0.043876777618947635, "no": 0.043876777618947635, "get": 0.04189053146268847, "isoformat": 0.041043490703539943, "load_config": 0.041043490703539943, "stderr": 0.041043490703539943, "__name__": 0.041043490703539943, "__main__": 0.041043490703539943, "utc": 0.03920773153141724, "now": 0.03800773931202172, "file": 0.03800773931202172, "replace": 0.037635194788113134, "return": 0.03701838573357782, "systemexit": 0.036587830174878794, "timezone": 0.03594123127352788, "datetime": 0.03475207100275609, "raise": 0.03393769768238552, "sys": 0.03001819280393791, "or": 0.027713571584354734, "int": 0.02713506901858086, "def": 0.020397657228620327, "status": 0.01917138178457129, "in": 0.018638476840190953}, "norm": 0.6360667644880236, "snippet": "\"status\": \"logged_out\", \"message\": f\"credentials cleared ({removed} paths removed)\", \"stored_paths\": [], \"cleared_at\": datetime.now(timezone.utc).replace(microsecond=0).isoformat(), } def main() -> int: cfg = load_config() state_dir = resolve_state_dir() state = load_state(state_dir) current_agents =…", "text": "\"status\": \"logged_out\",\n        \"message\": f\"credentials cleared ({removed} paths removed)\",\n        \"stored_paths\": [],\n        \"cleared_at\": datetime.now(timezone.utc).replace(microsecond=0).isoformat(),\n    }\n\n\ndef main() -> int:\n    cfg = load_config()\n    state_dir = resolve_state_dir()\n    state = load_state(state_dir)\n    current_agents = state.setdefault(\"agents\", {})\n    agents_cfg = cfg.get(\"agents\", {})\n    if not isinstance(agents_cfg, dict) or not agents_cfg:\n        print(\"[agents-auth-logout] no agents defined\", file=sys.stderr)\n        return 1\n\n    for name in agents_cfg.keys():\n        entry_state = current_agents.get(name)\n        if not isinstance(entry_state, dict):\n            entry_state = {}\n        current_agents[name] = clear_agent(name, state_dir, entry_state)\n        print(f\"[agents-auth-logout] {name}: credentials cleared\")\n    save_state(state_dir, state)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/heart_engine.py:1-49", "path": "scripts/agents/heart_engine.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 49, "weights": {"import": 0.46008954173106753, "heart": 0.11765571160794971, "fnmatch": 0.1090931013088065, "context": 0.07605308120617589, "datetime": 0.06023692307144388, "json": 0.058966462073791255, "urllib": 0.05840812311257624, "524_288": 0.05840812311257624, "lightweight": 0.05454655065440325, "basehttprequesthandler": 0.05454655065440325, "httpserver": 0.05454655065440325, "parse_qs": 0.05454655065440325, "urlparse": 0.05454655065440325, "default_config": 0.05454655065440325, "1200": 0.05454655065440325, "scripts": 0.05403840115840335, "collections": 0.05180672139295772, "server": 0.05180672139295772, "include_globs": 0.05180672139295772, "tsx": 0.05180672139295772, "jsx": 0.05180672139295772, "exclude_globs": 0.05180672139295772, "__pycache__": 0.05180672139295772, "root": 0.05171669034680265, "bin": 0.05050691119018692, "math": 0.04968154471377476, "http": 0.04968154471377476, "parse": 0.04968154471377476, "index_dir": 0.04968154471377476, "config_path": 0.04794514893478472, "chunk_chars": 0.04794514893478472, "chunk_overlap": 0.04794514893478472, "yml": 0.04794514893478472, "memory": 0.04647704722214416, "textwrap": 0.04647704722214416, "ts": 0.04647704722214416, "js": 0.04647704722214416, "node_modules": 0.04647704722214416, "counter": 0.045205319673339184, "200": 0.045205319673339184, "max_file_bytes": 0.045205319673339184, "rs": 0.04408357647661173, "vendor": 0.04408357647661173, "dict": 0.04230152231223541, "path": 0.04137218585186528, "re": 0.04058143571351347, "index": 0.039218570535983245, "typing": 0.0374821747569932, "__file__": 0.0374821747569932, "git": 0.0374821747569932, "venv": 0.0374821747569932, "__future__": 0.03696724884013343, "annotations": 0.03696724884013343, "local": 0.03601407304435265, "iterable": 0.035147675156679055, "tuple": 0.035147675156679055, "resolve": 0.035147675156679055, "subprocess": 0.03435356459535476, "object": 0.03435356459535476, "argparse": 0.032617168816364714, "config": 0.032617168816364714, "reports": 0.03170945281822829, "pathlib": 0.03142513888346942, "parents": 0.03142513888346942}, "norm": 0.6101607607282317, "snippet": "#!/usr/bin/env python3 \"\"\"Lightweight local memory index for SDK agents.\"\"\" from __future__ import annotations import argparse import json import math import os import re import subprocess import sys import textwrap from collections import Counter from datetime import datetime, timezone from fnmatch import fnmatch…", "text": "#!/usr/bin/env python3\n\"\"\"Lightweight local memory index for SDK agents.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport math\nimport os\nimport re\nimport subprocess\nimport sys\nimport textwrap\nfrom collections import Counter\nfrom datetime import datetime, timezone\nfrom fnmatch import fnmatch\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom pathlib import Path\nfrom typing import Dict, Iterable, List, Tuple\nfrom urllib.parse import parse_qs, urlparse\n\nROOT = Path(__file__).resolve().parents[2]\nCONFIG_PATH = ROOT / \"config\" / \"heart.json\"\nDEFAULT_CONFIG: Dict[str, object] = {\n    \"index_dir\": \"context/heart\",\n    \"chunk_chars\": 1200,\n    \"chunk_overlap\": 200,\n    \"max_file_bytes\": 524_288,\n    \"include_globs\": [\n        \"**/*.py\",\n        \"**/*.rs\",\n        \"**/*.ts\",\n        \"**/*.tsx\",\n        \"**/*.js\",\n        \"**/*.jsx\",\n        \"**/*.sh\",\n        \"**/*.md\",\n        \"**/*.yaml\",\n        \"**/*.yml\",\n        \"**/*.json\",\n    ],\n    \"exclude_globs\": [\n        \"vendor/**\",\n        \"scripts/bin/**\",\n        \"scripts/__pycache__/**\",\n        \"node_modules/**\",\n        \".git/**\",\n        \".venv/**\",\n        \"context/heart/**\",\n        \"reports/**\","}
{"id": "scripts/agents/heart_engine.py:41-94", "path": "scripts/agents/heart_engine.py", "start": 1000, "end": 2200, "start_line": 41, "end_line": 94, "weights": {"index_dir": 0.47423292681330453, "cfg": 0.15134057026881684, "default_config": 0.13016790497073502, "merged": 0.12362967605137637, "config_path": 0.11441455995800899, "dict": 0.10094681460874359, "paths": 0.1006387462405018, "chunks": 0.1006387462405018, "fh": 0.08594267431038699, "object": 0.08198009732982385, "summary": 0.07783642558450671, "json": 0.07035771042895547, "9_": 0.06969151053205119, "iter_fil": 0.06969151053205119, "manifest": 0.06533537247270507, "token_regex": 0.06508395248536751, "za": 0.06508395248536751, "z0": 0.06508395248536751, "scripts": 0.06447763774582219, "def": 0.06327909572060623, "str": 0.06280886882973115, "__pycache__": 0.061814838025688185, "max_results": 0.061814838025688185, "ensure_dirs": 0.05927911585166307, "return": 0.05742056423447013, "stop_words": 0.057207279979004495, "max_snippet_chars": 0.057207279979004495, "320": 0.057207279979004495, "node_modules": 0.055455567708240186, "jsonl": 0.055455567708240186, "true": 0.05312190312837069, "vendor": 0.052599721932320806, "compile": 0.052599721932320806, "sbom": 0.0503193731202509, "top_k": 0.04933060747264148, "re": 0.04842103124907857, "heart": 0.04679488529861637, "context": 0.045372576855957206, "load": 0.045372576855957206, "git": 0.04472304942595779, "venv": 0.04472304942595779, "exist_ok": 0.043525770838937036, "load_config": 0.04244270061388789, "open": 0.04054435874271555, "10": 0.03818482050659914, "reports": 0.03783514256720421, "mkdir": 0.03783514256720421, "parents": 0.03749590434959419, "as": 0.03406089444194722, "exists": 0.032667686236352536, "root": 0.030853707309172036, "bin": 0.03013196406232742, "encoding": 0.028658352433821373, "utf": 0.0253509120141575, "path": 0.02468226996844235, "if": 0.015771827255196078}, "norm": 0.6792269889066074, "snippet": ": [ \"vendor/**\", \"scripts/bin/**\", \"scripts/__pycache__/**\", \"node_modules/**\", \".git/**\", \".venv/**\", \"context/heart/**\", \"reports/**\", \"sbom/**\", ], \"stop_words\": [ \"the\", \"and\", \"for\", \"from\", \"with\", \"this\", \"that\", \"into\", \"about\", \"shall\", \"should\", \"todo\", ], \"top_k\": 6, \"max_results\": 10, \"max_snippet_chars\":…", "text": ": [\n        \"vendor/**\",\n        \"scripts/bin/**\",\n        \"scripts/__pycache__/**\",\n        \"node_modules/**\",\n        \".git/**\",\n        \".venv/**\",\n        \"context/heart/**\",\n        \"reports/**\",\n        \"sbom/**\",\n    ],\n    \"stop_words\": [\n        \"the\",\n        \"and\",\n        \"for\",\n        \"from\",\n        \"with\",\n        \"this\",\n        \"that\",\n        \"into\",\n        \"about\",\n        \"shall\",\n        \"should\",\n        \"todo\",\n    ],\n    \"top_k\": 6,\n    \"max_results\": 10,\n    \"max_snippet_chars\": 320,\n}\nTOKEN_REGEX = re.compile(r\"[A-Za-z0-9_]{2,}\")\n\n\ndef load_config() -> Dict[str, object]:\n    if CONFIG_PATH.exists():\n        with CONFIG_PATH.open(\"r\", encoding=\"utf-8\") as fh:\n            cfg = json.load(fh)\n        merged = {**DEFAULT_CONFIG, **cfg}\n        return merged\n    return dict(DEFAULT_CONFIG)\n\n\ndef ensure_dirs(cfg: Dict[str, object]) -> Dict[str, Path]:\n    index_dir = ROOT / cfg[\"index_dir\"]\n    index_dir.mkdir(parents=True, exist_ok=True)\n    paths = {\n        \"index_dir\": index_dir,\n        \"chunks\": index_dir / \"chunks.jsonl\",\n        \"manifest\": index_dir / \"manifest.json\",\n        \"summary\": index_dir / \"summary.json\",\n    }\n    return paths\n\n\ndef iter_fil"}
{"id": "scripts/agents/heart_engine.py:86-121", "path": "scripts/agents/heart_engine.py", "start": 2000, "end": 3200, "start_line": 86, "end_line": 121, "weights": {"pattern": 0.28339870941325307, "include": 0.19520359833300546, "exclude": 0.17407058388033791, "index_dir": 0.1669299902382832, "length": 0.15616287866640438, "rel_str": 0.1471884702436921, "int": 0.13828031171868807, "chunk_chars": 0.12082177531565749, "cfg": 0.10654376146924704, "path": 0.1042579083467005, "continue": 0.09661880376352418, "start": 0.09445508038762285, "fnmatch": 0.09163820509939745, "chunk_overlap": 0.08054785021043832, "rel": 0.07406040848070769, "str": 0.07369573942688457, "chunks": 0.07084967735331327, "in": 0.06784405569829507, "any": 0.06388458821318775, "iterable": 0.059048094263220816, "if": 0.05551683193829019, "summary": 0.05479684361149272, "text": 0.05187969870278944, "dex_dir": 0.049062823414564034, "chun": 0.049062823414564034, "manifest": 0.04599610222078437, "iter_files": 0.045819102549698724, "as_posix": 0.045819102549698724, "chunk_text": 0.045819102549698724, "min": 0.045819102549698724, "include_globs": 0.04351764597008448, "exclude_globs": 0.04351764597008448, "root": 0.04344201989131422, "rglob": 0.0417324975595708, "st_size": 0.0417324975595708, "step": 0.0417324975595708, "while": 0.04027392510521916, "jsonl": 0.039040719666601095, "stat": 0.039040719666601095, "max_file_bytes": 0.03797246852560491, "yield": 0.037030204240353845, "is_file": 0.03618732011509124, "paths": 0.035424838676656634, "relative_to": 0.035424838676656634, "max": 0.035424838676656634, "end": 0.0347287476607396, "json": 0.03302121876132311, "not": 0.0323516650023551, "get": 0.030496306904837206, "def": 0.029698988924871196, "tuple": 0.029524047131610408, "object": 0.028856994260097996, "return": 0.02694938481404465, "len": 0.025096965226132112, "dict": 0.017766639371138874}, "norm": 0.6292207982620932, "snippet": "dex_dir\": index_dir, \"chunks\": index_dir / \"chunks.jsonl\", \"manifest\": index_dir / \"manifest.json\", \"summary\": index_dir / \"summary.json\", } return paths def iter_files(cfg: Dict[str, object]) -> Iterable[Path]: include = cfg.get(\"include_globs\", []) exclude = cfg.get(\"exclude_globs\", []) include = [str(pattern) for…", "text": "dex_dir\": index_dir,\n        \"chunks\": index_dir / \"chunks.jsonl\",\n        \"manifest\": index_dir / \"manifest.json\",\n        \"summary\": index_dir / \"summary.json\",\n    }\n    return paths\n\n\ndef iter_files(cfg: Dict[str, object]) -> Iterable[Path]:\n    include = cfg.get(\"include_globs\", [])\n    exclude = cfg.get(\"exclude_globs\", [])\n    include = [str(pattern) for pattern in include]\n    exclude = [str(pattern) for pattern in exclude]\n    for path in ROOT.rglob(\"*\"):\n        if not path.is_file():\n            continue\n        rel = path.relative_to(ROOT)\n        rel_str = rel.as_posix()\n        if include and not any(fnmatch(rel_str, pattern) for pattern in include):\n            continue\n        if any(fnmatch(rel_str, pattern) for pattern in exclude):\n            continue\n        if path.stat().st_size > int(cfg[\"max_file_bytes\"]):\n            continue\n        yield path\n\n\ndef chunk_text(text: str, *, chunk_chars: int, chunk_overlap: int) -> Iterable[Tuple[int, int, str, int, int]]:\n    length = len(text)\n    if length == 0:\n        return\n    step = max(1, chunk_chars - chunk_overlap)\n    start = 0\n    while start < length:\n        end = min(length, start + chunk_chars)\n        chun"}
{"id": "scripts/agents/heart_engine.py:114-153", "path": "scripts/agents/heart_engine.py", "start": 3000, "end": 4200, "start_line": 114, "end_line": 153, "weights": {"tok": 0.25134643142706986, "start": 0.22581474136385243, "length": 0.20000368681660394, "chunk_chars": 0.16505707010335724, "stop_words": 0.16505707010335724, "cfg": 0.16374553504494935, "end": 0.14233093303581804, "text": 0.13288857249689917, "chunk_overlap": 0.12379280257751792, "chunk": 0.12000221208996237, "start_line": 0.10674819977686352, "stop": 0.10053857257082795, "word": 0.10053857257082795, "total_files": 0.08917550403705836, "step": 0.08551741303190737, "tokens": 0.08551741303190737, "count": 0.08252853505167862, "end_line": 0.07415434449813779, "lower": 0.07415434449813779, "paths": 0.07259188253413246, "chunks": 0.07259188253413246, "prefix": 0.07116546651790902, "files": 0.06644936696951917, "str": 0.06040634379252833, "in": 0.05560988171991399, "len": 0.051428207430598595, "snippets": 0.050269286285413974, "vectors": 0.050269286285413974, "min": 0.04694580179272411, "token_regex": 0.04694580179272411, "build_index": 0.04694580179272411, "iter_files": 0.04694580179272411, "if": 0.04550559994941819, "tokenize": 0.04458775201852918, "findall": 0.04275870651595368, "ensure_dirs": 0.04275870651595368, "df": 0.04275870651595368, "while": 0.04126426752583931, "break": 0.04126426752583931, "int": 0.040480184929358336, "list": 0.03907129263754318, "counter": 0.03890621775164438, "yield": 0.03794078303314943, "max": 0.03629594126706623, "utc_now_iso": 0.03629594126706623, "def": 0.030429291931220487, "iterable": 0.030250048290584433, "generated_at": 0.02990119899206971, "object": 0.029566592479608602, "write_text": 0.028935764273574766, "return": 0.027612074604553945, "manifest": 0.02356357695736904, "encoding": 0.02067159847685476, "utf": 0.018285903747916887, "dict": 0.01820352394583901, "none": 0.01820352394583901, "not": 0.016573598874157325, "get": 0.015623108045510864}, "norm": 0.6691750593555368, "snippet": "length = len(text) if length == 0: return step = max(1, chunk_chars - chunk_overlap) start = 0 while start < length: end = min(length, start + chunk_chars) chunk = text[start:end] prefix = text[:start] start_line = prefix.count(\"\\n\") + 1 end_line = start_line + chunk.count(\"\\n\") yield start, end, chunk, start_line,…", "text": "length = len(text)\n    if length == 0:\n        return\n    step = max(1, chunk_chars - chunk_overlap)\n    start = 0\n    while start < length:\n        end = min(length, start + chunk_chars)\n        chunk = text[start:end]\n        prefix = text[:start]\n        start_line = prefix.count(\"\\n\") + 1\n        end_line = start_line + chunk.count(\"\\n\")\n        yield start, end, chunk, start_line, end_line\n        if end == length:\n            break\n        start += step\n\n\ndef tokenize(text: str, stop_words: Iterable[str]) -> List[str]:\n    stop = {word.lower() for word in stop_words}\n    tokens = [tok.lower() for tok in TOKEN_REGEX.findall(text)]\n    return [tok for tok in tokens if tok not in stop]\n\n\ndef build_index(cfg: Dict[str, object]) -> None:\n    paths = ensure_dirs(cfg)\n    chunk_chars = int(cfg[\"chunk_chars\"])\n    chunk_overlap = int(cfg[\"chunk_overlap\"])\n    stop_words = cfg.get(\"stop_words\", [])\n    snippets = []\n    vectors = []\n    df = Counter()\n\n    files = list(iter_files(cfg))\n    total_files = len(files)\n    if total_files == 0:\n        (paths[\"chunks\"]).write_text(\"\", encoding=\"utf-8\")\n        manifest = {\n            \"generated_at\": utc_now_iso(),\n            \"chunks\": 0,\n"}
{"id": "scripts/agents/heart_engine.py:147-178", "path": "scripts/agents/heart_engine.py", "start": 4000, "end": 5200, "start_line": 147, "end_line": 178, "weights": {"total_files": 0.16823832204929567, "tokens": 0.1613369751014335, "paths": 0.13695169591490966, "text": 0.13371056366698308, "encoding": 0.12999665021527218, "files": 0.1253632387156908, "chunk_records": 0.11809047048891425, "utf": 0.11499382769308557, "path": 0.11196081222798591, "write_text": 0.10918030643431303, "chunk_chars": 0.10379877604437929, "chunk_overlap": 0.10379877604437929, "chunk": 0.10062041151185848, "counts": 0.09326628895642072, "chunks": 0.09130113060993977, "manifest": 0.08890999140615535, "indent": 0.0713134902555459, "ensure_ascii": 0.06803380583019152, "dumps": 0.06685528183349154, "read_text": 0.06685528183349154, "unicodedecodeerror": 0.06322528790536602, "continue": 0.06225438386825011, "chunk_text": 0.05904523524445712, "tokenize": 0.05607944068309856, "df": 0.05377899170047783, "keys": 0.05377899170047783, "false": 0.052279188994475444, "stop_words": 0.051899388022189644, "counter": 0.048933593460831065, "errors": 0.04663314447821036, "end_line": 0.04663314447821036, "utc_now_iso": 0.04565056530496989, "relative_to": 0.04565056530496989, "end": 0.044753540799922165, "start_line": 0.044753540799922165, "if": 0.04292538551929654, "json": 0.042553116960467915, "ignore": 0.0417877462385636, "not": 0.041690289951488525, "start": 0.04057348813901325, "update": 0.03804645248918866, "generated_at": 0.037607693577654686, "config": 0.03530724459503397, "summary": 0.03530724459503397, "in": 0.03497116273107993, "cfg": 0.03432466542179351, "len": 0.032341450033675403, "strip": 0.03183845865048538, "except": 0.031358870860434936, "try": 0.031127191934125054, "root": 0.02799099219801174, "append": 0.025724399660764112, "return": 0.017364294338946294}, "norm": 0.5598258740971962, "snippet": "total_files = len(files) if total_files == 0: (paths[\"chunks\"]).write_text(\"\", encoding=\"utf-8\") manifest = { \"generated_at\": utc_now_iso(), \"chunks\": 0, \"files\": total_files, \"config\": cfg, } paths[\"manifest\"].write_text(json.dumps(manifest, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")…", "text": "  total_files = len(files)\n    if total_files == 0:\n        (paths[\"chunks\"]).write_text(\"\", encoding=\"utf-8\")\n        manifest = {\n            \"generated_at\": utc_now_iso(),\n            \"chunks\": 0,\n            \"files\": total_files,\n            \"config\": cfg,\n        }\n        paths[\"manifest\"].write_text(json.dumps(manifest, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n        paths[\"summary\"].write_text(json.dumps([], ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n        return\n\n    chunk_records = []\n    for path in files:\n        try:\n            text = path.read_text(encoding=\"utf-8\")\n        except UnicodeDecodeError:\n            text = path.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        if not text.strip():\n            continue\n        for start, end, chunk, start_line, end_line in chunk_text(\n            text, chunk_chars=chunk_chars, chunk_overlap=chunk_overlap\n        ):\n            tokens = tokenize(chunk, stop_words)\n            if not tokens:\n                continue\n            counts = Counter(tokens)\n            df.update(counts.keys())\n            chunk_records.append(\n                {\n                    \"path\": path.relative_to(ROOT)."}
{"id": "scripts/agents/heart_engine.py:173-207", "path": "scripts/agents/heart_engine.py", "start": 5000, "end": 6200, "start_line": 173, "end_line": 207, "weights": {"counts": 0.3933404360336004, "chunk_records": 0.24901686168314524, "token_total": 0.24901686168314524, "weights": 0.16416002080931724, "token": 0.16416002080931724, "record": 0.15477908366415044, "total_chunks": 0.12450843084157262, "idf": 0.12450843084157262, "pop": 0.11825447274479478, "freq": 0.11825447274479478, "tf": 0.11825447274479478, "df": 0.11340352597709455, "counter": 0.1031860557761003, "end_line": 0.0983351090084001, "end": 0.09437159690418369, "start_line": 0.09437159690418369, "start": 0.08555713803226707, "dict": 0.07241836700192475, "continue": 0.06563777429587239, "as_posix": 0.06225421542078631, "chunk_lines": 0.06225421542078631, "max_snippet": 0.06225421542078631, "str": 0.060078048445829806, "tokens": 0.056701762988547275, "keys": 0.056701762988547275, "summaries": 0.056701762988547275, "math": 0.056701762988547275, "max_snippet_chars": 0.05472000693643908, "320": 0.05472000693643908, "chunk": 0.05304445606875148, "sum": 0.05031277750048077, "warn": 0.04916755450420005, "relative_to": 0.04813157428893564, "path": 0.04721825559180275, "heart": 0.04476032506824174, "not": 0.043956066579286815, "float": 0.042778569016133534, "values": 0.041633346019852815, "update": 0.04011419447229674, "items": 0.03759461171080409, "in": 0.03687176940124732, "cfg": 0.03619013636863011, "text": 0.035244360531786305, "len": 0.034099137535505586, "log": 0.03124735205216329, "if": 0.030172191270809886, "root": 0.02951224177399064, "or": 0.027412337110611744, "append": 0.027122464859718684, "int": 0.02684012261620498, "list": 0.02590596577054493, "get": 0.020717599799481796, "return": 0.01830800598780207}, "norm": 0.7521958277692506, "snippet": "continue counts = Counter(tokens) df.update(counts.keys()) chunk_records.append( { \"path\": path.relative_to(ROOT).as_posix(), \"start\": start, \"end\": end, \"start_line\": start_line, \"end_line\": end_line, \"text\": chunk, \"counts\": counts, \"token_total\": sum(counts.values()), } ) if not chunk_records: warn(\"Heart: нет…", "text": "              continue\n            counts = Counter(tokens)\n            df.update(counts.keys())\n            chunk_records.append(\n                {\n                    \"path\": path.relative_to(ROOT).as_posix(),\n                    \"start\": start,\n                    \"end\": end,\n                    \"start_line\": start_line,\n                    \"end_line\": end_line,\n                    \"text\": chunk,\n                    \"counts\": counts,\n                    \"token_total\": sum(counts.values()),\n                }\n            )\n    if not chunk_records:\n        warn(\"Heart: нет пригодных чанков для индекса\")\n        return\n\n    total_chunks = len(chunk_records)\n    chunk_lines: List[str] = []\n    summaries: Dict[str, dict] = {}\n\n    max_snippet = int(cfg.get(\"max_snippet_chars\", 320))\n    for record in chunk_records:\n        counts: Counter = record.pop(\"counts\")\n        token_total = record.pop(\"token_total\") or 1\n        weights: Dict[str, float] = {}\n        for token, freq in counts.items():\n            tf = freq / token_total\n            idf = math.log((total_chunks + 1) / (df[token] + 1)) + 1.0\n            weights[token] = tf * idf\n        if not weights:\n            continue\n   "}
{"id": "scripts/agents/heart_engine.py:201-229", "path": "scripts/agents/heart_engine.py", "start": 6000, "end": 7200, "start_line": 201, "end_line": 229, "weights": {"record": 0.623285468223313, "weights": 0.3559564087582502, "token": 0.20340366214757155, "end_line": 0.18276424300551133, "start_line": 0.1753977154582808, "path": 0.13163877316502587, "top_tokens": 0.12389601872364657, "chunk_id": 0.12389601872364657, "idf": 0.11570480441843113, "64": 0.11570480441843113, "tf": 0.10989304537900123, "math": 0.10538509484740101, "weight": 0.10538509484740101, "value": 0.10480922052709019, "end": 0.0876988577291404, "item": 0.08319090719754021, "snippet": 0.08319090719754021, "start": 0.07950764342392497, "first_chunk_lines": 0.061948009361823285, "ems": 0.057852402209215566, "token_total": 0.057852402209215566, "total_chunks": 0.057852402209215566, "reverse": 0.057852402209215566, "shorten": 0.057852402209215566, "max_snippet": 0.057852402209215566, "freq": 0.054946522689500614, "sqrt": 0.054946522689500614, "1e": 0.054946522689500614, "placeholder": 0.054946522689500614, "df": 0.052692547423700505, "width": 0.052692547423700505, "summaries": 0.052692547423700505, "norm": 0.04929383796288017, "textwrap": 0.04929383796288017, "sum": 0.04675530838428516, "lambda": 0.04472833166244525, "sorted": 0.04229235129055749, "setdefault": 0.04033117942751752, "values": 0.03868957407905515, "entry": 0.03727783728738688, "items": 0.0349364068423634, "key": 0.0349364068423634, "replace": 0.03459396692644743, "summary": 0.03459396692644743, "in": 0.03426467459509852, "text": 0.0327523350396398, "continue": 0.030498359773839703, "log": 0.029037943321202252, "or": 0.025474091052285666, "true": 0.02360973472372031, "id": 0.021020888676941418, "not": 0.02042403093583024, "if": 0.014019402004618736}, "norm": 0.9162159345348291, "snippet": "ems(): tf = freq / token_total idf = math.log((total_chunks + 1) / (df[token] + 1)) + 1.0 weights[token] = tf * idf if not weights: continue # оставляем топ-64 токена top_tokens = sorted(weights.items(), key=lambda item: item[1], reverse=True)[:64] weights = {token: weight for token, weight in top_tokens} norm =…", "text": "ems():\n            tf = freq / token_total\n            idf = math.log((total_chunks + 1) / (df[token] + 1)) + 1.0\n            weights[token] = tf * idf\n        if not weights:\n            continue\n        # оставляем топ-64 токена\n        top_tokens = sorted(weights.items(), key=lambda item: item[1], reverse=True)[:64]\n        weights = {token: weight for token, weight in top_tokens}\n        norm = math.sqrt(sum(value * value for value in weights.values())) or 1e-9\n        chunk_id = f\"{record['path']}:{record['start_line']}-{record['end_line']}\"\n        snippet = textwrap.shorten(record[\"text\"].replace(\"\\n\", \" \"), width=max_snippet, placeholder=\"…\")\n        summaries.setdefault(\n            record[\"path\"],\n            {\n                \"path\": record[\"path\"],\n                \"summary\": snippet,\n                \"first_chunk_lines\": f\"{record['start_line']}-{record['end_line']}\",\n            },\n        )\n        entry = {\n            \"id\": chunk_id,\n            \"path\": record[\"path\"],\n            \"start\": record[\"start\"],\n            \"end\": record[\"end\"],\n            \"start_line\": record[\"start_line\"],\n            \"end_line\": record[\"end_line\"],\n            \"weights\": weights,\n     "}
{"id": "scripts/agents/heart_engine.py:224-259", "path": "scripts/agents/heart_engine.py", "start": 7000, "end": 8200, "start_line": 224, "end_line": 259, "weights": {"record": 0.21380894440092854, "paths": 0.19946418173793148, "chunk_lines": 0.1547942653706038, "chunks": 0.11967850904275891, "chunks_path": 0.10319617691373587, "write_text": 0.09540981733448976, "weights": 0.09070703852526839, "cfg": 0.0899862850247019, "ensure_ascii": 0.08917944818281862, "norm": 0.08792954879865111, "dumps": 0.08763462618714433, "end_line": 0.08150297323218747, "utc_now_iso": 0.0797856726951726, "end": 0.0782179001368009, "start_line": 0.0782179001368009, "manifest": 0.07769611861618982, "snippet": 0.07419729560861694, "message": 0.07303443937190394, "start": 0.07091222251323037, "false": 0.06852812611437997, "encoding": 0.06816040578854812, "indent": 0.06231899598908065, "utf": 0.060294061006644875, "text": 0.05842308412476288, "json": 0.05577908574547822, "def": 0.05016721102174188, "str": 0.049794418531678764, "total_files": 0.04900635807441946, "summaries": 0.046996055810327474, "load_chunks": 0.046996055810327474, "ensure_dirs": 0.046996055810327474, "list": 0.04294322253856097, "warn": 0.040751486616093735, "dict": 0.040014953538601065, "heart": 0.03709864780430847, "entries": 0.03709864780430847, "files": 0.03651721968595197, "microsecond": 0.03651721968595197, "values": 0.03450691742185999, "isoformat": 0.03364826715335256, "stderr": 0.03364826715335256, "entry": 0.03324780082388559, "generated_at": 0.03286438087416671, "object": 0.03249661515776801, "utc": 0.03214327539963034, "now": 0.031159497994540326, "file": 0.031159497994540326, "summary": 0.03085407861007473, "config": 0.03085407861007473, "replace": 0.03085407861007473, "return": 0.03034840632212235, "timezone": 0.029465333746766093, "datetime": 0.02849043658784508, "len": 0.028262348227626254, "join": 0.02761081073591791, "exists": 0.025898706205396603, "sys": 0.024609509415840985, "print": 0.023092975048100314, "append": 0.0224798807846317, "none": 0.020007476769300533, "not": 0.01821602759141616, "if": 0.012503790977092385}, "norm": 0.546080328745505, "snippet": "\"start\": record[\"start\"], \"end\": record[\"end\"], \"start_line\": record[\"start_line\"], \"end_line\": record[\"end_line\"], \"weights\": weights, \"norm\": norm, \"snippet\": snippet, \"text\": record[\"text\"], } chunk_lines.append(json.dumps(entry, ensure_ascii=False)) paths[\"chunks\"].write_text(\"\\n\".join(chunk_lines) + \"\\n\",…", "text": "           \"start\": record[\"start\"],\n            \"end\": record[\"end\"],\n            \"start_line\": record[\"start_line\"],\n            \"end_line\": record[\"end_line\"],\n            \"weights\": weights,\n            \"norm\": norm,\n            \"snippet\": snippet,\n            \"text\": record[\"text\"],\n        }\n        chunk_lines.append(json.dumps(entry, ensure_ascii=False))\n\n    paths[\"chunks\"].write_text(\"\\n\".join(chunk_lines) + \"\\n\", encoding=\"utf-8\")\n    paths[\"summary\"].write_text(json.dumps(list(summaries.values()), ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n    manifest = {\n        \"generated_at\": utc_now_iso(),\n        \"chunks\": len(chunk_lines),\n        \"files\": total_files,\n        \"config\": cfg,\n    }\n    paths[\"manifest\"].write_text(json.dumps(manifest, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n\n\ndef utc_now_iso() -> str:\n    return datetime.now(timezone.utc).replace(microsecond=0).isoformat()\n\n\ndef warn(message: str) -> None:\n    print(f\"[Heart] {message}\", file=sys.stderr)\n\n\ndef load_chunks(cfg: Dict[str, object]) -> List[dict]:\n    paths = ensure_dirs(cfg)\n    chunks_path = paths[\"chunks\"]\n    if not chunks_path.exists():\n        return []\n    entries: "}
{"id": "scripts/agents/heart_engine.py:251-288", "path": "scripts/agents/heart_engine.py", "start": 8000, "end": 9200, "start_line": 251, "end_line": 288, "weights": {"entries": 0.17904130027296697, "cfg": 0.14476054547452044, "line": 0.14063627276137716, "dict": 0.12874376355897735, "top_k": 0.12582879587224494, "chunks_path": 0.12450843084157262, "query_weights": 0.12450843084157262, "tokens": 0.11340352597709455, "stop_words": 0.10944001387287816, "counts": 0.0983351090084001, "float": 0.08555713803226707, "freq": 0.07883631516319653, "load_chunks": 0.07560235065139637, "value": 0.07518922342160818, "total": 0.07296000924858544, "token": 0.07296000924858544, "weights": 0.07296000924858544, "list": 0.06908257538811982, "sum": 0.06708370333397436, "str": 0.06675338716203312, "paths": 0.06417543238524753, "not": 0.058608088772382425, "values": 0.05551112802647042, "fh": 0.05480402419792793, "entry": 0.053485592629729, "object": 0.05227716351467028, "if": 0.05028698545134981, "in": 0.04916235920166309, "return": 0.048821349300805526, "none": 0.0482789113346165, "text": 0.046992480709048406, "ile": 0.04444096323782974, "query_norm": 0.04150281028052421, "scored": 0.04150281028052421, "get": 0.04143519959896359, "tokenize": 0.039418157581598265, "sqrt": 0.039418157581598265, "1e": 0.039418157581598265, "ensure_dirs": 0.03780117532569818, "math": 0.03780117532569818, "or": 0.036549782814148994, "query_chunks": 0.03648000462429272, "int": 0.035786830154939976, "counter": 0.03439535192536677, "chunks": 0.032087716192623766, "loads": 0.02851904601075569, "stderr": 0.02706491053639228, "def": 0.02690125808412246, "tuple": 0.0267427963148645, "open": 0.025854373691007015, "items": 0.025063074473869393, "is": 0.023104448896043944, "strip": 0.022379206442732478, "continue": 0.021879258098624132, "as": 0.02171999065863301, "exists": 0.020831568034775528, "sys": 0.019794605399698184, "encoding": 0.018274891407074497, "append": 0.018081643239812456, "utf": 0.01616579896554971, "json": 0.01495526212016445}, "norm": 0.5342909305955658, "snippet": "ile=sys.stderr) def load_chunks(cfg: Dict[str, object]) -> List[dict]: paths = ensure_dirs(cfg) chunks_path = paths[\"chunks\"] if not chunks_path.exists(): return [] entries: List[dict] = [] with chunks_path.open(\"r\", encoding=\"utf-8\") as fh: for line in fh: line = line.strip() if not line: continue…", "text": "ile=sys.stderr)\n\n\ndef load_chunks(cfg: Dict[str, object]) -> List[dict]:\n    paths = ensure_dirs(cfg)\n    chunks_path = paths[\"chunks\"]\n    if not chunks_path.exists():\n        return []\n    entries: List[dict] = []\n    with chunks_path.open(\"r\", encoding=\"utf-8\") as fh:\n        for line in fh:\n            line = line.strip()\n            if not line:\n                continue\n            entries.append(json.loads(line))\n    return entries\n\n\ndef query_chunks(cfg: Dict[str, object], text: str, top_k: int | None = None) -> List[dict]:\n    if top_k is None:\n        top_k = int(cfg.get(\"top_k\", 5))\n    entries = load_chunks(cfg)\n    if not entries:\n        return []\n    stop_words = cfg.get(\"stop_words\", [])\n    tokens = tokenize(text, stop_words)\n    if not tokens:\n        return []\n    counts = Counter(tokens)\n    total = sum(counts.values()) or 1\n    query_weights: Dict[str, float] = {}\n    for token, freq in counts.items():\n        query_weights[token] = freq / total\n    query_norm = math.sqrt(sum(value * value for value in query_weights.values())) or 1e-9\n\n    scored: List[Tuple[float, dict]] = []\n    for entry in entries:\n        weights: Dict[str, float] = entry.get(\"weights\", {})"}
{"id": "scripts/agents/heart_engine.py:284-316", "path": "scripts/agents/heart_engine.py", "start": 9000, "end": 10200, "start_line": 284, "end_line": 316, "weights": {"score": 0.3338599804765664, "entry": 0.3247645184477144, "scored": 0.1832764101987949, "max_results": 0.13055293791025344, "weights": 0.12082177531565749, "widths": 0.11109061272106154, "idx": 0.1041862429822188, "q_weight": 0.09812564682912807, "in": 0.0949816779776131, "query_weights": 0.09163820509939745, "get": 0.09148892071451162, "1e": 0.08703529194016896, "value": 0.08300890265745543, "token": 0.08054785021043832, "headers": 0.07808143933320219, "list": 0.07626716322848429, "str": 0.07369573942688457, "end_line": 0.07237464023018247, "max": 0.07084967735331327, "top_k": 0.0694574953214792, "start_line": 0.0694574953214792, "header": 0.06817681199870262, "row": 0.06817681199870262, "item": 0.06588719850045184, "snippet": 0.06588719850045184, "float": 0.06297005359174856, "rows": 0.062104978051424155, "text": 0.05187969870278944, "query_norm": 0.045819102549698724, "reverse": 0.045819102549698724, "sqrt": 0.04351764597008448, "print_table": 0.04351764597008448, "norm": 0.039040719666601095, "cell": 0.03797246852560491, "sum": 0.037030204240353845, "sort": 0.03618732011509124, "dict": 0.03553327874227775, "lambda": 0.035424838676656634, "enumerate": 0.035424838676656634, "path": 0.03475263611556683, "id": 0.03329708766427521, "entries": 0.03294359925022592, "round": 0.03242729108112535, "values": 0.030642142670611675, "tuple": 0.029524047131610408, "items": 0.02766963421915181, "key": 0.02766963421915181, "cfg": 0.02663594036731176, "len": 0.025096965226132112, "continue": 0.024154700940881044, "or": 0.020175480113410246, "append": 0.019962134136752952, "int": 0.019754330245526867, "true": 0.018698909901186483, "title": 0.017608218352769434, "def": 0.014849494462435598, "return": 0.013474692407022325, "if": 0.01110336638765804}, "norm": 0.6760040781911897, "snippet": "h.sqrt(sum(value * value for value in query_weights.values())) or 1e-9 scored: List[Tuple[float, dict]] = [] for entry in entries: weights: Dict[str, float] = entry.get(\"weights\", {}) score = 0.0 for token, q_weight in query_weights.items(): score += q_weight * weights.get(token, 0.0) score /= (query_norm *…", "text": "h.sqrt(sum(value * value for value in query_weights.values())) or 1e-9\n\n    scored: List[Tuple[float, dict]] = []\n    for entry in entries:\n        weights: Dict[str, float] = entry.get(\"weights\", {})\n        score = 0.0\n        for token, q_weight in query_weights.items():\n            score += q_weight * weights.get(token, 0.0)\n        score /= (query_norm * entry.get(\"norm\", 1e-9))\n        if score <= 0:\n            continue\n        scored.append((score, entry))\n    scored.sort(key=lambda item: item[0], reverse=True)\n    max_results = int(cfg.get(\"max_results\", top_k))\n    return [\n        {\n            \"score\": round(score, 6),\n            \"id\": entry[\"id\"],\n            \"path\": entry[\"path\"],\n            \"start_line\": entry[\"start_line\"],\n            \"end_line\": entry[\"end_line\"],\n            \"snippet\": entry.get(\"snippet\", \"\"),\n            \"text\": entry.get(\"text\", \"\"),\n        }\n        for score, entry in scored[: max(top_k, max_results)]\n    ]\n\n\ndef print_table(title: str, rows: List[List[str]], headers: List[str]) -> str:\n    widths = [len(header) for header in headers]\n    for row in rows:\n        for idx, cell in enumerate(row):\n            widths[idx] = max(widths[idx], "}
{"id": "scripts/agents/heart_engine.py:312-348", "path": "scripts/agents/heart_engine.py", "start": 10000, "end": 11200, "start_line": 312, "end_line": 348, "weights": {"widths": 0.17802982807862427, "border": 0.17622731749884127, "idx": 0.166965132984325, "cell": 0.1460479558677112, "render_row": 0.13217048812413096, "row": 0.1311092538436589, "pip": 0.11785439488696797, "headers": 0.11261746057673393, "namespace": 0.11261746057673393, "args": 0.09976865135151816, "str": 0.0992058030746523, "lines": 0.09892560599188387, "requirements": 0.09354026273401544, "fill": 0.08811365874942063, "cells": 0.08368778071170092, "cmd_sync": 0.08368778071170092, "argparse": 0.07903390905503759, "in": 0.07828160272880201, "parts": 0.07744985597157532, "memory": 0.07507830705115595, "list": 0.0733338107966195, "def": 0.07139180030017114, "join": 0.0707261536543128, "enumerate": 0.06812468976280123, "header": 0.06555462692182945, "heart": 0.0633530754812037, "venv": 0.0605481284536044, "rows": 0.05971632504944631, "none": 0.051249921262900594, "cfg": 0.05122296224483031, "len": 0.048263394665638684, "exists": 0.04422702136613881, "build_index": 0.04405682937471032, "cmd_install": 0.04405682937471032, "cmd_refresh": 0.04184389035585046, "refresh": 0.04184389035585046, "root": 0.041771172972417524, "bin": 0.04079404365361251, "return": 0.038869305020256706, "ljust": 0.03872492798578766, "append": 0.03838871949375568, "updated": 0.035605965615724856, "vendor": 0.035605965615724856, "warn": 0.03479550011066466, "max": 0.034062344881400614, "txt": 0.034062344881400614, "index": 0.03167653774060185, "load_config": 0.02873044349247796, "sync": 0.026344636351679194, "if": 0.02135262766857315, "print": 0.019717847925685653, "title": 0.016930979185355226, "not": 0.015553685097286106}, "norm": 0.5834559886429976, "snippet": "List[List[str]], headers: List[str]) -> str: widths = [len(header) for header in headers] for row in rows: for idx, cell in enumerate(row): widths[idx] = max(widths[idx], len(cell)) def border(fill: str) -> str: return \"+\" + \"+\".join(fill * (w + 2) for w in widths) + \"+\" def render_row(cells: List[str]) -> str: parts…", "text": " List[List[str]], headers: List[str]) -> str:\n    widths = [len(header) for header in headers]\n    for row in rows:\n        for idx, cell in enumerate(row):\n            widths[idx] = max(widths[idx], len(cell))\n\n    def border(fill: str) -> str:\n        return \"+\" + \"+\".join(fill * (w + 2) for w in widths) + \"+\"\n\n    def render_row(cells: List[str]) -> str:\n        parts = [f\" {cell.ljust(widths[idx])} \" for idx, cell in enumerate(cells)]\n        return \"|\" + \"|\".join(parts) + \"|\"\n\n    lines = [title, border(\"-\"), render_row(headers), border(\"=\")]\n    for row in rows:\n        lines.append(render_row(row))\n    lines.append(border(\"-\"))\n    return \"\\n\".join(lines)\n\n\ndef cmd_sync(args: argparse.Namespace) -> None:\n    cfg = load_config()\n    build_index(cfg)\n    print(\"Memory Heart index updated\")\n\n\ndef cmd_refresh(args: argparse.Namespace) -> None:\n    # текущее упрощение: refresh == sync\n    cmd_sync(args)\n\n\ndef cmd_install(args: argparse.Namespace) -> None:\n    requirements = ROOT / \"vendor\" / \"memory-heart\" / \"requirements.txt\"\n    if requirements.exists():\n        pip = ROOT / \".venv\" / \"bin\" / \"pip\"\n        if not pip.exists():\n            warn(\".venv/bin/pip не найден — выполни"}
{"id": "scripts/agents/heart_engine.py:344-382", "path": "scripts/agents/heart_engine.py", "start": 11000, "end": 12200, "start_line": 344, "end_line": 382, "weights": {"item": 0.22461544943335854, "pip": 0.17410308335574814, "results": 0.1549472999970514, "requirements": 0.14739677764147888, "rows": 0.14114767738960035, "args": 0.11790840614270327, "heart": 0.11230772471667927, "score": 0.0948465853626609, "print": 0.0932116447396049, "query": 0.09153164796640718, "memory": 0.0887289083331843, "top_k": 0.07892897195622636, "snippet": 0.07487181647778618, "venv": 0.07155687908153247, "if": 0.06308730902078431, "install": 0.06288553231625411, "cfg": 0.06053622810752673, "endor": 0.055753208425640945, "applied": 0.055753208425640945, "4f": 0.055753208425640945, "he": 0.055753208425640945, "exists": 0.05226829797816405, "shorten": 0.052067161988294, "cmd_query": 0.04945187042055054, "placeholder": 0.04945187042055054, "print_table": 0.04945187042055054, "bin": 0.04821114249972387, "width": 0.04742329268133045, "60": 0.04742329268133045, "false": 0.04610073938603743, "query_chunks": 0.04576582398320359, "namespace": 0.04436445416659215, "textwrap": 0.04436445416659215, "complete": 0.04315053241546012, "format": 0.04315053241546012, "warn": 0.041121954676240045, "setup": 0.041121954676240045, "end_line": 0.041121954676240045, "txt": 0.04025549849620072, "available": 0.04025549849620072, "path": 0.039491631949507756, "start_line": 0.03946448597811318, "class": 0.03806311616150174, "json": 0.03752411222877625, "not": 0.03676325568449443, "load_config": 0.03395416049111031, "str": 0.03349806337585662, "subprocess": 0.032792038931929536, "agentcall": 0.03243548699417244, "check": 0.03144276615812706, "indent": 0.03144276615812706, "argparse": 0.03113457023380268, "return": 0.030624300925050734, "ensure_ascii": 0.02999672347967535, "dumps": 0.02947710153567582, "lines": 0.029228019952147504, "run": 0.026674361902452943, "root": 0.024682965847337625, "append": 0.022684243337219263, "else": 0.022105008660981924, "none": 0.020189362921748718, "get": 0.017327447105021137, "def": 0.016874425525494997, "in": 0.015419103567794332}, "norm": 0.5562787572749004, "snippet": "endor\" / \"memory-heart\" / \"requirements.txt\" if requirements.exists(): pip = ROOT / \".venv\" / \"bin\" / \"pip\" if not pip.exists(): warn(\".venv/bin/pip не найден — выполните agentcall setup\") else: subprocess.run([str(pip), \"install\", \"-r\", str(requirements)], check=False) print(\"Memory Heart install complete…", "text": "endor\" / \"memory-heart\" / \"requirements.txt\"\n    if requirements.exists():\n        pip = ROOT / \".venv\" / \"bin\" / \"pip\"\n        if not pip.exists():\n            warn(\".venv/bin/pip не найден — выполните agentcall setup\")\n        else:\n            subprocess.run([str(pip), \"install\", \"-r\", str(requirements)], check=False)\n    print(\"Memory Heart install complete (requirements applied if available)\")\n\n\ndef cmd_query(args: argparse.Namespace) -> None:\n    cfg = load_config()\n    results = query_chunks(cfg, args.query, top_k=args.top_k)\n    if args.format == \"json\":\n        print(json.dumps(results, ensure_ascii=False, indent=2))\n        return\n    rows = []\n    for item in results:\n        rows.append(\n            [\n                f\"{item['score']:.4f}\",\n                item[\"path\"],\n                f\"{item['start_line']}-{item['end_line']}\",\n                textwrap.shorten(item.get(\"snippet\", \"\"), width=60, placeholder=\"…\"),\n            ]\n        )\n    if not rows:\n        print(\"Нет подходящих фрагментов\")\n        return\n    print(\n        print_table(\n            \"Heart Query Results\",\n            rows,\n            [\"Score\", \"Path\", \"Lines\", \"Snippet\"],\n        )\n    )\n\n\nclass He"}
{"id": "scripts/agents/heart_engine.py:371-409", "path": "scripts/agents/heart_engine.py", "start": 12000, "end": 13200, "start_line": 371, "end_line": 409, "weights": {"self": 0.5838095263118849, "query": 0.36282815410107355, "parsed": 0.1657527818059596, "send_response": 0.1657527818059596, "params": 0.1657527818059596, "end_headers": 0.1547942653706038, "wfile": 0.1547942653706038, "payload": 0.1251020413525468, "results": 0.11516353378159226, "write": 0.10955165905785594, "send_header": 0.10319617691373587, "cfg": 0.0899862850247019, "content": 0.07544041041018362, "path": 0.05870377722224127, "text": 0.05842308412476288, "do_get": 0.055250927268653195, "n802": 0.055250927268653195, "404": 0.055250927268653195, "400": 0.055250927268653195, "parameter": 0.055250927268653195, "hearthandler": 0.05159808845686793, "basehttprequesthandler": 0.05159808845686793, "index_cache": 0.05159808845686793, "urlparse": 0.05159808845686793, "parse_qs": 0.05159808845686793, "application": 0.05159808845686793, "log_message": 0.05159808845686793, "print_table": 0.04900635807441946, "charset": 0.04900635807441946, "score": 0.046996055810327474, "load_chunks": 0.046996055810327474, "noqa": 0.046996055810327474, "encode": 0.046996055810327474, "return": 0.04552260948318353, "query_chunks": 0.045353519262634194, "length": 0.04396477439932556, "200": 0.04276178888018571, "found": 0.040751486616093735, "utf": 0.040196040671096576, "class": 0.03772020520509181, "required": 0.03772020520509181, "json": 0.03718605716365214, "heart": 0.03709864780430847, "snippet": 0.03709864780430847, "not": 0.03643205518283232, "rows": 0.034969019173099185, "get": 0.034342687955897754, "load_config": 0.03364826715335256, "def": 0.03344480734782792, "ensure_ascii": 0.029726482727606206, "dumps": 0.02921154206238144, "lines": 0.028964704457083112, "len": 0.028262348227626254, "type": 0.025558703250596178, "if": 0.02500758195418477, "print": 0.023092975048100314, "false": 0.022842708704793324, "or": 0.022720135262849373, "none": 0.020007476769300533, "str": 0.016598139510559586}, "norm": 0.8681020550991598, "snippet": "одходящих фрагментов\") return print( print_table( \"Heart Query Results\", rows, [\"Score\", \"Path\", \"Lines\", \"Snippet\"], ) ) class HeartHandler(BaseHTTPRequestHandler): cfg = load_config() index_cache = load_chunks(cfg) def do_GET(self) -> None: # noqa: N802 parsed = urlparse(self.path) if parsed.path != \"/query\":…", "text": "одходящих фрагментов\")\n        return\n    print(\n        print_table(\n            \"Heart Query Results\",\n            rows,\n            [\"Score\", \"Path\", \"Lines\", \"Snippet\"],\n        )\n    )\n\n\nclass HeartHandler(BaseHTTPRequestHandler):\n    cfg = load_config()\n    index_cache = load_chunks(cfg)\n\n    def do_GET(self) -> None:  # noqa: N802\n        parsed = urlparse(self.path)\n        if parsed.path != \"/query\":\n            self.send_response(404)\n            self.end_headers()\n            self.wfile.write(b\"Not Found\")\n            return\n        params = parse_qs(parsed.query)\n        query = params.get(\"q\") or params.get(\"query\")\n        if not query:\n            self.send_response(400)\n            self.end_headers()\n            self.wfile.write(b\"query parameter required\")\n            return\n        text = query[0]\n        results = query_chunks(self.cfg, text)\n        payload = json.dumps(results, ensure_ascii=False).encode(\"utf-8\")\n        self.send_response(200)\n        self.send_header(\"Content-Type\", \"application/json; charset=utf-8\")\n        self.send_header(\"Content-Length\", str(len(payload)))\n        self.end_headers()\n        self.wfile.write(payload)\n\n    def log_message("}
{"id": "scripts/agents/heart_engine.py:404-436", "path": "scripts/agents/heart_engine.py", "start": 13000, "end": 14200, "start_line": 404, "end_line": 436, "weights": {"handler": 0.19016598222699238, "args": 0.17594859056178588, "server": 0.1686730463956763, "self": 0.1435279234122242, "heart": 0.12768836918692217, "memory": 0.1134904641470962, "argparse": 0.10619543335560604, "cfg": 0.10324007894306884, "sub": 0.09909420348648636, "host": 0.08879671036763319, "port": 0.08879671036763319, "namespace": 0.07566030943139747, "payload": 0.0717639617061121, "vendor": 0.0717639617061121, "add_parser": 0.06865278813305549, "content": 0.0649138415157394, "argumentparser": 0.0649138415157394, "print": 0.05961209837997988, "parser": 0.05790632021739743, "def": 0.05755618008695968, "help": 0.056557306620658984, "install": 0.053623322130139164, "none": 0.051647207474240904, "ader": 0.047541495556748095, "a003": 0.047541495556748095, "serve_forever": 0.047541495556748095, "keyboardinterrupt": 0.047541495556748095, "heartbeat": 0.047541495556748095, "stopped": 0.047541495556748095, "remote": 0.047541495556748095, "application": 0.044398355183816594, "send_header": 0.044398355183816594, "end_headers": 0.044398355183816594, "wfile": 0.044398355183816594, "log_message": 0.044398355183816594, "hearthandler": 0.044398355183816594, "index_cache": 0.044398355183816594, "httpserver": 0.044398355183816594, "running": 0.044398355183816594, "cmd_update": 0.044398355183816594, "recursive": 0.044398355183816594, "utility": 0.044398355183816594, "charset": 0.04216826159891907, "cmd_serve": 0.04216826159891907, "submodule": 0.04216826159891907, "noqa": 0.04043846662749108, "load_chunks": 0.04043846662749108, "http": 0.04043846662749108, "runtime": 0.04043846662749108, "length": 0.037830154715698734, "build_parser": 0.037830154715698734, "format": 0.03679502764109003, "init": 0.03679502764109003, "add_subparsers": 0.03679502764109003, "on": 0.0324569207578697, "dest": 0.0324569207578697, "required": 0.0324569207578697, "index": 0.03192209229673054, "write": 0.031421793683261, "description": 0.031421793683261, "files": 0.031421793683261, "git": 0.030508746895227017, "load_config": 0.028953160108698715, "update": 0.028608572801948066}, "norm": 0.5558888202121786, "snippet": "ader(\"Content-Type\", \"application/json; charset=utf-8\") self.send_header(\"Content-Length\", str(len(payload))) self.end_headers() self.wfile.write(payload) def log_message(self, format: str, *args: object) -> None: # noqa: A003 return def cmd_serve(args: argparse.Namespace) -> None: cfg = load_config() handler =…", "text": "ader(\"Content-Type\", \"application/json; charset=utf-8\")\n        self.send_header(\"Content-Length\", str(len(payload)))\n        self.end_headers()\n        self.wfile.write(payload)\n\n    def log_message(self, format: str, *args: object) -> None:  # noqa: A003\n        return\n\n\ndef cmd_serve(args: argparse.Namespace) -> None:\n    cfg = load_config()\n    handler = HeartHandler\n    handler.cfg = cfg\n    handler.index_cache = load_chunks(cfg)\n    server = HTTPServer((args.host, args.port), handler)\n    print(f\"Heart server running on http://{args.host}:{args.port}\")\n    try:\n        server.serve_forever()\n    except KeyboardInterrupt:\n        print(\"Heartbeat server stopped\")\n\n\ndef cmd_update(args: argparse.Namespace) -> None:\n    subprocess.run([\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\", \"--remote\", \"vendor/memory-heart\"], check=False)\n    print(\"vendor/memory-heart обновлён\")\n\n\ndef build_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(description=\"Memory Heart utility\")\n    sub = parser.add_subparsers(dest=\"command\", required=True)\n\n    sub.add_parser(\"install\", help=\"Install runtime dependencies\")\n    sub.add_parser(\"sync\", help=\"Index source files "}
{"id": "scripts/agents/heart_engine.py:432-461", "path": "scripts/agents/heart_engine.py", "start": 14000, "end": 15200, "start_line": 432, "end_line": 461, "weights": {"args": 0.24379557661085263, "sub": 0.2242658289431007, "add_parser": 0.19976412787588327, "help": 0.19199717247539497, "query": 0.1892571668478344, "add_argument": 0.14399503134685934, "srv": 0.13833502842452264, "heart": 0.12384811748205234, "refresh": 0.12270012961489984, "command": 0.11962163176623217, "parser": 0.11232955350442508, "elif": 0.11232955350442508, "default": 0.10300158573588857, "table": 0.0922233522830151, "serve": 0.08612613261221565, "install": 0.0780158859562551, "sync": 0.07725118930191642, "memory": 0.07338481140338551, "index": 0.06192405874102617, "int": 0.05569829956445545, "update": 0.055496329194756396, "argv": 0.05053028879068757, "none": 0.05009390800133141, "alias": 0.04611167614150755, "127": 0.04611167614150755, "8765": 0.04611167614150755, "utility": 0.043063066306107824, "top": 0.043063066306107824, "choices": 0.043063066306107824, "lightweight": 0.043063066306107824, "host": 0.043063066306107824, "port": 0.043063066306107824, "cmd_install": 0.043063066306107824, "type": 0.042661895651371066, "server": 0.04090004320496662, "submodule": 0.04090004320496662, "cmd_sync": 0.04090004320496662, "cmd_refresh": 0.04090004320496662, "cmd_query": 0.04090004320496662, "cmd_serve": 0.04090004320496662, "runtime": 0.03922227214245375, "summaries": 0.03922227214245375, "search": 0.03922227214245375, "http": 0.03922227214245375, "build_parser": 0.03669240570169276, "add_subparsers": 0.03568841026842567, "format": 0.03568841026842567, "dest": 0.031480772765151814, "required": 0.031480772765151814, "parse_args": 0.030962029370513084, "files": 0.030476777331884728, "start": 0.029591190597626205, "source": 0.027748164597378198, "text": 0.024379557661085263, "main": 0.024379557661085263, "dependencies": 0.018470317706116002, "list": 0.017919916172106268, "true": 0.017574163440964737, "json": 0.015517490019418751, "def": 0.01395629178800338, "str": 0.013852582599038451, "return": 0.012664184593066093, "if": 0.010435494725242517}, "norm": 0.6640898099809289, "snippet": "Heart utility\") sub = parser.add_subparsers(dest=\"command\", required=True) sub.add_parser(\"install\", help=\"Install runtime dependencies\") sub.add_parser(\"sync\", help=\"Index source files into memory heart\") sub.add_parser(\"refresh\", help=\"Refresh summaries (alias sync)\") q = sub.add_parser(\"query\", help=\"Search the…", "text": " Heart utility\")\n    sub = parser.add_subparsers(dest=\"command\", required=True)\n\n    sub.add_parser(\"install\", help=\"Install runtime dependencies\")\n    sub.add_parser(\"sync\", help=\"Index source files into memory heart\")\n    sub.add_parser(\"refresh\", help=\"Refresh summaries (alias sync)\")\n    q = sub.add_parser(\"query\", help=\"Search the heart index\")\n    q.add_argument(\"query\", help=\"Text query\")\n    q.add_argument(\"--top-k\", type=int, default=None)\n    q.add_argument(\"--format\", choices=[\"table\", \"json\"], default=\"table\")\n    srv = sub.add_parser(\"serve\", help=\"Start lightweight HTTP query server\")\n    srv.add_argument(\"--host\", default=\"127.0.0.1\")\n    srv.add_argument(\"--port\", type=int, default=8765)\n    sub.add_parser(\"update\", help=\"Update memory-heart submodule\")\n    return parser\n\n\ndef main(argv: List[str] | None = None) -> int:\n    parser = build_parser()\n    args = parser.parse_args(argv)\n    if args.command == \"install\":\n        cmd_install(args)\n    elif args.command == \"sync\":\n        cmd_sync(args)\n    elif args.command == \"refresh\":\n        cmd_refresh(args)\n    elif args.command == \"query\":\n        cmd_query(args)\n    elif args.command == \"serve\":\n        cmd_serve(a"}
{"id": "scripts/agents/heart_engine.py:454-472", "path": "scripts/agents/heart_engine.py", "start": 15000, "end": 15391, "start_line": 454, "end_line": 472, "weights": {"args": 0.7887116356842989, "elif": 0.40377920584023075, "command": 0.2866608472956555, "print_help": 0.1657527818059596, "serve": 0.1547942653706038, "cmd_update": 0.1547942653706038, "cmd_sync": 0.14701907422325838, "refresh": 0.14701907422325838, "cmd_refresh": 0.14701907422325838, "cmd_query": 0.14701907422325838, "cmd_serve": 0.14701907422325838, "query": 0.13606055778790258, "parser": 0.10094480146005769, "__name__": 0.10094480146005769, "__main__": 0.10094480146005769, "update": 0.09974340247165678, "return": 0.09104521896636707, "systemexit": 0.0899862850247019, "main": 0.08763462618714433, "raise": 0.08346839159721843, "else": 0.06571759331643275, "if": 0.03751137293127716}, "norm": 1.0707651174286952, "snippet": "c\": cmd_sync(args) elif args.command == \"refresh\": cmd_refresh(args) elif args.command == \"query\": cmd_query(args) elif args.command == \"serve\": cmd_serve(args) elif args.command == \"update\": cmd_update(args) else: parser.print_help() return 1 return 0 if __name__ == \"__main__\": raise SystemExit(main())", "text": "c\":\n        cmd_sync(args)\n    elif args.command == \"refresh\":\n        cmd_refresh(args)\n    elif args.command == \"query\":\n        cmd_query(args)\n    elif args.command == \"serve\":\n        cmd_serve(args)\n    elif args.command == \"update\":\n        cmd_update(args)\n    else:\n        parser.print_help()\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/status.py:1-48", "path": "scripts/agents/status.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 48, "weights": {"import": 0.22645032132075976, "override": 0.22617075071932025, "path": 0.1267023191713374, "str": 0.12282623237814093, "fallback": 0.11070262086455199, "os": 0.1029443496365694, "agents": 0.0971325700650768, "root": 0.09050420810690463, "default_config_path": 0.08390401063587326, "environ": 0.08323731364784925, "auth_status": 0.08133483263875227, "expanduser": 0.07235155762654083, "dataclass": 0.06978237962941986, "return": 0.05614455169592635, "bool": 0.05314023246090107, "datetime": 0.052707307687513395, "json": 0.051595654314567356, "display": 0.05110710772350421, "exp": 0.05110710772350421, "information": 0.04772823182260284, "get": 0.04765047953880813, "last_log": 0.045330881218838, "default_log_dir": 0.043471351624552915, "agentstatus": 0.043471351624552915, "auth_message": 0.043471351624552915, "credentials_ok": 0.043471351624552915, "last_command": 0.043471351624552915, "last_timestamp": 0.043471351624552915, "agents_auth_state_dir": 0.043471351624552915, "agents_auth_state_fallback": 0.043471351624552915, "configured": 0.04195200531793663, "default_state_dir": 0.04195200531793663, "cli_exists": 0.04195200531793663, "credentials_paths": 0.04195200531793663, "agents_config_path": 0.04195200531793663, "resolve_state_dir": 0.040667416319376135, "list": 0.039722480848168894, "state_filename": 0.03955465471417178, "dataclasses": 0.03769512511988671, "resolve_config_path": 0.036175778813270415, "shutil": 0.03489118981470993, "class": 0.03489118981470993, "if": 0.03469801996143137, "typing": 0.032796902912369044, "__file__": 0.032796902912369044, "__future__": 0.032346342735116745, "annotations": 0.032346342735116745, "cli": 0.031512313913808564, "def": 0.03093644679674083, "resolve": 0.03075421576209417, "argparse": 0.028540022714319123, "config": 0.028540022714319123, "reports": 0.02774577121594975, "pathlib": 0.02749699652303574, "parents": 0.02749699652303574, "ai": 0.02679235162280188, "state": 0.026142672110554283, "usr": 0.02411812062213437, "name": 0.023641800506801466, "env": 0.022763796209652912, "python3": 0.022763796209652912, "bin": 0.022096773645706776, "dict": 0.01850691601160299, "status": 0.014538297853299893}, "norm": 0.5279549744208887, "snippet": "#!/usr/bin/env python3 \"\"\"Display status information for configured AI agents.\"\"\" from __future__ import annotations import argparse import json import os import shutil from dataclasses import dataclass from datetime import datetime from pathlib import Path from typing import Dict, List ROOT =…", "text": "#!/usr/bin/env python3\n\"\"\"Display status information for configured AI agents.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport shutil\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List\n\nROOT = Path(__file__).resolve().parents[2]\nDEFAULT_CONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nDEFAULT_STATE_DIR = ROOT / \"state\" / \"agents\"\nDEFAULT_LOG_DIR = ROOT / \"reports\" / \"agents\"\nSTATE_FILENAME = \"auth_status.json\"\n\n\n@dataclass\nclass AgentStatus:\n    name: str\n    cli: str\n    cli_exists: bool\n    auth_status: str\n    auth_message: str\n    credentials_ok: bool\n    credentials_paths: List[str]\n    last_log: str\n    last_command: str\n    last_timestamp: str\n\n\ndef resolve_config_path() -> Path:\n    override = os.environ.get(\"AGENTS_CONFIG_PATH\")\n    if override:\n        return Path(override).expanduser()\n    return DEFAULT_CONFIG_PATH\n\n\ndef resolve_state_dir() -> Path:\n    override = os.environ.get(\"AGENTS_AUTH_STATE_DIR\")\n    if override:\n        return Path(override).expanduser()\n    fallback = os.environ.get(\"AGENTS_AUTH_STATE_FALLBACK\")\n    if fallback:\n        return Path(fallback).exp"}
{"id": "scripts/agents/status.py:43-82", "path": "scripts/agents/status.py", "start": 1000, "end": 2200, "start_line": 43, "end_line": 82, "weights": {"path": 0.23756684844625764, "command": 0.12429435175710062, "return": 0.11842991373359466, "fh": 0.1181711771767821, "object": 0.11272263382850779, "state_path": 0.10601753939968137, "fallback": 0.10378370706051748, "str": 0.10075589374769374, "isinstance": 0.08549874086794933, "value": 0.08106338150142131, "config": 0.08026881388402254, "if": 0.07590191866563112, "agent_cfg": 0.0723246176569411, "override": 0.07067835959978758, "dict": 0.06940093504351122, "expanduser": 0.06782958527488203, "not": 0.0631868457077248, "load": 0.06238729317694116, "state_dir": 0.06238729317694116, "get": 0.059563099423510166, "def": 0.05800583774388905, "open": 0.05574849327123388, "as": 0.04683372985767743, "exists": 0.04491806857498473, "resolve_cli": 0.042497701142660625, "agents_auth_state_dir": 0.040754392148018355, "agents_auth_state_fallback": 0.040754392148018355, "default_log_dir": 0.040754392148018355, "encoding": 0.039405234596504385, "default_state_dir": 0.03933000498556559, "resolve_log_dir": 0.03933000498556559, "is_absolute": 0.037082488794536045, "state_filename": 0.037082488794536045, "found": 0.03533917979989379, "load_state": 0.03533917979989379, "utf": 0.034857504019466565, "filenotfounderror": 0.034594569020172494, "candidate": 0.033914792637441016, "json": 0.032247283946604595, "log_dir": 0.03217148364279875, "load_config": 0.029179356672047924, "elif": 0.029179356672047924, "resolve": 0.028832077276963287, "tuple": 0.028832077276963287, "environ": 0.026011660514952892, "bool": 0.024909483966047377, "os": 0.024127581946070953, "raise": 0.024127581946070953, "agents": 0.022765446109002378, "root": 0.021211923775055774, "list": 0.01861991289757917}, "norm": 0.49592880219718855, "snippet": ".get(\"AGENTS_AUTH_STATE_DIR\") if override: return Path(override).expanduser() fallback = os.environ.get(\"AGENTS_AUTH_STATE_FALLBACK\") if fallback: return Path(fallback).expanduser() return DEFAULT_STATE_DIR def resolve_log_dir(config: Dict[str, object]) -> Path: value = config.get(\"log_dir\") if isinstance(value, str):…", "text": ".get(\"AGENTS_AUTH_STATE_DIR\")\n    if override:\n        return Path(override).expanduser()\n    fallback = os.environ.get(\"AGENTS_AUTH_STATE_FALLBACK\")\n    if fallback:\n        return Path(fallback).expanduser()\n    return DEFAULT_STATE_DIR\n\n\ndef resolve_log_dir(config: Dict[str, object]) -> Path:\n    value = config.get(\"log_dir\")\n    if isinstance(value, str):\n        path = Path(value)\n        if not path.is_absolute():\n            return (ROOT / path).resolve()\n        return path\n    return DEFAULT_LOG_DIR\n\n\ndef load_config(path: Path) -> Dict[str, object]:\n    if not path.exists():\n        raise FileNotFoundError(f\"config not found: {path}\")\n    with path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef load_state(state_dir: Path) -> Dict[str, object]:\n    state_path = state_dir / STATE_FILENAME\n    if not state_path.exists():\n        return {\"agents\": {}}\n    with state_path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef resolve_cli(agent_cfg: Dict[str, object]) -> tuple[str, bool]:\n    command = agent_cfg.get(\"command\")\n    if isinstance(command, list) and command:\n        candidate = command[0]\n    elif isinstance(command, str):\n   "}
{"id": "scripts/agents/status.py:77-116", "path": "scripts/agents/status.py", "start": 2000, "end": 3200, "start_line": 77, "end_line": 116, "weights": {"path": 0.17376318057783416, "candidate": 0.173643738303698, "command": 0.14849031889914954, "candidate_path": 0.1471884702436921, "resolved": 0.1374573076490962, "str": 0.1326523309683922, "if": 0.12213703026423842, "return": 0.1212722316632009, "is_file": 0.10856196034527373, "log_dir": 0.09883079775067777, "path_str": 0.09812564682912807, "files": 0.09728187324337606, "child": 0.09163820509939745, "false": 0.08113730131942588, "true": 0.07479563960474593, "agent": 0.05988640241025885, "tuple": 0.059048094263220816, "isinstance": 0.05836714043252007, "bool": 0.05101462316246503, "_cfg": 0.049062823414564034, "unconfigured": 0.049062823414564034, "not": 0.04852749750353265, "path_exists": 0.045819102549698724, "last_log_entry": 0.045819102549698724, "name": 0.04539225697305881, "rglob": 0.0417324975595708, "count": 0.04027392510521916, "is_dir": 0.039040719666601095, "permissionerror": 0.039040719666601095, "glob": 0.039040719666601095, "is_absolute": 0.03797246852560491, "agent_cfg": 0.037030204240353845, "which": 0.037030204240353845, "shutil": 0.03349554222212153, "sorted": 0.03349554222212153, "split": 0.03349554222212153, "elif": 0.029879661232177075, "def": 0.029698988924871196, "resolve": 0.029524047131610408, "object": 0.028856994260097996, "in": 0.027137622279318027, "except": 0.024334483787697512, "try": 0.024154700940881044, "fi": 0.023638392771780474, "exists": 0.022998051110392183, "log": 0.022998051110392183, "root": 0.02172100994565711, "else": 0.019452407621664093, "list": 0.01906679080712107, "dict": 0.017766639371138874, "none": 0.017766639371138874, "get": 0.015248153452418603}, "norm": 0.5314871181953706, "snippet": "_cfg: Dict[str, object]) -> tuple[str, bool]: command = agent_cfg.get(\"command\") if isinstance(command, list) and command: candidate = command[0] elif isinstance(command, str): candidate = command else: return \"<unconfigured>\", False candidate_path = Path(candidate) if candidate_path.is_file(): return…", "text": "_cfg: Dict[str, object]) -> tuple[str, bool]:\n    command = agent_cfg.get(\"command\")\n    if isinstance(command, list) and command:\n        candidate = command[0]\n    elif isinstance(command, str):\n        candidate = command\n    else:\n        return \"<unconfigured>\", False\n    candidate_path = Path(candidate)\n    if candidate_path.is_file():\n        return str(candidate_path), True\n    resolved = shutil.which(candidate)\n    if resolved:\n        return resolved, True\n    return candidate, False\n\n\ndef path_exists(path_str: str) -> bool:\n    path = Path(path_str)\n    if not path.is_absolute():\n        path = (ROOT / path).resolve()\n    try:\n        if path.is_file():\n            return True\n        if path.is_dir():\n            for child in path.rglob(\"*\"):\n                if child.is_file():\n                    return True\n    except PermissionError:\n        return False\n    return False\n\n\ndef last_log_entry(log_dir: Path, agent: str | None) -> tuple[str, str, str]:\n    if not log_dir.exists():\n        return (\"\", \"\", \"\")\n    files = sorted(log_dir.glob(\"*.log\"))\n    if agent:\n        files = [f for f in files if f.name.count(\"-\") >= 2 and f.name.split(\"-\")[1] == agent]\n    if not fi"}
{"id": "scripts/agents/status.py:111-143", "path": "scripts/agents/status.py", "start": 3000, "end": 4200, "start_line": 111, "end_line": 143, "weights": {"parts": 0.2986413937887014, "files": 0.17175471970935038, "agents_cfg": 0.13262446258338179, "state_agents": 0.13262446258338179, "isinstance": 0.12365919583161032, "last": 0.12067521777204951, "name": 0.12021254494983795, "if": 0.11762040664891989, "else": 0.10303182003000048, "agentstatus": 0.08841630838892117, "config": 0.08707125573860072, "config_path": 0.08532611251105755, "cfg": 0.084648115574084, "get": 0.08076352464204768, "state": 0.07975730474406392, "dict": 0.07528237021669014, "agents": 0.0740841636089569, "split": 0.07096513182652867, "log_dir": 0.06979576112336, "state_dir": 0.06767435192074973, "timestamp": 0.06578917166464424, "return": 0.057096154267043744, "len": 0.053171536496042615, "ists": 0.05197332988830936, "auth_s": 0.05197332988830936, "not": 0.051406247355437126, "stem": 0.04853718490434187, "agent_name": 0.04853718490434187, "collect_status": 0.04853718490434187, "cli_path": 0.04853718490434187, "state_entry": 0.04853718490434187, "resolve_cli": 0.04609920123949627, "command": 0.04494259046584429, "count": 0.042663056255528777, "resolve_log_dir": 0.042663056255528777, "cli_exists": 0.042663056255528777, "agent": 0.042292657069391844, "glob": 0.041356694562077426, "resolve_state_dir": 0.041356694562077426, "list": 0.040395743235425996, "load_state": 0.0383340255456475, "resolve_config_path": 0.03678892760671568, "results": 0.03611059957558401, "sorted": 0.03548256591326433, "load_config": 0.031652183508662154, "items": 0.029311053198254035, "in": 0.02874748122809113, "continue": 0.025587606928899408, "log": 0.024362342277957822, "def": 0.015730396676308895, "str": 0.015613504115865373}, "norm": 0.5894838357299876, "snippet": "ists(): return (\"\", \"\", \"\") files = sorted(log_dir.glob(\"*.log\")) if agent: files = [f for f in files if f.name.count(\"-\") >= 2 and f.name.split(\"-\")[1] == agent] if not files: return (\"\", \"\", \"\") last = files[-1] parts = last.stem.split(\"-\", 2) timestamp = parts[0] if parts else \"\" agent_name = parts[1] if len(parts)…", "text": "ists():\n        return (\"\", \"\", \"\")\n    files = sorted(log_dir.glob(\"*.log\"))\n    if agent:\n        files = [f for f in files if f.name.count(\"-\") >= 2 and f.name.split(\"-\")[1] == agent]\n    if not files:\n        return (\"\", \"\", \"\")\n    last = files[-1]\n    parts = last.stem.split(\"-\", 2)\n    timestamp = parts[0] if parts else \"\"\n    agent_name = parts[1] if len(parts) > 1 else \"\"\n    command = parts[2] if len(parts) > 2 else \"\"\n    return (str(last), command, timestamp)\n\n\ndef collect_status() -> List[AgentStatus]:\n    config_path = resolve_config_path()\n    config = load_config(config_path)\n    agents_cfg = config.get(\"agents\", {})\n    if not isinstance(agents_cfg, dict):\n        return []\n    state_dir = resolve_state_dir()\n    state = load_state(state_dir)\n    state_agents = state.get(\"agents\", {}) if isinstance(state.get(\"agents\"), dict) else {}\n    log_dir = resolve_log_dir(config)\n\n    results: List[AgentStatus] = []\n    for name, cfg in agents_cfg.items():\n        if not isinstance(cfg, dict):\n            continue\n        cli_path, cli_exists = resolve_cli(cfg)\n        state_entry = state_agents.get(name, {}) if isinstance(state_agents.get(name), dict) else {}\n        auth_s"}
{"id": "scripts/agents/status.py:139-172", "path": "scripts/agents/status.py", "start": 4000, "end": 5200, "start_line": 139, "end_line": 172, "weights": {"name": 0.25791055098328874, "state_entry": 0.23140960883686226, "stored_paths": 0.18702123353714065, "auth_message": 0.1580776422711015, "credentials_ok": 0.1580776422711015, "last_command": 0.1580776422711015, "cli_exists": 0.15255274661067866, "auth_status": 0.14788151388864051, "last_ts": 0.12389601872364657, "cli_path": 0.11570480441843113, "state_agents": 0.10538509484740101, "get": 0.09626359502789522, "log_file": 0.09589007203435584, "str": 0.09305017604404617, "path": 0.08775918211001725, "results": 0.08608183333169524, "missing": 0.08608183333169524, "cfg": 0.0672624756750297, "nce": 0.061948009361823285, "ro": 0.061948009361823285, "path_exists": 0.057852402209215566, "last_log_entry": 0.057852402209215566, "resolve_cli": 0.054946522689500614, "last_log": 0.054946522689500614, "short": 0.054946522689500614, "agentstatus": 0.052692547423700505, "last_timestamp": 0.052692547423700505, "return": 0.05104050154175123, "credentials_paths": 0.05085091553689289, "else": 0.04912224146884873, "render_table": 0.04794503601717792, "unknown": 0.04675530838428516, "dict": 0.04486525093721938, "if": 0.04205820601385621, "log_dir": 0.04159545359877011, "message": 0.04094354934485525, "not": 0.04084806187166048, "any": 0.04033117942751752, "cli": 0.038196744137949774, "def": 0.037498723389988886, "isinstance": 0.036847942192247525, "in": 0.03426467459509852, "bool": 0.0322062014914552, "continue": 0.030498359773839703, "false": 0.025611521881131912, "or": 0.025474091052285666, "append": 0.025204714819132515, "status": 0.017622179216121085}, "norm": 0.6559943143662277, "snippet": "nce(cfg, dict): continue cli_path, cli_exists = resolve_cli(cfg) state_entry = state_agents.get(name, {}) if isinstance(state_agents.get(name), dict) else {} auth_status = state_entry.get(\"status\", \"unknown\") auth_message = state_entry.get(\"message\", \"\") stored_paths = [str(p) for p in state_entry.get(\"stored_paths\",…", "text": "nce(cfg, dict):\n            continue\n        cli_path, cli_exists = resolve_cli(cfg)\n        state_entry = state_agents.get(name, {}) if isinstance(state_agents.get(name), dict) else {}\n        auth_status = state_entry.get(\"status\", \"unknown\")\n        auth_message = state_entry.get(\"message\", \"\")\n        stored_paths = [str(p) for p in state_entry.get(\"stored_paths\", []) or []]\n        credentials_ok = any(path_exists(p) for p in stored_paths)\n        log_file, last_command, last_ts = last_log_entry(log_dir, name)\n        results.append(\n            AgentStatus(\n                name=name,\n                cli=cli_path,\n                cli_exists=cli_exists,\n                auth_status=str(auth_status),\n                auth_message=str(auth_message),\n                credentials_ok=credentials_ok,\n                credentials_paths=stored_paths,\n                last_log=log_file,\n                last_command=last_command,\n                last_timestamp=last_ts,\n            )\n        )\n    return results\n\n\ndef short(path: str, missing: bool = False) -> str:\n    if not path:\n        return \"\"\n    name = Path(path).name\n    return name if not missing else f\"{name}!\"\n\n\ndef render_table(ro"}
{"id": "scripts/agents/status.py:162-197", "path": "scripts/agents/status.py", "start": 5000, "end": 6200, "start_line": 162, "end_line": 197, "weights": {"row": 0.43543584305740723, "last": 0.13858565155330257, "widths": 0.1351467308042111, "creds": 0.1342960494924198, "lines": 0.1173387662312491, "auth": 0.11490885691924921, "cli": 0.11040810714327087, "headers": 0.1068632837589446, "name": 0.10354073214657575, "missing": 0.0933076806551587, "data": 0.09017023325830896, "col": 0.0895306996616132, "column": 0.0895306996616132, "join": 0.08948321143611351, "in": 0.08666211494307764, "rows": 0.08499768893899291, "str": 0.08068876579585901, "short": 0.07941176271913226, "auth_message": 0.076154192626954, "last_timestamp": 0.076154192626954, "last_command": 0.076154192626954, "ljust": 0.07349256406061891, "append": 0.0728545041487334, "cell": 0.06929282577665129, "enumerate": 0.06464386619827853, "path": 0.06341721918899056, "return": 0.061472136893350016, "if": 0.06078485248717905, "not": 0.059035885040793976, "zip": 0.0447653498308066, "def": 0.04064642644827262, "agentstatus": 0.038077096313477, "credentials_ok": 0.038077096313477, "cli_exists": 0.036746282030309455, "auth_status": 0.035621094586314864, "else": 0.03549709420011696, "render_table": 0.034646412888325644, "max": 0.03232193309913926, "results": 0.03110256021838623, "ok": 0.030058028512979857, "main": 0.023667745758571824, "bool": 0.023273094508423825, "len": 0.02289869089975558, "strip": 0.02254255831457724, "false": 0.018507596103883642, "or": 0.018408284775009345, "agent": 0.01821362603718335, "int": 0.0180240239466486, "list": 0.017396706940803894}, "norm": 0.6672592830015811, "snippet": "return results def short(path: str, missing: bool = False) -> str: if not path: return \"\" name = Path(path).name return name if not missing else f\"{name}!\" def render_table(rows: List[AgentStatus]) -> str: if not rows: return \"Нет сконфигурированных агентов.\" headers = [\"Agent\", \"Auth\", \"Creds\", \"CLI\", \"Last\"] data =…", "text": " return results\n\n\ndef short(path: str, missing: bool = False) -> str:\n    if not path:\n        return \"\"\n    name = Path(path).name\n    return name if not missing else f\"{name}!\"\n\n\ndef render_table(rows: List[AgentStatus]) -> str:\n    if not rows:\n        return \"Нет сконфигурированных агентов.\"\n    headers = [\"Agent\", \"Auth\", \"Creds\", \"CLI\", \"Last\"]\n    data = []\n    for row in rows:\n        auth = row.auth_status\n        if row.auth_message:\n            auth += f\" ({row.auth_message})\"\n        creds = \"ok\" if row.credentials_ok else \"missing\"\n        cli = short(row.cli, not row.cli_exists)\n        last = \"\"\n        if row.last_timestamp or row.last_command:\n            last = f\"{row.last_timestamp} {row.last_command}\".strip()\n        data.append([row.name, auth, creds, cli, last])\n    widths = [max(len(str(col)) for col in column) for column in zip(headers, *data)]\n    lines = []\n    lines.append(\" | \".join(str(h).ljust(widths[i]) for i, h in enumerate(headers)))\n    lines.append(\"-+-\".join(\"-\" * w for w in widths))\n    for row in data:\n        lines.append(\" | \".join(str(cell).ljust(widths[i]) for i, cell in enumerate(row)))\n    return \"\\n\".join(lines)\n\n\ndef main() -> int:\n    "}
{"id": "scripts/agents/status.py:190-225", "path": "scripts/agents/status.py", "start": 6000, "end": 7200, "start_line": 190, "end_line": 225, "weights": {"row": 0.537802521834426, "json_mode": 0.11908452285088357, "rows": 0.11305517849167018, "parser": 0.10878517438899421, "last_log": 0.10562535429632154, "auth_message": 0.10129246980478347, "credentials_ok": 0.10129246980478347, "last_command": 0.10129246980478347, "last_timestamp": 0.10129246980478347, "cli_exists": 0.09775224540101737, "credentials_paths": 0.09775224540101737, "auth_status": 0.09475902831699293, "cell": 0.09216618574175948, "widths": 0.0898791365057132, "payload": 0.0898791365057132, "join": 0.08926601917534625, "json": 0.08014858922651238, "cli": 0.07342675086712674, "in": 0.06586801524106317, "args": 0.06296079939658912, "lines": 0.062428780480315055, "ra": 0.059542261425441785, "show": 0.055605706977789715, "collect_status": 0.055605706977789715, "name": 0.05508769050128497, "status_json": 0.050646234902391736, "print": 0.049773208356099705, "return": 0.04905834614207157, "ljust": 0.04887612270050869, "render_table": 0.04608309287087974, "enumerate": 0.04299130907361241, "argumentparser": 0.04064992988121544, "store_true": 0.04064992988121544, "parse_args": 0.03998009617745864, "description": 0.03935350859359873, "output": 0.03820998397557558, "add_argument": 0.03718706634782969, "__name__": 0.0362617247963314, "__main__": 0.0362617247963314, "help": 0.035416954145946644, "action": 0.03463984047921328, "indent": 0.03357965317858229, "argparse": 0.033250511900177616, "environ": 0.03232517034867932, "ensure_ascii": 0.032035335754993094, "main": 0.03148039969829456, "dumps": 0.03148039969829456, "data": 0.029983791156282347, "os": 0.029983791156282347, "if": 0.02694991841664572, "false": 0.024616899672155912, "or": 0.02448480596287651, "append": 0.024225890942661345, "agent": 0.024225890942661345, "int": 0.023973701754280177, "get": 0.01850504059759539, "def": 0.01802123114373252, "str": 0.01788731539487489, "status": 0.016937822741708613}, "norm": 0.72037659737405, "snippet": "+-\".join(\"-\" * w for w in widths)) for row in data: lines.append(\" | \".join(str(cell).ljust(widths[i]) for i, cell in enumerate(row))) return \"\\n\".join(lines) def main() -> int: parser = argparse.ArgumentParser(description=\"Show agent status\") parser.add_argument(\"--json\", action=\"store_true\", help=\"output JSON\") args…", "text": "+-\".join(\"-\" * w for w in widths))\n    for row in data:\n        lines.append(\" | \".join(str(cell).ljust(widths[i]) for i, cell in enumerate(row)))\n    return \"\\n\".join(lines)\n\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"Show agent status\")\n    parser.add_argument(\"--json\", action=\"store_true\", help=\"output JSON\")\n    args = parser.parse_args()\n    rows = collect_status()\n    json_mode = args.json or os.environ.get(\"STATUS_JSON\") == \"1\"\n    if json_mode:\n        payload = [\n            {\n                \"name\": row.name,\n                \"cli\": row.cli,\n                \"cli_exists\": row.cli_exists,\n                \"auth_status\": row.auth_status,\n                \"auth_message\": row.auth_message,\n                \"credentials_ok\": row.credentials_ok,\n                \"credentials_paths\": row.credentials_paths,\n                \"last_log\": row.last_log,\n                \"last_command\": row.last_command,\n                \"last_timestamp\": row.last_timestamp,\n            }\n            for row in rows\n        ]\n        print(json.dumps(payload, ensure_ascii=False, indent=2))\n        return 0\n    print(render_table(rows))\n    return 0\n\n\nif __name__ == \"__main__\":\n    ra"}
{"id": "scripts/agents/status.py:215-226", "path": "scripts/agents/status.py", "start": 7000, "end": 7223, "start_line": 215, "end_line": 226, "weights": {"rows": 0.3696724884013342, "print": 0.24412573622277475, "render_table": 0.2260265983666959, "payload": 0.2204178823830586, "row": 0.2029071785675673, "__name__": 0.17785512638200637, "__main__": 0.17785512638200637, "indent": 0.16470020368542743, "return": 0.16041300484550386, "systemexit": 0.15854726409114142, "ensure_ascii": 0.15712569441734708, "dumps": 0.15440386518687332, "main": 0.15440386518687332, "raise": 0.14706335662367057, "false": 0.12074003172533614, "json": 0.09827743678965209, "in": 0.08076673297416079, "if": 0.0660914665932026}, "norm": 0.7794127968448583, "snippet": "} for row in rows ] print(json.dumps(payload, ensure_ascii=False, indent=2)) return 0 print(render_table(rows)) return 0 if __name__ == \"__main__\": raise SystemExit(main())", "text": "}\n            for row in rows\n        ]\n        print(json.dumps(payload, ensure_ascii=False, indent=2))\n        return 0\n    print(render_table(rows))\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/heart.sh:1-13", "path": "scripts/agents/heart.sh", "start": 0, "end": 287, "start_line": 1, "end_line": 13, "weights": {"python": 0.34598492732355945, "script_dir": 0.31800120964643475, "cd": 0.20622747392276805, "pwd": 0.20441575286818978, "command": 0.16572580234280082, "shift": 0.15732001994226236, "heart_engine": 0.15732001994226236, "exec": 0.128685934571195, "help": 0.11399832115726577, "lc_all": 0.10702508517869672, "eeuo": 0.10500825639314762, "pipefail": 0.10500825639314762, "dirname": 0.10404664205981157, "bash_source": 0.10404664205981157, "bash": 0.10220787643409489, "ifs": 0.10132753652888563, "set": 0.09577499974021525, "py": 0.09233747176476748, "usr": 0.0904429523330039, "env": 0.08536423578619842, "python3": 0.08536423578619842, "root": 0.0848476951002231, "bin": 0.08286290117140041, "true": 0.0730426168015097, "utf": 0.06971500803893313}, "norm": 0.7431370468120282, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\" PYTHON=${PYTHON:-python3} COMMAND=${1:-help} shift || true exec \"$PYTHON\" \"$SCRIPT_DIR/heart_engine.py\" \"$COMMAND\" \"$@\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nCOMMAND=${1:-help}\nshift || true\n\nexec \"$PYTHON\" \"$SCRIPT_DIR/heart_engine.py\" \"$COMMAND\" \"$@\"\n"}
{"id": "scripts/agents/workflow.sh:1-9", "path": "scripts/agents/workflow.sh", "start": 0, "end": 198, "start_line": 1, "end_line": 9, "weights": {"python": 0.48137033366756093, "script_dir": 0.2949576437300264, "workflow": 0.2063721115522006, "exec": 0.17904130027296697, "lc_all": 0.14890446633557802, "eeuo": 0.14609844367742278, "pipefail": 0.14609844367742278, "dirname": 0.14476054547452044, "bash_source": 0.14476054547452044, "cd": 0.14346259055496907, "bash": 0.14220226286482768, "pwd": 0.14220226286482768, "ifs": 0.14097744212714522, "set": 0.13325217355160382, "py": 0.12846952593358954, "usr": 0.12583367281113586, "env": 0.1187676323981891, "python3": 0.1187676323981891, "bin": 0.11528751467325274, "utf": 0.09699479379329827}, "norm": 0.825857387409214, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/workflow.py\" \"$@\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nexec \"$PYTHON\" \"$SCRIPT_DIR/workflow.py\" \"$@\"\n"}
{"id": "scripts/agents/auth.sh:1-9", "path": "scripts/agents/auth.sh", "start": 0, "end": 189, "start_line": 1, "end_line": 9, "weights": {"python": 0.48137033366756093, "script_dir": 0.2949576437300264, "exec": 0.17904130027296697, "auth": 0.17111427606453414, "lc_all": 0.14890446633557802, "eeuo": 0.14609844367742278, "pipefail": 0.14609844367742278, "dirname": 0.14476054547452044, "bash_source": 0.14476054547452044, "cd": 0.14346259055496907, "bash": 0.14220226286482768, "pwd": 0.14220226286482768, "ifs": 0.14097744212714522, "set": 0.13325217355160382, "py": 0.12846952593358954, "usr": 0.12583367281113586, "env": 0.1187676323981891, "python3": 0.1187676323981891, "bin": 0.11528751467325274, "utf": 0.09699479379329827}, "norm": 0.8177597883149723, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/auth.py\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nexec \"$PYTHON\" \"$SCRIPT_DIR/auth.py\"\n"}
{"id": "scripts/agents/logs.sh:1-9", "path": "scripts/agents/logs.sh", "start": 0, "end": 194, "start_line": 1, "end_line": 9, "weights": {"python": 0.48137033366756093, "script_dir": 0.2949576437300264, "logs": 0.21888002774575632, "exec": 0.17904130027296697, "lc_all": 0.14890446633557802, "eeuo": 0.14609844367742278, "pipefail": 0.14609844367742278, "dirname": 0.14476054547452044, "bash_source": 0.14476054547452044, "cd": 0.14346259055496907, "bash": 0.14220226286482768, "pwd": 0.14220226286482768, "ifs": 0.14097744212714522, "set": 0.13325217355160382, "py": 0.12846952593358954, "usr": 0.12583367281113586, "env": 0.1187676323981891, "python3": 0.1187676323981891, "bin": 0.11528751467325274, "utf": 0.09699479379329827}, "norm": 0.8290714338691461, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/logs.py\" \"$@\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nexec \"$PYTHON\" \"$SCRIPT_DIR/logs.py\" \"$@\"\n"}
{"id": "scripts/agents/context.py:1-44", "path": "scripts/agents/context.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 44, "weights": {"import": 0.24154700940881044, "str": 0.11054360914032683, "task_board": 0.1087941149252112, "task_id": 0.09727856738753346, "root": 0.09050420810690463, "none": 0.08883319685569437, "e402": 0.07636517091616454, "noqa": 0.06955416259928467, "data": 0.061766609781941643, "path": 0.05792106019261139, "return": 0.05614455169592635, "sys": 0.05463311090316699, "ignore": 0.054045485135208925, "cmd": 0.053237156844323126, "subprocess": 0.04809499043349666, "progress": 0.04522683870527072, "result": 0.04480352272774299, "datetime": 0.04216584615001072, "json": 0.04127652345165388, "progra": 0.040885686178803365, "not": 0.040439581252943876, "agents": 0.03885302802603073, "task": 0.038563206148590774, "rich": 0.03818258545808227, "prompts": 0.03818258545808227, "load_task": 0.03818258545808227, "scripts": 0.03782688081088235, "type": 0.03782688081088235, "def": 0.03712373615608899, "if": 0.03701122129219346, "tempfile": 0.0362647049750704, "git_capture": 0.0362647049750704, "tasks": 0.03598487629780479, "heart_engine": 0.03356160425434931, "textwrap": 0.03253393305550091, "generate_context": 0.03253393305550091, "list": 0.03177798467853512, "capture_output": 0.03164372377133743, "true": 0.031164849835310805, "cwd": 0.03015610009590937, "load_manifest": 0.03015610009590937, "role": 0.029520698897213864, "top_k": 0.028940623050616336, "generate": 0.028407004999459425, "context": 0.026618578422161563, "typing": 0.02623752232989524, "__file__": 0.02623752232989524, "loads": 0.02623752232989524, "__future__": 0.0258770741880934, "annotations": 0.0258770741880934, "get": 0.02541358908736434, "stdout": 0.024899717693480896, "resolve": 0.02460337260967534, "check": 0.023058028515959842, "argparse": 0.0228320181714553, "in": 0.022614685232765025, "pathlib": 0.021997597218428592, "parents": 0.021997597218428592, "board": 0.021997597218428592, "timezone": 0.02180434697260691, "read_text": 0.021616541126162268, "text": 0.021616541126162268, "ai": 0.021433881298241506, "strip": 0.02058886992731388}, "norm": 0.4354216136621547, "snippet": "#!/usr/bin/env python3 \"\"\"Generate rich context prompts for AI agents.\"\"\" from __future__ import annotations import argparse import json import subprocess import sys import tempfile import textwrap from datetime import datetime, timezone from pathlib import Path from typing import List ROOT =…", "text": "#!/usr/bin/env python3\n\"\"\"Generate rich context prompts for AI agents.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport subprocess\nimport sys\nimport tempfile\nimport textwrap\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import List\n\nROOT = Path(__file__).resolve().parents[2]\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))\n\nfrom scripts import progress  # type: ignore  # noqa: E402\nfrom scripts.agents import heart_engine  # type: ignore  # noqa: E402\n\nTASK_BOARD = ROOT / \"data\" / \"tasks.board.json\"\n\n\ndef load_task(task_id: str) -> dict | None:\n    if not task_id:\n        return None\n    if not TASK_BOARD.exists():\n        return None\n    data = json.loads(TASK_BOARD.read_text(encoding=\"utf-8\"))\n    for task in data.get(\"tasks\", []):\n        if task.get(\"id\") == task_id:\n            return task\n    return None\n\n\ndef git_capture(cmd: List[str]) -> str:\n    result = subprocess.run(cmd, cwd=ROOT, text=True, capture_output=True, check=False)\n    return result.stdout.strip()\n\n\ndef generate_context(task_id: str, role: str | None, agent: str | None, top_k: int = 6) -> str:\n    manifest = progress.load_manifest()\n    progra"}
{"id": "scripts/agents/context.py:38-69", "path": "scripts/agents/context.py", "start": 1000, "end": 2200, "start_line": 38, "end_line": 69, "weights": {"query_text": 0.2576828960848952, "lines": 0.1891224820433074, "task": 0.16203027793525537, "role": 0.14884385998595223, "append": 0.12581176976945138, "top_k": 0.10943933086367522, "agent": 0.10484314147454282, "progress": 0.0855129303250917, "heart_engine": 0.08460908635550245, "get": 0.08008483956102208, "manifest": 0.07247285013779049, "if": 0.06997919992221453, "program_progress": 0.06812456109480117, "big_progress": 0.06812456109480117, "epic_progress": 0.06710565988780225, "timestamp": 0.0652363214825884, "str": 0.06192919279570131, "task_id": 0.061310021462731165, "success_criteria": 0.058719253734541954, "cfg": 0.05595785791452051, "overall": 0.051536579216979024, "assigned": 0.051536579216979024, "load_task": 0.04812930940094404, "render_progress_tables": 0.04571181299378622, "calculate_progress": 0.04383665710038949, "tables": 0.04383665710038949, "project": 0.042304543177751223, "query_chunks": 0.042304543177751223, "overview": 0.042304543177751223, "generate_context": 0.041009159313656604, "load_manifest": 0.038011890877196676, "none": 0.03732487262844301, "chunks": 0.03721096499648806, "title": 0.036992055362961, "id": 0.03497593242045714, "microsecond": 0.034062280547400584, "context": 0.03355282994390112, "stdout": 0.031386198773295244, "load_config": 0.031386198773295244, "isoformat": 0.031386198773295244, "phase_progress": 0.03101265455001093, "utc": 0.02998238293578965, "check": 0.029064741826840136, "now": 0.029064741826840136, "replace": 0.028779854837968865, "result": 0.028237514324207763, "timezone": 0.027484470973874256, "ai": 0.027017497434758196, "datetime": 0.02657511311975465, "strip": 0.025952357051235983, "join": 0.02575462177888141, "false": 0.021307064422118143, "int": 0.020750346896561835, "else": 0.0204332012832606, "true": 0.019641712081078237, "not": 0.01699142069451423, "def": 0.015598208468944955, "status": 0.014660468423495691, "return": 0.014154088662838576}, "norm": 0.5446369756617836, "snippet": "True, check=False) return result.stdout.strip() def generate_context(task_id: str, role: str | None, agent: str | None, top_k: int = 6) -> str: manifest = progress.load_manifest() program_progress, epic_progress, big_progress, phase_progress = progress.calculate_progress(manifest) tables =…", "text": "True, check=False)\n    return result.stdout.strip()\n\n\ndef generate_context(task_id: str, role: str | None, agent: str | None, top_k: int = 6) -> str:\n    manifest = progress.load_manifest()\n    program_progress, epic_progress, big_progress, phase_progress = progress.calculate_progress(manifest)\n    tables = progress.render_progress_tables(program_progress, epic_progress, big_progress, manifest)\n\n    task = load_task(task_id)\n\n    query_text = task.get(\"title\") if task else \"\"\n    if task and task.get(\"success_criteria\"):\n        query_text += \"\\n\" + \"\\n\".join(task.get(\"success_criteria\", []))\n    if not query_text:\n        query_text = \"overall project status\"\n\n    cfg = heart_engine.load_config()\n    chunks = heart_engine.query_chunks(cfg, query_text, top_k=top_k)\n\n    timestamp = datetime.now(timezone.utc).replace(microsecond=0).isoformat()\n    lines = [f\"# AI Agent Context ({timestamp})\"]\n    if role:\n        lines.append(f\"**Assigned Role:** {role}\")\n    if agent:\n        lines.append(f\"**Agent:** {agent}\")\n    lines.append(\"\")\n\n    if task:\n        lines.append(\"## Task Overview\")\n        lines.append(f\"- **ID:** {task.get('id')}\")\n        lines.append(f\"- **Title:** {task.get"}
{"id": "scripts/agents/context.py:63-90", "path": "scripts/agents/context.py", "start": 2000, "end": 3200, "start_line": 63, "end_line": 90, "weights": {"lines": 0.521364680227496, "append": 0.40463785412337067, "task": 0.2779330172871407, "get": 0.2232274717133354, "item": 0.22259188682585085, "criteria": 0.11050185453730639, "blockers": 0.09167602440257579, "failure_criteria": 0.06360654488965985, "success_criteria": 0.06295127202171616, "system": 0.05945296545521241, "owner": 0.0540064632593037, "if": 0.05001516390836954, "tables": 0.046996055810327474, "in": 0.045840578174523694, "overview": 0.045353519262634194, "snapshot": 0.045353519262634194, "agent": 0.0449597615692634, "priority": 0.044491734787222674, "failure": 0.04276178888018571, "success": 0.0398928363475863, "title": 0.039658149443174404, "end": 0.03910895006840045, "id": 0.03749672034265226, "unassigned": 0.03364826715335256, "status": 0.03143415752064842, "progress": 0.030558674800858596, "big_task": 0.029726482727606206, "big": 0.02921154206238144}, "norm": 0.8215218778726369, "snippet": "end(f\"**Agent:** {agent}\") lines.append(\"\") if task: lines.append(\"## Task Overview\") lines.append(f\"- **ID:** {task.get('id')}\") lines.append(f\"- **Title:** {task.get('title')}\") lines.append(f\"- **Status:** {task.get('status')}\") lines.append(f\"- **Priority:** {task.get('priority')}\") lines.append(f\"- **Owner:**…", "text": "end(f\"**Agent:** {agent}\")\n    lines.append(\"\")\n\n    if task:\n        lines.append(\"## Task Overview\")\n        lines.append(f\"- **ID:** {task.get('id')}\")\n        lines.append(f\"- **Title:** {task.get('title')}\")\n        lines.append(f\"- **Status:** {task.get('status')}\")\n        lines.append(f\"- **Priority:** {task.get('priority')}\")\n        lines.append(f\"- **Owner:** {task.get('owner', 'unassigned')}\")\n        lines.append(f\"- **Big Task:** {task.get('big_task')}\")\n        lines.append(f\"- **System:** {task.get('system')}\")\n        if task.get(\"success_criteria\"):\n            lines.append(\"- **Success Criteria:**\")\n            for item in task.get(\"success_criteria\", []):\n                lines.append(f\"  - {item}\")\n        if task.get(\"failure_criteria\"):\n            lines.append(\"- **Failure Criteria:**\")\n            for item in task.get(\"failure_criteria\", []):\n                lines.append(f\"  - {item}\")\n        if task.get(\"blockers\"):\n            lines.append(\"- **Blockers:**\")\n            for item in task.get(\"blockers\", []):\n                lines.append(f\"  - {item}\")\n        lines.append(\"\")\n\n    lines.append(\"## Progress Snapshot\")\n    lines.append(\"```\\n\" + tables + \"\\n"}
{"id": "scripts/agents/context.py:85-120", "path": "scripts/agents/context.py", "start": 3000, "end": 4200, "start_line": 85, "end_line": 120, "weights": {"lines": 0.4549644615192772, "append": 0.3060232827568259, "chunk": 0.2762315070750077, "diffstat": 0.16209588166167002, "git": 0.14851427733902964, "chunks": 0.12532372173345507, "phase": 0.12286113559223916, "snippet": 0.11654575206447851, "phase_lines": 0.11571420616642461, "git_capture": 0.10263595747661433, "score": 0.09842570179144056, "textwrap": 0.09207716902500257, "stat": 0.09207716902500257, "status": 0.08229225199981073, "idx": 0.08190742372815943, "item": 0.07769716804298567, "diff": 0.07647946009699376, "value": 0.06525857127158445, "progress": 0.0640002434508548, "knowledge": 0.057857103083212305, "dedent": 0.057857103083212305, "mai": 0.057857103083212305, "relevant": 0.051317978738307166, "short": 0.051317978738307166, "tables": 0.04921285089572028, "in": 0.04800286959785029, "snapshot": 0.04749283620898486, "head": 0.04749283620898486, "extend": 0.04267372655081514, "end_line": 0.04267372655081514, "enumerate": 0.04177457391115169, "start_line": 0.040953711864079714, "if": 0.039280777314827965, "start": 0.03712856933475741, "get": 0.035962626067025, "phase_progress": 0.034816093315578306, "roadmap": 0.034029474363323105, "items": 0.032629285635792225, "indent": 0.032629285635792225, "blockers": 0.0320001217254274, "join": 0.028913207468744224, "path": 0.020490941105876667, "task": 0.01819019157952395, "def": 0.017511196300041977, "return": 0.01588996746111123}, "norm": 0.7729469097771197, "snippet": "for item in task.get(\"blockers\", []): lines.append(f\" - {item}\") lines.append(\"\") lines.append(\"## Progress Snapshot\") lines.append(\"```\\n\" + tables + \"\\n```\") lines.append(\"## Roadmap Phase Progress\") phase_lines = [f\"- {phase}: {value}%\" for phase, value in phase_progress.items()] lines.extend(phase_lines)…", "text": "            for item in task.get(\"blockers\", []):\n                lines.append(f\"  - {item}\")\n        lines.append(\"\")\n\n    lines.append(\"## Progress Snapshot\")\n    lines.append(\"```\\n\" + tables + \"\\n```\")\n\n    lines.append(\"## Roadmap Phase Progress\")\n    phase_lines = [f\"- {phase}: {value}%\" for phase, value in phase_progress.items()]\n    lines.extend(phase_lines)\n    lines.append(\"\")\n\n    if chunks:\n        lines.append(\"## Relevant Knowledge Chunks\")\n        for idx, chunk in enumerate(chunks, start=1):\n            snippet = textwrap.indent(chunk.get(\"snippet\", \"\"), \"> \")\n            lines.append(\n                textwrap.dedent(\n                    f\"\"\"{idx}. **{chunk['path']}:{chunk['start_line']}-{chunk['end_line']}** (score {chunk['score']})\\n{snippet}\"\"\"\n                )\n            )\n        lines.append(\"\")\n\n    status = git_capture([\"git\", \"status\", \"--short\"])\n    if status:\n        lines.append(\"## Git Status\")\n        lines.append(\"```\\n\" + status + \"\\n```\")\n    diffstat = git_capture([\"git\", \"diff\", \"--stat\", \"HEAD\"])\n    if diffstat:\n        lines.append(\"## Git Diff (stat)\")\n        lines.append(\"```\\n\" + diffstat + \"\\n```\")\n\n    return \"\\n\".join(lines)\n\n\ndef mai"}
{"id": "scripts/agents/context.py:112-143", "path": "scripts/agents/context.py", "start": 4000, "end": 5200, "start_line": 112, "end_line": 143, "weights": {"temp": 0.19998918184781472, "parser": 0.19224046748643336, "args": 0.19073418640731413, "context": 0.14679363100456744, "output": 0.1446922187310399, "add_argument": 0.14081867036126688, "help": 0.13411567194972443, "default": 0.12591186491611378, "role": 0.09767878311578117, "agent": 0.09173774879022496, "diffstat": 0.08422629145165207, "stat": 0.07176602879889907, "lines": 0.07092093076624027, "none": 0.06531852709977526, "top_k": 0.06383960967047721, "diff": 0.05960899095795102, "to": 0.05871745240182697, "git": 0.057876887492415964, "argv": 0.049415650067363585, "instructions": 0.04509450681485665, "namedtemporaryfile": 0.04509450681485665, "task": 0.04253294795800454, "top": 0.042113145725826036, "delete": 0.042113145725826036, "flush": 0.042113145725826036, "name": 0.04172082442376729, "git_capture": 0.03999783636956294, "tempfile": 0.03999783636956294, "close": 0.03999783636956294, "focus": 0.038357074962840805, "encode": 0.038357074962840805, "print": 0.0376958857402814, "or": 0.03708727962023942, "head": 0.03701647528053232, "append": 0.036695099516089985, "int": 0.03631310706898321, "include": 0.035883014399449534, "generate_context": 0.035883014399449534, "suffix": 0.035883014399449534, "utf": 0.03280706260655677, "chunks": 0.032559594371927056, "path": 0.031941761135631276, "prefix": 0.031919804835238604, "generate": 0.03133125551410966, "argumentparser": 0.030786343954155818, "on": 0.030786343954155818, "if": 0.03061589996596886, "heart": 0.03027904342851647, "parse_args": 0.03027904342851647, "description": 0.02980449547897551, "write": 0.02980449547897551, "__name__": 0.02746292392663334, "__main__": 0.02746292392663334, "write_text": 0.02595708265717736, "file": 0.02543164909848512, "argparse": 0.025182372983222755, "return": 0.024769655159967506, "main": 0.023841773300914266, "ai": 0.023640310255413424, "join": 0.022535294056521236, "type": 0.020860412211883644, "md": 0.019497153216800095, "false": 0.018643681369353373, "encoding": 0.01854363981011971}, "norm": 0.5621789162821821, "snippet": "t = git_capture([\"git\", \"diff\", \"--stat\", \"HEAD\"]) if diffstat: lines.append(\"## Git Diff (stat)\") lines.append(\"```\\n\" + diffstat + \"\\n```\") return \"\\n\".join(lines) def main(argv: list[str] | None = None) -> int: parser = argparse.ArgumentParser(description=\"Generate context for AI agent\") parser.add_argument(\"--…", "text": "t = git_capture([\"git\", \"diff\", \"--stat\", \"HEAD\"])\n    if diffstat:\n        lines.append(\"## Git Diff (stat)\")\n        lines.append(\"```\\n\" + diffstat + \"\\n```\")\n\n    return \"\\n\".join(lines)\n\n\ndef main(argv: list[str] | None = None) -> int:\n    parser = argparse.ArgumentParser(description=\"Generate context for AI agent\")\n    parser.add_argument(\"--task\", default=\"\", help=\"Task ID to focus on\")\n    parser.add_argument(\"--role\", default=\"\", help=\"Role instructions\")\n    parser.add_argument(\"--agent\", default=\"\", help=\"Agent name\")\n    parser.add_argument(\"--top-k\", type=int, default=6, help=\"Heart chunks to include\")\n    parser.add_argument(\"--output\", default=\"\", help=\"Output file path\")\n    args = parser.parse_args(argv)\n\n    context = generate_context(args.task, args.role or None, args.agent or None, top_k=args.top_k)\n\n    if args.output:\n        Path(args.output).write_text(context, encoding=\"utf-8\")\n        print(args.output)\n    else:\n        temp = tempfile.NamedTemporaryFile(delete=False, suffix=\".md\", prefix=\"agent-context-\")\n        temp.write(context.encode(\"utf-8\"))\n        temp.flush()\n        temp.close()\n        print(temp.name)\n    return 0\n\n\nif __name__ == \"__main__\""}
{"id": "scripts/agents/context.py:135-145", "path": "scripts/agents/context.py", "start": 5000, "end": 5231, "start_line": 135, "end_line": 145, "weights": {"temp": 0.8368778071170093, "context": 0.30713744333263343, "te": 0.23587895872386558, "flush": 0.22028414687355158, "close": 0.20921945177925233, "encode": 0.20063700749793653, "suffix": 0.18769576762788986, "prefix": 0.166965132984325, "write": 0.15590043789002575, "__name__": 0.1436522174623898, "__main__": 0.1436522174623898, "systemexit": 0.1280574056120758, "main": 0.1247108141893977, "raise": 0.11878194188834931, "name": 0.1091160023390837, "md": 0.10198510913403128, "print": 0.09858923962842828, "false": 0.0975207948550792, "agent": 0.0959717987343892, "utf": 0.08580308681714847, "return": 0.06478217503376117, "if": 0.05338156917143288}, "norm": 1.1057987583813091, "snippet": "te=False, suffix=\".md\", prefix=\"agent-context-\") temp.write(context.encode(\"utf-8\")) temp.flush() temp.close() print(temp.name) return 0 if __name__ == \"__main__\": raise SystemExit(main())", "text": "te=False, suffix=\".md\", prefix=\"agent-context-\")\n        temp.write(context.encode(\"utf-8\"))\n        temp.flush()\n        temp.close()\n        print(temp.name)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/run.py:1-43", "path": "scripts/agents/run.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 43, "weights": {"import": 0.26838556600978936, "e402": 0.12727528486027426, "default_role": 0.12088234991690133, "noqa": 0.1159236043321411, "path": 0.11262428370785546, "config_path": 0.11187201418116435, "agents": 0.10792507785008534, "root": 0.10056023122989403, "ignore": 0.09007580855868154, "str": 0.06823679576563385, "scripts": 0.06304480135147057, "type": 0.06304480135147057, "json": 0.06115040511356131, "sys": 0.060703456559074435, "context": 0.05915239649369236, "fh": 0.056021891402326336, "parents": 0.04888354937428576, "datetime": 0.046850940166678574, "principal": 0.042425094953424745, "engineer": 0.042425094953424745, "build_prompt_file": 0.042425094953424745, "def": 0.04124859572898777, "level": 0.04029411663896711, "task_board": 0.04029411663896711, "high": 0.038641201444047035, "top_k_chunks": 0.038641201444047035, "ensure_log_dir": 0.038641201444047035, "heart_engine": 0.03729067139372145, "delivery": 0.03729067139372145, "max_snippet_chars": 0.03729067139372145, "320": 0.03729067139372145, "generate_context": 0.036148814506112126, "true": 0.034627610928123116, "dict": 0.03290118402062754, "role": 0.032800776552459845, "log_dir": 0.030503332639098078, "load": 0.02957619824684618, "typing": 0.029152802588772484, "__file__": 0.029152802588772484, "__future__": 0.02875230465343711, "annotations": 0.02875230465343711, "exist_ok": 0.02837235432464044, "orchestrator": 0.028010945701163168, "load_config": 0.027666352992756552, "resolve": 0.027337080677417042, "task_id": 0.02702182427431485, "subprocess": 0.026719439129720367, "object": 0.026719439129720367, "open": 0.02642891532858495, "argparse": 0.025368909079394777, "config": 0.025368909079394777, "progress": 0.02512602150292818, "return": 0.02495313408707838, "reports": 0.02466290774751089, "mkdir": 0.02466290774751089, "pathlib": 0.02444177468714288, "board": 0.02444177468714288, "timezone": 0.024227052191785454, "ai": 0.023815423664712784, "os": 0.022876522141459868, "data": 0.022876522141459868, "as": 0.022202657117713742, "usr": 0.02143832944189722, "exists": 0.02129449176888165}, "norm": 0.49732966114107513, "snippet": "#!/usr/bin/env python3 \"\"\"High-level AI agent orchestrator.\"\"\" from __future__ import annotations import argparse import json import os import subprocess import sys from datetime import datetime, timezone from pathlib import Path from typing import Dict, List ROOT = Path(__file__).resolve().parents[2] if str(ROOT) not…", "text": "#!/usr/bin/env python3\n\"\"\"High-level AI agent orchestrator.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import Dict, List\n\nROOT = Path(__file__).resolve().parents[2]\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))\n\nfrom scripts.agents.context import generate_context  # type: ignore  # noqa: E402\nfrom scripts import progress  # type: ignore  # noqa: E402\nfrom scripts.agents import heart_engine  # type: ignore  # noqa: E402\n\nTASK_BOARD = ROOT / \"data\" / \"tasks.board.json\"\nCONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nDEFAULT_ROLE = \"Principal Delivery Engineer\"\n\n\ndef load_config() -> Dict[str, object]:\n    if CONFIG_PATH.exists():\n        with CONFIG_PATH.open(\"r\", encoding=\"utf-8\") as fh:\n            return json.load(fh)\n    return {\n        \"default_role\": DEFAULT_ROLE,\n        \"log_dir\": \"reports/agents\",\n        \"context\": {\"top_k_chunks\": 6, \"max_snippet_chars\": 320},\n        \"agents\": {},\n    }\n\n\ndef ensure_log_dir(path: Path) -> None:\n    path.mkdir(parents=True, exist_ok=True)\n\n\ndef build_prompt_file(task_id: str, role: str, a"}
{"id": "scripts/agents/run.py:34-71", "path": "scripts/agents/run.py", "start": 1000, "end": 2200, "start_line": 34, "end_line": 71, "weights": {"prompt_text": 0.17898086933476065, "str": 0.1583306901749473, "part": 0.15732001994226236, "suffix": 0.15250281119766051, "path": 0.13575248482643293, "prefix": 0.13565917054976406, "temp": 0.12749310342798187, "top_k": 0.10174437791232305, "fd": 0.09582582698157038, "true": 0.09130327100188712, "context_cfg": 0.08949043466738033, "tempfile_name": 0.08949043466738033, "tempfile": 0.08499540228532125, "subprocess": 0.08454197537138085, "stdin_mode": 0.08150878429603671, "prompt_path": 0.07625140559883026, "role": 0.06918913804034499, "command": 0.06214717587855031, "def": 0.05800583774388905, "task_id": 0.056999160578632885, "return": 0.052635517214930955, "text": 0.05066376826444281, "os": 0.048255163892141906, "nks": 0.04791291349078519, "mkstemp": 0.04791291349078519, "run": 0.045846559519841, "build_prompt_file": 0.04474521733369016, "input": 0.04474521733369016, "prompt": 0.042497701142660625, "close": 0.042497701142660625, "run_subprocess": 0.042497701142660625, "ensure_log_dir": 0.040754392148018355, "top_k_chunks": 0.040754392148018355, "completedprocess": 0.040754392148018355, "encoding": 0.039405234596504385, "max_snippet_chars": 0.03933000498556559, "320": 0.03933000498556559, "tmp": 0.03933000498556559, "agent": 0.03898854323584561, "generate_context": 0.03812570279941513, "capture_output": 0.037082488794536045, "copy": 0.03533917979989379, "cwd": 0.03533917979989379, "utf": 0.034857504019466565, "exist_ok": 0.02992396745176921, "object": 0.028180658457126948, "write_text": 0.027579400323250947, "check": 0.02702112716714044, "in": 0.02650158425714651, "mkdir": 0.026011660514952892, "environ": 0.026011660514952892, "parents": 0.025778434240346006, "read_text": 0.025331884132221406, "bool": 0.024909483966047377, "import": 0.023588575137579143, "agents": 0.022765446109002378, "env": 0.021341058946549606, "root": 0.021211923775055774, "md": 0.020715725292850103, "false": 0.01980891145493796, "int": 0.01929133813039733, "list": 0.01861991289757917, "none": 0.017350233760877805, "dict": 0.017350233760877805}, "norm": 0.5463339287605954, "snippet": "nks\": 6, \"max_snippet_chars\": 320}, \"agents\": {}, } def ensure_log_dir(path: Path) -> None: path.mkdir(parents=True, exist_ok=True) def build_prompt_file(task_id: str, role: str, agent: str, context_cfg: Dict[str, object]) -> Path: top_k = int(context_cfg.get(\"top_k_chunks\", 6)) prompt_text = generate_context(task_id,…", "text": "nks\": 6, \"max_snippet_chars\": 320},\n        \"agents\": {},\n    }\n\n\ndef ensure_log_dir(path: Path) -> None:\n    path.mkdir(parents=True, exist_ok=True)\n\n\ndef build_prompt_file(task_id: str, role: str, agent: str, context_cfg: Dict[str, object]) -> Path:\n    top_k = int(context_cfg.get(\"top_k_chunks\", 6))\n    prompt_text = generate_context(task_id, role, agent, top_k=top_k)\n    temp = Path(tempfile_name(prefix=\"prompt-\", suffix=\".md\"))\n    temp.write_text(prompt_text, encoding=\"utf-8\")\n    return temp\n\n\ndef tempfile_name(prefix: str = \"tmp-\", suffix: str = \"\") -> str:\n    import tempfile\n\n    fd, path = tempfile.mkstemp(prefix=prefix, suffix=suffix)\n    os.close(fd)\n    return path\n\n\ndef run_subprocess(command: List[str], prompt_path: Path, stdin_mode: bool) -> subprocess.CompletedProcess[str]:\n    env = os.environ.copy()\n    if stdin_mode:\n        prompt_text = prompt_path.read_text(encoding=\"utf-8\")\n        return subprocess.run(\n            [str(part) for part in command],\n            input=prompt_text,\n            text=True,\n            capture_output=True,\n            cwd=ROOT,\n            check=False,\n        )\n    return subprocess.run([str(part) for part in command], text=True"}
{"id": "scripts/agents/run.py:65-95", "path": "scripts/agents/run.py", "start": 2000, "end": 3200, "start_line": 65, "end_line": 95, "weights": {"chunk": 0.23238523611072076, "lines": 0.21433881298241503, "task_id": 0.13896938198219067, "chunks": 0.1265172809880594, "snippet": 0.11765571160794971, "command": 0.10101382238037385, "part": 0.09589029786956944, "heart_engine": 0.09589029786956944, "append": 0.0950577816035855, "prompt_path": 0.09295409444428832, "capture_output": 0.09041063934667837, "true": 0.08904242810088801, "str": 0.08773302312724351, "cwd": 0.08616028598831248, "idx": 0.0826874944303324, "review": 0.06870712919070952, "check": 0.06588008147417099, "text": 0.06176154607474934, "state": 0.05975467910983837, "next_steps": 0.05840812311257624, "aut": 0.05840812311257624, "input": 0.05454655065440325, "prompt_text": 0.05454655065440325, "collect_progress_state": 0.05454655065440325, "deliverables": 0.05454655065440325, "loopback": 0.05180672139295772, "align": 0.05180672139295772, "root": 0.05171669034680265, "false": 0.04829601269013446, "generate_loopback_response": 0.04794514893478472, "query_chunks": 0.04794514893478472, "append_comment": 0.04794514893478472, "current": 0.04647704722214416, "200": 0.045205319673339184, "end_line": 0.04308014299415624, "enumerate": 0.04217242699601981, "path": 0.04137218585186528, "top_k": 0.0413437472151662, "start_line": 0.0413437472151662, "mode": 0.03987564550252563, "program_progress": 0.03860391795372066, "load_config": 0.03557102527640128, "def": 0.035355939196275235, "subprocess": 0.03435356459535476, "roadmap": 0.03435356459535476, "replace": 0.032617168816364714, "in": 0.03230669318966432, "progress": 0.03230488478947909, "return": 0.032082600969100775, "read_text": 0.03088077303737467, "program": 0.029877339554919186, "join": 0.029188571349398937, "run": 0.027944569612093562, "or": 0.02401842870644077, "progress_pct": 0.022260607025222003, "not": 0.019256943453782798, "task": 0.018363431499328942, "get": 0.01815256363383167, "if": 0.013218293318640523}, "norm": 0.5628026707701009, "snippet": "input=prompt_text, text=True, capture_output=True, cwd=ROOT, check=False, ) return subprocess.run([str(part) for part in command], text=True, capture_output=True, cwd=ROOT, check=False) def generate_loopback_response(task_id: str, prompt_path: Path, command: str) -> str: state = progress.collect_progress_state()…", "text": "input=prompt_text,\n            text=True,\n            capture_output=True,\n            cwd=ROOT,\n            check=False,\n        )\n    return subprocess.run([str(part) for part in command], text=True, capture_output=True, cwd=ROOT, check=False)\n\n\ndef generate_loopback_response(task_id: str, prompt_path: Path, command: str) -> str:\n    state = progress.collect_progress_state()\n    chunks = heart_engine.query_chunks(heart_engine.load_config(), task_id or prompt_path.read_text()[:200], top_k=3)\n    lines = [\n        \"{\",\n        f\"  \\\"mode\\\": \\\"loopback\\\",\",\n        f\"  \\\"command\\\": \\\"{command}\\\",\",\n        f\"  \\\"task\\\": \\\"{task_id}\\\",\",\n        f\"  \\\"program_progress\\\": {state['program']['progress_pct']},\",\n        \"  \\\"next_steps\\\": [\",\n    ]\n    for idx, chunk in enumerate(chunks[:3]):\n        snippet = chunk.get(\"snippet\", \"\").replace(\"\\\"\", \"'\")\n        lines.append(f\"    \\\"{idx + 1}. Review {chunk['path']} lines {chunk['start_line']}-{chunk['end_line']}: {snippet}\\\",\")\n    if not chunks:\n        lines.append(\"    \\\"1. Review current roadmap and align deliverables\\\",\")\n    lines.append(\"  ]\")\n    lines.append(\"}\")\n    return \"\\n\".join(lines)\n\n\ndef append_comment(task_id: str, aut"}
{"id": "scripts/agents/run.py:88-122", "path": "scripts/agents/run.py", "start": 3000, "end": 4200, "start_line": 88, "end_line": 122, "weights": {"lines": 0.156833277792011, "author": 0.1543596281528655, "task_board": 0.13267574990879416, "timestamp": 0.12622963018582148, "updated": 0.11289696414742027, "str": 0.10485166178621787, "data": 0.10043351184055552, "max_lines": 0.09312825721483482, "task_id": 0.08897429943981719, "comments": 0.08353177379800719, "append": 0.08114688673476811, "comment": 0.07526464276494685, "agent_cfg": 0.07526464276494685, "setdefault": 0.06492336200527211, "task": 0.06270440024161103, "stdout": 0.06073101876458756, "return": 0.05477517238626962, "unks": 0.04986059290097972, "join": 0.04983414620629087, "deliverables": 0.04656412860741741, "get": 0.046488272720788426, "def": 0.04527284897084024, "if": 0.04513563572218715, "align": 0.044225249969598056, "command_for_agent": 0.044225249969598056, "command": 0.04311565589406201, "summarize_output": 0.04241107475566138, "false": 0.04122830351596844, "encoding": 0.04100707340124034, "append_comment": 0.04092878567603574, "break": 0.04092878567603574, "current": 0.03967552811646453, "utf": 0.036274475727574966, "json": 0.03355814914768609, "microsecond": 0.03295456410683471, "message": 0.03295456410683471, "splitlines": 0.03295456410683471, "not": 0.03287770833572673, "loads": 0.03199697845109176, "isoformat": 0.03036550938229378, "review": 0.02932621367896138, "roadmap": 0.02932621367896138, "object": 0.02932621367896138, "utc": 0.02900734609234934, "write_text": 0.028700514157529444, "now": 0.028119546970682738, "indent": 0.028119546970682738, "replace": 0.027843924599335733, "10": 0.027319221175453042, "ensure_ascii": 0.026826338071254383, "timezone": 0.026590667039764527, "read_text": 0.026361635519710085, "dumps": 0.026361635519710085, "datetime": 0.025710881798787024, "strip": 0.02510837796013888, "continue": 0.02454746030577342, "owner": 0.024368770007246795, "exists": 0.02337200316096767, "updated_at": 0.022345224906298627, "tasks": 0.021941997742563894, "int": 0.020075538867405353, "list": 0.01937681992593605, "true": 0.019002957216652933, "none": 0.01805552781619804}, "norm": 0.4751175273225946, "snippet": "unks: lines.append(\" \\\"1. Review current roadmap and align deliverables\\\",\") lines.append(\" ]\") lines.append(\"}\") return \"\\n\".join(lines) def append_comment(task_id: str, author: str, comment: str) -> None: if not task_id: return if not TASK_BOARD.exists(): return data =…", "text": "unks:\n        lines.append(\"    \\\"1. Review current roadmap and align deliverables\\\",\")\n    lines.append(\"  ]\")\n    lines.append(\"}\")\n    return \"\\n\".join(lines)\n\n\ndef append_comment(task_id: str, author: str, comment: str) -> None:\n    if not task_id:\n        return\n    if not TASK_BOARD.exists():\n        return\n    data = json.loads(TASK_BOARD.read_text(encoding=\"utf-8\"))\n    updated = False\n    timestamp = datetime.now(timezone.utc).replace(microsecond=0).isoformat()\n    for task in data.get(\"tasks\", []):\n        if task.get(\"id\") != task_id:\n            continue\n        comments = task.setdefault(\"comments\", [])\n        comments.append({\"author\": author, \"timestamp\": timestamp, \"message\": comment})\n        task.setdefault(\"owner\", author)\n        updated = True\n        break\n    if updated:\n        data[\"updated_at\"] = timestamp\n        TASK_BOARD.write_text(json.dumps(data, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n\n\ndef summarize_output(stdout: str, max_lines: int = 10) -> str:\n    lines = stdout.strip().splitlines()\n    return \"\\n\".join(lines[:max_lines])\n\n\ndef command_for_agent(agent_cfg: Dict[str, object]) -> List[str]:\n    command = agent_cfg.get(\"command\") "}
{"id": "scripts/agents/run.py:116-146", "path": "scripts/agents/run.py", "start": 4000, "end": 5200, "start_line": 116, "end_line": 146, "weights": {"command": 0.21930632490475896, "parser": 0.16849433025663763, "sandbox_exec": 0.16360017281986647, "add_argument": 0.14399503134685934, "str": 0.13852582599038452, "help": 0.10971266998593998, "mode": 0.09444231829545544, "sandbox_mode": 0.0922233522830151, "list": 0.08959958086053134, "return": 0.08864929215146265, "analysis": 0.08180008640993323, "default": 0.07725118930191642, "agent_cfg": 0.06960564706833429, "none": 0.06679187733510854, "role": 0.06658804262529443, "item": 0.06192405874102617, "agent": 0.05628421279159666, "isinstance": 0.05485633499296999, "lines": 0.04834710067272519, "over": 0.04611167614150755, "plan": 0.04611167614150755, "run": 0.04412300465067404, "max_lines": 0.043063066306107824, "choices": 0.043063066306107824, "def": 0.04186887536401014, "if": 0.04174197890097007, "command_for_agent": 0.04090004320496662, "add_sandbox": 0.04090004320496662, "auto": 0.04090004320496662, "of": 0.04090004320496662, "execution": 0.04090004320496662, "prompt": 0.04090004320496662, "or": 0.03792383479964331, "project": 0.03785143336956688, "dry": 0.03669240570169276, "lower": 0.03401063920591282, "override": 0.03401063920591282, "optional": 0.033294021312647214, "argumentparser": 0.031480772765151814, "splitlines": 0.030476777331884728, "description": 0.030476777331884728, "assign": 0.030476777331884728, "context": 0.030020953107701007, "task": 0.028994891841045693, "stdout": 0.02808238837610627, "object": 0.027121235206859017, "key": 0.0260052953187517, "argparse": 0.02575039643397214, "config": 0.02575039643397214, "10": 0.025265144395343785, "argv": 0.025265144395343785, "main": 0.024379557661085263, "ai": 0.024173550336362596, "strip": 0.023220529993211142, "join": 0.023043608960051788, "exists": 0.021614709690218215, "scripts": 0.021330947825685533, "root": 0.020414483031632624, "codex": 0.020414483031632624, "bin": 0.01993693862770536, "int": 0.018566099854818482, "dict": 0.016697969333777134, "id": 0.015647127661783458, "get": 0.014330971289867107}, "norm": 0.5235927460223486, "snippet": "10) -> str: lines = stdout.strip().splitlines() return \"\\n\".join(lines[:max_lines]) def command_for_agent(agent_cfg: Dict[str, object]) -> List[str]: command = agent_cfg.get(\"command\") or [] if isinstance(command, list): return [str(item) for item in command] if isinstance(command, str): return [command] return [] def…", "text": " 10) -> str:\n    lines = stdout.strip().splitlines()\n    return \"\\n\".join(lines[:max_lines])\n\n\ndef command_for_agent(agent_cfg: Dict[str, object]) -> List[str]:\n    command = agent_cfg.get(\"command\") or []\n    if isinstance(command, list):\n        return [str(item) for item in command]\n    if isinstance(command, str):\n        return [command]\n    return []\n\n\ndef add_sandbox(command: List[str], sandbox_mode: str | None) -> List[str]:\n    mode = (sandbox_mode or \"auto\").lower()\n    sandbox_exec = ROOT / \"scripts\" / \"bin\" / \"sandbox_exec\"\n    if mode == \"none\":\n        return command\n    if sandbox_exec.exists():\n        return [str(sandbox_exec)] + command\n    return command\n\n\ndef main(argv: List[str] | None = None) -> int:\n    parser = argparse.ArgumentParser(description=\"Run AI agent over project context\")\n    parser.add_argument(\"command\", choices=[\"assign\", \"plan\", \"analysis\"], help=\"Mode of execution\")\n    parser.add_argument(\"--task\", default=\"\", help=\"Task ID (optional for analysis)\")\n    parser.add_argument(\"--agent\", default=\"codex\", help=\"Agent key from config\")\n    parser.add_argument(\"--role\", default=\"\", help=\"Role prompt override\")\n    parser.add_argument(\"--dry-run\", a"}
{"id": "scripts/agents/run.py:143-169", "path": "scripts/agents/run.py", "start": 5000, "end": 6200, "start_line": 143, "end_line": 169, "weights": {"args": 0.20587182024916442, "role": 0.17571844581674917, "prompt_path": 0.1549234907404805, "agent_cfg": 0.14694525492203905, "cfg": 0.1321227200759512, "agents_cfg": 0.12420386178443689, "get": 0.12101709089221112, "parser": 0.11857008425467093, "agent": 0.09901852250373487, "context": 0.09506635150771986, "add_argument": 0.09119685318634425, "context_cfg": 0.09091091775733874, "command_template": 0.09091091775733874, "prompt_arg": 0.09091091775733874, "help": 0.08685586373886915, "prompt": 0.08634453565492951, "default_role": 0.08634453565492951, "isinstance": 0.0579039091592461, "default": 0.054361948027274516, "tempfile_name": 0.04545545887866937, "if": 0.044060977728801735, "command_for_agent": 0.04317226782746476, "loopback": 0.04317226782746476, "command": 0.0420890926584891, "top_k_chunks": 0.04140128726147896, "stdin_mode": 0.04140128726147896, "only": 0.03995429077898726, "stdin": 0.03995429077898726, "generate_loopback_response": 0.03995429077898726, "dry": 0.03873087268512013, "suffix": 0.03873087268512013, "generate_context": 0.03873087268512013, "else": 0.03859604686838113, "dry_run": 0.03673631373050976, "override": 0.03590011916179686, "dict": 0.035251268593529506, "fallback": 0.03514368916334983, "prefix": 0.034453122679305156, "top_k": 0.034453122679305156, "generate": 0.03381786309459455, "store_true": 0.03322970458543802, "mode": 0.03322970458543802, "parse_args": 0.032682142113319365, "to": 0.03168878383590662, "task": 0.030605719165548235, "load_config": 0.029642521063667732, "stdout": 0.029642521063667732, "action": 0.028316694994912444, "write_text": 0.028017168582350167, "key": 0.02745003394757124, "config": 0.027180974013637258, "exit": 0.026668763528418443, "argv": 0.026668763528418443, "bool": 0.02530487260042908, "run": 0.0232871413434113, "agents": 0.02312680239644686, "codex": 0.021548620977834436, "md": 0.02104454632924455, "print": 0.020343811351897896, "false": 0.020123338620889355, "or": 0.020015357255367305, "encoding": 0.020015357255367305, "int": 0.019597549846752844, "list": 0.018915467070556614}, "norm": 0.5567479267134464, "snippet": "s)\") parser.add_argument(\"--agent\", default=\"codex\", help=\"Agent key from config\") parser.add_argument(\"--role\", default=\"\", help=\"Role prompt override\") parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Only generate context and exit\") args = parser.parse_args(argv) cfg = load_config() role = args.role or…", "text": "s)\")\n    parser.add_argument(\"--agent\", default=\"codex\", help=\"Agent key from config\")\n    parser.add_argument(\"--role\", default=\"\", help=\"Role prompt override\")\n    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Only generate context and exit\")\n    args = parser.parse_args(argv)\n\n    cfg = load_config()\n    role = args.role or cfg.get(\"default_role\", DEFAULT_ROLE)\n    context_cfg = cfg.get(\"context\", {}) if isinstance(cfg.get(\"context\"), dict) else {}\n    prompt_path = Path(tempfile_name(prefix=\"agent-prompt-\", suffix=\".md\"))\n    prompt_path.write_text(generate_context(args.task, role, args.agent, top_k=int(context_cfg.get(\"top_k_chunks\", 6))), encoding=\"utf-8\")\n\n    if args.dry_run:\n        print(prompt_path)\n        return 0\n\n    agents_cfg = cfg.get(\"agents\", {})\n    agent_cfg = agents_cfg.get(args.agent, {}) if isinstance(agents_cfg, dict) else {}\n    command_template = command_for_agent(agent_cfg)\n    stdin_mode = bool(agent_cfg.get(\"stdin\", False))\n    prompt_arg = agent_cfg.get(\"prompt_arg\")\n\n    command: List[str]\n    if not command_template:\n        # fallback to loopback mode\n        stdout = generate_loopback_response(args.task, prompt_path, args.command)\n "}
{"id": "scripts/agents/run.py:163-194", "path": "scripts/agents/run.py", "start": 6000, "end": 7200, "start_line": 163, "end_line": 194, "weights": {"command": 0.3200222390067878, "prompt_arg": 0.1974961316797359, "args": 0.1956669670902619, "command_template": 0.14812209875980192, "log_dir": 0.14199827263028414, "stdout": 0.12879164324214257, "prompt_path": 0.12620922306013282, "agent_cfg": 0.11970971198390253, "log_path": 0.1082830028732377, "ensure_log_dir": 0.08994072749907499, "get": 0.08215599920484161, "log_file": 0.08183721665001058, "append": 0.06453276121795135, "if": 0.05982417234729547, "cfg": 0.05740504389506845, "reports": 0.05740504389506845, "final": 0.05286942178293538, "promp": 0.05286942178293538, "agents": 0.05024098451641904, "strftime": 0.049374032919933974, "str": 0.04764810738807192, "loopback": 0.046894015053970346, "add_sandbox": 0.046894015053970346, "run_subprocess": 0.046894015053970346, "summarize_output": 0.044970363749537494, "stdin_mode": 0.044970363749537494, "generate_loopback_response": 0.043398626190968924, "append_comment": 0.043398626190968924, "agent": 0.04302184081196757, "else": 0.04192329228806917, "list": 0.04109222156707127, "sz": 0.03899495702057246, "copy": 0.03899495702057246, "fallback": 0.038173317539500685, "sandbox": 0.038173317539500685, "path": 0.037448961331429775, "mode": 0.036094334291079236, "assign": 0.03494320159604025, "not": 0.03486170797667575, "to": 0.03442057554589857, "dt": 0.03442057554589857, "build": 0.03392783059900246, "task": 0.033244143231543774, "utc": 0.030757789391025588, "write_text": 0.030432441736001046, "now": 0.02981641618443083, "result": 0.028967794867075205, "timezone": 0.028195276257681347, "datetime": 0.02726240052802417, "try": 0.026028772565604572, "owner": 0.025839299231822026, "log": 0.02478238266206054, "print": 0.02209758819257875, "encoding": 0.021740819087726557, "utf": 0.01923172635556776, "in": 0.014621563728080834, "return": 0.014520142679980953}, "norm": 0.6110277641130937, "snippet": "agent_cfg.get(\"prompt_arg\") command: List[str] if not command_template: # fallback to loopback mode stdout = generate_loopback_response(args.task, prompt_path, args.command) log_path = Path(cfg.get(\"log_dir\", \"reports/agents\")) ensure_log_dir(log_path) log_file = log_path /…", "text": "agent_cfg.get(\"prompt_arg\")\n\n    command: List[str]\n    if not command_template:\n        # fallback to loopback mode\n        stdout = generate_loopback_response(args.task, prompt_path, args.command)\n        log_path = Path(cfg.get(\"log_dir\", \"reports/agents\"))\n        ensure_log_dir(log_path)\n        log_file = log_path / f\"{datetime.now(timezone.utc).strftime('%Y%m%dT%H%M%SZ')}-{args.agent}-{args.command}.log\"\n        log_file.write_text(stdout, encoding=\"utf-8\")\n        print(stdout)\n        if args.command == \"assign\":\n            append_comment(args.task, agent_cfg.get(\"owner\", args.agent), summarize_output(stdout, 3))\n        return 0\n\n    # Build final command list\n    if stdin_mode:\n        command = command_template\n    else:\n        command = command_template.copy()\n        if prompt_arg:\n            if prompt_arg not in command:\n                command.append(prompt_arg)\n            command.append(str(prompt_path))\n        else:\n            command.append(str(prompt_path))\n    command = add_sandbox(command, agent_cfg.get(\"sandbox\"))\n    log_dir = Path(cfg.get(\"log_dir\", \"reports/agents\"))\n    ensure_log_dir(log_dir)\n\n    try:\n        result = run_subprocess(command, promp"}
{"id": "scripts/agents/run.py:189-217", "path": "scripts/agents/run.py", "start": 7000, "end": 8200, "start_line": 189, "end_line": 217, "weights": {"args": 0.33542908644044894, "command": 0.20572858221864931, "stdout": 0.19318746486321384, "log_dir": 0.1774978407878552, "log_file": 0.16367443330002115, "prompt_path": 0.12620922306013282, "result": 0.11587117946830082, "agent": 0.10755460202991893, "strftime": 0.09874806583986795, "stdin_mode": 0.08994072749907499, "agent_cfg": 0.07980647465593502, "payload": 0.07980647465593502, "sz": 0.07798991404114491, "returncode": 0.07634663507900137, "dt": 0.06884115109179714, "timestamp": 0.06692346772782776, "task": 0.06648828646308755, "stderr": 0.06439582162107128, "utc": 0.061515578782051175, "write_text": 0.06086488347200209, "now": 0.05963283236886166, "timezone": 0.056390552515362694, "datetime": 0.05452480105604834, "log": 0.04956476532412108, "prompt_file": 0.049374032919933974, "get": 0.04929359952290496, "add_sandbox": 0.046894015053970346, "run_subprocess": 0.046894015053970346, "ensure_log_dir": 0.044970363749537494, "summarize_output": 0.044970363749537494, "encoding": 0.04348163817545311, "generate_loopback_response": 0.043398626190968924, "append_comment": 0.043398626190968924, "utf": 0.03846345271113552, "sandbox": 0.038173317539500685, "filenotfounderror": 0.038173317539500685, "assign": 0.03494320159604025, "indent": 0.02981641618443083, "cfg": 0.028702521947534226, "reports": 0.028702521947534226, "ensure_ascii": 0.028445168816933524, "dumps": 0.027952423870037414, "except": 0.026222504081570595, "try": 0.026028772565604572, "owner": 0.025839299231822026, "agents": 0.02512049225820952, "if": 0.023929668938918187, "print": 0.02209758819257875, "false": 0.02185810919165568, "path": 0.018724480665714888, "json": 0.017791604936057706, "str": 0.015882702462690638, "return": 0.014520142679980953}, "norm": 0.6366697104368381, "snippet": "command = add_sandbox(command, agent_cfg.get(\"sandbox\")) log_dir = Path(cfg.get(\"log_dir\", \"reports/agents\")) ensure_log_dir(log_dir) try: result = run_subprocess(command, prompt_path, stdin_mode=stdin_mode) except FileNotFoundError: stdout = generate_loopback_response(args.task, prompt_path, args.command) log_file =…", "text": "  command = add_sandbox(command, agent_cfg.get(\"sandbox\"))\n    log_dir = Path(cfg.get(\"log_dir\", \"reports/agents\"))\n    ensure_log_dir(log_dir)\n\n    try:\n        result = run_subprocess(command, prompt_path, stdin_mode=stdin_mode)\n    except FileNotFoundError:\n        stdout = generate_loopback_response(args.task, prompt_path, args.command)\n        log_file = log_dir / f\"{datetime.now(timezone.utc).strftime('%Y%m%dT%H%M%SZ')}-{args.agent}-{args.command}.log\"\n        log_file.write_text(stdout, encoding=\"utf-8\")\n        print(stdout)\n        if args.command == \"assign\":\n            append_comment(args.task, agent_cfg.get(\"owner\", args.agent), summarize_output(stdout, 3))\n        return 0\n\n    timestamp = datetime.now(timezone.utc).strftime('%Y%m%dT%H%M%SZ')\n    log_file = log_dir / f\"{timestamp}-{args.agent}-{args.command}.log\"\n    payload = {\n        \"agent\": args.agent,\n        \"command\": args.command,\n        \"task\": args.task,\n        \"returncode\": result.returncode,\n        \"stdout\": result.stdout,\n        \"stderr\": result.stderr,\n        \"prompt_file\": str(prompt_path),\n    }\n    log_file.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding=\"utf-8\")\n\n    if r"}
{"id": "scripts/agents/run.py:211-232", "path": "scripts/agents/run.py", "start": 8000, "end": 8773, "start_line": 211, "end_line": 232, "weights": {"stdout": 0.3351885074122428, "args": 0.33256217117172715, "result": 0.3015621722059624, "summarize_output": 0.13375800499862434, "append_comment": 0.12908309328595885, "prompt_path": 0.12513051175192658, "agent_cfg": 0.11868655205241617, "returncode": 0.1135411496046687, "assign": 0.10393362526001716, "command": 0.10198510913403128, "stderr": 0.09576814497492651, "strip": 0.07918796125889953, "owner": 0.0768553515613168, "task": 0.07416001182421303, "prompt_file": 0.07342804895785052, "if": 0.0711754255619105, "print": 0.0657261597522855, "generate_loopback_response": 0.06454154664297942, "agent": 0.06398119915625945, "log_file": 0.06085331494487966, "payload": 0.059343276026208085, "get": 0.04887228670646988, "__name__": 0.04788407248746326, "__main__": 0.04788407248746326, "write_text": 0.04525850309456565, "indent": 0.044342362530692, "return": 0.04318811668917411, "systemexit": 0.042685801870691924, "ensure_ascii": 0.04230307157390114, "dumps": 0.041570271396465894, "main": 0.041570271396465894, "raise": 0.039593980629449764, "false": 0.03250693161835973, "encoding": 0.03233250018174719, "or": 0.03233250018174719, "utf": 0.028601028939049488, "json": 0.026459309904906334, "not": 0.025922808495476842, "str": 0.023620429303488642}, "norm": 0.7048237412776686, "snippet": "\": result.stdout, \"stderr\": result.stderr, \"prompt_file\": str(prompt_path), } log_file.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding=\"utf-8\") if result.returncode != 0 or not result.stdout.strip(): stdout = generate_loopback_response(args.task, prompt_path, args.command) print(stdout) if…", "text": "\": result.stdout,\n        \"stderr\": result.stderr,\n        \"prompt_file\": str(prompt_path),\n    }\n    log_file.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding=\"utf-8\")\n\n    if result.returncode != 0 or not result.stdout.strip():\n        stdout = generate_loopback_response(args.task, prompt_path, args.command)\n        print(stdout)\n        if args.command == \"assign\":\n            append_comment(args.task, agent_cfg.get(\"owner\", args.agent), summarize_output(stdout, 3))\n        return 0\n\n    print(result.stdout.strip())\n    if args.command == \"assign\":\n        append_comment(args.task, agent_cfg.get(\"owner\", args.agent), summarize_output(result.stdout, 3))\n    return result.returncode\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/install.sh:1-48", "path": "scripts/agents/install.sh", "start": 0, "end": 1200, "start_line": 1, "end_line": 48, "weights": {"codex": 0.22074197099245033, "codex_src": 0.18625651442966965, "build_log": 0.18625651442966965, "warn": 0.18387865912139856, "cargo": 0.16477282053417355, "bin_dir": 0.13267574990879416, "build": 0.12798791380436703, "fi": 0.0960910275275629, "release": 0.09342116667869413, "ensure_cmd": 0.09312825721483482, "built_bin": 0.09312825721483482, "cli": 0.09223116267456165, "root": 0.08829678839698014, "return": 0.08216275857940442, "then": 0.07789214011502885, "vendor": 0.07526464276494685, "rs": 0.07526464276494685, "log": 0.070116009482903, "log_dir": 0.06695853506143482, "printf": 0.0614874417830411, "local": 0.0614874417830411, "script_dir": 0.05515468134789113, "cd": 0.053652676142508765, "pwd": 0.053181334079529054, "locked": 0.04986059290097972, "setup_codex": 0.04656412860741741, "if": 0.04513563572218715, "claude_dist": 0.044225249969598056, "submodule": 0.044225249969598056, "xxxxxx": 0.044225249969598056, "bin": 0.04311565589406201, "dist": 0.04092878567603574, "claude": 0.03967552811646453, "toml": 0.037632321382473424, "mktemp": 0.03677573182427972, "git": 0.03199697845109176, "target": 0.031140388892898045, "wrn": 0.03036550938229378, "update": 0.030004112938628463, "install": 0.028119546970682738, "lc_all": 0.027843924599335733, "eeuo": 0.027319221175453042, "pipefail": 0.027319221175453042, "dirname": 0.027069045088731467, "bash_source": 0.027069045088731467, "reports": 0.027069045088731467, "mkdir": 0.027069045088731467, "inf": 0.026826338071254383, "bash": 0.026590667039764527, "ifs": 0.026361635519710085, "dev": 0.025710881798787024, "set": 0.024917073103145435, "agents": 0.023690870747579713, "usr": 0.023529873777692074, "null": 0.023529873777692074, "manifest": 0.02337200316096767, "scripts": 0.023065171226147773, "env": 0.022208581667954065, "command": 0.021557827947031004, "utf": 0.018137237863787483, "path": 0.017658859814820547}, "norm": 0.5937280105081597, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\" BIN_DIR=\"$ROOT/scripts/bin\" LOG_DIR=\"$ROOT/reports/agents\" CODEX_SRC=\"$ROOT/vendor/codex/codex-rs\" CLAUDE_DIST=\"$BIN_DIR/claude-dist\" mkdir -p \"$BIN_DIR\"…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nBIN_DIR=\"$ROOT/scripts/bin\"\nLOG_DIR=\"$ROOT/reports/agents\"\nCODEX_SRC=\"$ROOT/vendor/codex/codex-rs\"\nCLAUDE_DIST=\"$BIN_DIR/claude-dist\"\nmkdir -p \"$BIN_DIR\" \"$LOG_DIR\"\n\nlog() {\n  printf ' [INF] %s\\n' \"$1\"\n}\n\nwarn() {\n  printf ' [WRN] %s\\n' \"$1\" >&2\n}\n\nensure_cmd() {\n  if ! command -v \"$1\" >/dev/null 2>&1; then\n    warn \"требуется команда '$1'\"\n    return 1\n  fi\n  return 0\n}\n\nsetup_codex() {\n  if [[ ! -d \"$CODEX_SRC\" ]]; then\n    warn \"codex-rs не найден в vendor/codex — выполните git submodule update\"\n    return 1\n  fi\n  ensure_cmd cargo || return 1\n  local build_log\n  build_log=\"$(mktemp -t codex-build.XXXXXX.log)\"\n  log \"Собираю Codex CLI (cargo build --release -p codex-cli)\"\n  if ! cargo build --manifest-path \"$CODEX_SRC/Cargo.toml\" --release --locked -p codex-cli >\"$build_log\" 2>&1; then\n    warn \"cargo build не удалось; лог: $build_log\"\n    return 1\n  fi\n  local built_bin=\"$CODEX_SRC/target/release/codex\"\n  if [[ ! -f \"$built_bin\" ]]; then\n    warn \"после сборки не найден бинарь codex\"\n    return 1\n  fi\n  install -m "}
{"id": "scripts/agents/install.sh:40-83", "path": "scripts/agents/install.sh", "start": 1000, "end": 2200, "start_line": 40, "end_line": 83, "weights": {"codex": 0.21548620977834435, "codex_home": 0.19469374370858744, "bin_dir": 0.17268907130985903, "bin": 0.1683563706339564, "built_bin": 0.13636637663600812, "root_dir": 0.12951680348239428, "claude_dist": 0.12951680348239428, "claude": 0.11619261805536038, "install": 0.10980013579028496, "codex_home_default": 0.09734687185429372, "fi": 0.09380314591976378, "ensure_cmd": 0.09091091775733874, "install_log": 0.09091091775733874, "local": 0.0900351826108816, "npm": 0.07347262746101953, "log": 0.06844658068569101, "return": 0.06683875201895993, "wrap": 0.06536428422663873, "no": 0.06337756767181324, "target": 0.0607979021242295, "cli": 0.06002345507392107, "then": 0.057028174012788965, "mkdir": 0.05284908803038048, "0755": 0.04867343592714686, "anthropi": 0.04867343592714686, "agents": 0.04625360479289372, "build_log": 0.04545545887866937, "codex_src": 0.04545545887866937, "setup_claude": 0.04545545887866937, "node": 0.04545545887866937, "save": 0.04545545887866937, "scripts": 0.04503200096533612, "if": 0.044060977728801735, "xxxxxx": 0.04317226782746476, "chmod": 0.04140128726147896, "rm": 0.03995429077898726, "anthropic": 0.03995429077898726, "code": 0.03873087268512013, "home": 0.037671099727782646, "export": 0.037671099727782646, "rf": 0.037671099727782646, "warn": 0.03590011916179686, "echo": 0.03590011916179686, "mktemp": 0.03590011916179686, "sandbox": 0.03514368916334983, "prefix": 0.034453122679305156, "cat": 0.03381786309459455, "exec": 0.032682142113319365, "package": 0.03123514563082766, "lock": 0.030806040700111188, "release": 0.03039895106211475, "agentcall": 0.028316694994912444, "eeuo": 0.026668763528418443, "pipefail": 0.026668763528418443, "exit": 0.026668763528418443, "dirname": 0.02642454401519024, "bash_source": 0.02642454401519024, "cd": 0.026187615736224513, "bash": 0.02595755591977013, "pwd": 0.02595755591977013, "ifs": 0.025733977531145553, "ai": 0.025516525355049408, "state": 0.02489778296243265, "set": 0.024323809457832444}, "norm": 0.5943466407763911, "snippet": "лог: $build_log\" return 1 fi local built_bin=\"$CODEX_SRC/target/release/codex\" if [[ ! -f \"$built_bin\" ]]; then warn \"после сборки не найден бинарь codex\" return 1 fi install -m 0755 \"$built_bin\" \"$BIN_DIR/codex.bin\" cat <<'WRAP' > \"$BIN_DIR/codex\" #!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' ROOT_DIR=\"$(cd…", "text": "лог: $build_log\"\n    return 1\n  fi\n  local built_bin=\"$CODEX_SRC/target/release/codex\"\n  if [[ ! -f \"$built_bin\" ]]; then\n    warn \"после сборки не найден бинарь codex\"\n    return 1\n  fi\n  install -m 0755 \"$built_bin\" \"$BIN_DIR/codex.bin\"\n  cat <<'WRAP' > \"$BIN_DIR/codex\"\n#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\"\nBIN=\"$ROOT_DIR/scripts/bin/codex.bin\"\nCODEX_HOME_DEFAULT=\"$ROOT_DIR/state/agents/codex-home\"\nif [[ ! -x \"$BIN\" ]]; then\n  echo \"codex CLI не установлен — выполните agentcall agents install\" >&2\n  exit 1\nfi\nif [[ -z \"${CODEX_HOME:-}\" ]]; then\n  CODEX_HOME=\"$CODEX_HOME_DEFAULT\"\nfi\nmkdir -p \"$CODEX_HOME\"\nexport CODEX_HOME\nexec \"$BIN\" \"$@\"\nWRAP\n  chmod +x \"$BIN_DIR/codex\"\n  log \"codex CLI собран и размещён: scripts/bin/codex\"\n  return 0\n}\n\nsetup_claude() {\n  local target=\"$BIN_DIR/claude\"\n\n  ensure_cmd node || return 1\n  ensure_cmd npm || return 1\n\n  rm -rf \"$CLAUDE_DIST\"\n  mkdir -p \"$CLAUDE_DIST\"\n  local install_log\n  install_log=\"$(mktemp -t claude-install.XXXXXX.log)\"\n  log \"Устанавливаю @anthropic-ai/claude-code в sandbox\"\n  if ! npm install --prefix \"$CLAUDE_DIST\" --no-save --no-package-lock @anthropi"}
{"id": "scripts/agents/install.sh:80-117", "path": "scripts/agents/install.sh", "start": 2000, "end": 3200, "start_line": 80, "end_line": 117, "weights": {"claude": 0.47344156312109537, "code": 0.18209290889272894, "wrap": 0.15365484724918807, "anthropic": 0.1502758399448476, "target": 0.14292044156068875, "warn": 0.13502731386228073, "install_log": 0.128225100418933, "root_dir": 0.12178445700583343, "js": 0.10925574533563738, "npm": 0.103629302911438, "ai": 0.09597260282794703, "cat": 0.09539665858027419, "fi": 0.08820295810365848, "dist_dir": 0.08548340027928866, "cli": 0.0846599478281424, "entry": 0.08262326622652165, "claude_dist": 0.08118963800388895, "bin": 0.07915262201447203, "chmod": 0.07785913723800521, "install": 0.07743367785210394, "bash": 0.07322355326621723, "node_modules": 0.07283716355709159, "then": 0.07149800921006377, "usr": 0.06479495092513711, "exec": 0.06146193889967523, "env": 0.06115646742891827, "no": 0.059593832288421404, "return": 0.05027870301127733, "dev": 0.047200574048519454, "all_log": 0.0457675591553769, "null": 0.04319663395009141, "log": 0.042906811773119745, "save": 0.04274170013964433, "config_dir_default": 0.04274170013964433, "if": 0.04143047159573895, "xxxxxx": 0.04059481900194448, "command": 0.03957631100723601, "sta": 0.038929568619002604, "dist": 0.0375689599862119, "mktemp": 0.03375682846557018, "sandbox": 0.033045558467030445, "prefix": 0.032396219832779474, "package": 0.029370360817046904, "lock": 0.028966874091149324, "local": 0.0282199826093808, "eeuo": 0.02507659854164719, "pipefail": 0.02507659854164719, "dirname": 0.02484695929786545, "bash_source": 0.02484695929786545, "cd": 0.024624175990778274, "pwd": 0.024407851088739076, "ifs": 0.02419762066361448, "set": 0.022871641729006627, "scripts": 0.02117176164788191}, "norm": 0.729765688523832, "snippet": "all_log install_log=\"$(mktemp -t claude-install.XXXXXX.log)\" log \"Устанавливаю @anthropic-ai/claude-code в sandbox\" if ! npm install --prefix \"$CLAUDE_DIST\" --no-save --no-package-lock @anthropic-ai/claude-code >\"$install_log\" 2>&1; then warn \"npm install claude-code не удалось; лог: $install_log\" if command -v claude…", "text": "all_log\n  install_log=\"$(mktemp -t claude-install.XXXXXX.log)\"\n  log \"Устанавливаю @anthropic-ai/claude-code в sandbox\"\n  if ! npm install --prefix \"$CLAUDE_DIST\" --no-save --no-package-lock @anthropic-ai/claude-code >\"$install_log\" 2>&1; then\n    warn \"npm install claude-code не удалось; лог: $install_log\"\n    if command -v claude >/dev/null 2>&1; then\n      warn \"перехожу на системный claude\"\n      cat <<'WRAP' > \"$target\"\n#!/usr/bin/env bash\nexec claude \"$@\"\nWRAP\n      chmod +x \"$target\"\n      return 0\n    fi\n    return 1\n  fi\n  local entry=\"$CLAUDE_DIST/node_modules/@anthropic-ai/claude-code/cli.js\"\n  if [[ ! -f \"$entry\" ]]; then\n    warn \"npm установка завершилась без cli.js\"\n    if command -v claude >/dev/null 2>&1; then\n      warn \"перехожу на системный claude\"\n      cat <<'WRAP' > \"$target\"\n#!/usr/bin/env bash\nexec claude \"$@\"\nWRAP\n      chmod +x \"$target\"\n      return 0\n    fi\n    return 1\n  fi\n  cat <<'WRAP' > \"$target\"\n#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\"\nDIST_DIR=\"$ROOT_DIR/scripts/bin/claude-dist\"\nENTRY=\"$DIST_DIR/node_modules/@anthropic-ai/claude-code/cli.js\"\nCONFIG_DIR_DEFAULT=\"$ROOT_DIR/sta"}
{"id": "scripts/agents/install.sh:114-154", "path": "scripts/agents/install.sh", "start": 3000, "end": 4200, "start_line": 114, "end_line": 154, "weights": {"claude": 0.30500562239532103, "claude_config_dir": 0.21903046167216086, "cli": 0.168815967395403, "sandbox_bin": 0.1534121737155091, "tmp": 0.134845731379082, "dist_dir": 0.10227478247700608, "config_dir_default": 0.10227478247700608, "bwrap": 0.10227478247700608, "work_dir": 0.10227478247700608, "entry": 0.09885283637815984, "dir": 0.09713760261179571, "root_dir": 0.09713760261179571, "proc": 0.09713760261179571, "work": 0.09315289633832766, "then": 0.08554226101918344, "warn": 0.08077526811404294, "sandbox": 0.07907330061753713, "exec": 0.07353481975496858, "bin": 0.07102534386120035, "mkdir": 0.059455224034178036, "pwd": 0.05840450081948279, "dev": 0.05647211537947863, "bubblewrap": 0.054757615418040216, "fi": 0.05276426957986713, "agents": 0.05203530539200543, "node": 0.05113739123850304, "setup_codex": 0.05113739123850304, "setup_claude": 0.05113739123850304, "sandbox_work": 0.05113739123850304, "bind": 0.05113739123850304, "tmpfs": 0.05113739123850304, "chdir": 0.05113739123850304, "scripts": 0.05066100108600314, "if": 0.04956859994490195, "bin_dir": 0.04856880130589786, "sandbox_exec": 0.04856880130589786, "chmod": 0.04657644816916383, "dist": 0.04494857712636067, "anthropic": 0.04494857712636067, "node_modules": 0.043572231770760146, "code": 0.043572231770760146, "js": 0.043572231770760146, "export": 0.04237998719375548, "echo": 0.04038763405702147, "cat": 0.03804509598141887, "wrap": 0.03676740987748429, "target": 0.0341988199448791, "agentcall": 0.0318562818692765, "install": 0.030881288191017642, "config": 0.03057859576534192, "exit": 0.030002358969470747, "eeuo": 0.030002358969470747, "pipefail": 0.030002358969470747, "dirname": 0.029727612017089018, "bash_source": 0.029727612017089018, "cd": 0.029461067703252578, "bash": 0.029202250409741396, "ifs": 0.028950724722538748, "ai": 0.028706091024430586, "state": 0.02801000583273673, "set": 0.0273642856400615, "usr": 0.025840843523715396, "null": 0.025840843523715396, "log": 0.025667467757134133}, "norm": 0.6407961219198379, "snippet": "DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\" DIST_DIR=\"$ROOT_DIR/scripts/bin/claude-dist\" ENTRY=\"$DIST_DIR/node_modules/@anthropic-ai/claude-code/cli.js\" CONFIG_DIR_DEFAULT=\"$ROOT_DIR/state/agents/claude-config\" if [[ ! -f \"$ENTRY\" ]]; then echo \"claude CLI не установлен — выполните agentcall agents…", "text": "DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\"\nDIST_DIR=\"$ROOT_DIR/scripts/bin/claude-dist\"\nENTRY=\"$DIST_DIR/node_modules/@anthropic-ai/claude-code/cli.js\"\nCONFIG_DIR_DEFAULT=\"$ROOT_DIR/state/agents/claude-config\"\nif [[ ! -f \"$ENTRY\" ]]; then\n  echo \"claude CLI не установлен — выполните agentcall agents install\" >&2\n  exit 1\nfi\nif [[ -z \"${CLAUDE_CONFIG_DIR:-}\" ]]; then\n  CLAUDE_CONFIG_DIR=\"$CONFIG_DIR_DEFAULT\"\nfi\nmkdir -p \"$CLAUDE_CONFIG_DIR\"\nexport CLAUDE_CONFIG_DIR\nexec node \"$ENTRY\" \"$@\"\nWRAP\n  chmod +x \"$target\"\n  log \"claude CLI установлен локально: scripts/bin/claude\"\n  return 0\n}\n\nsetup_codex || warn \"codex CLI не настроен\"\nsetup_claude || warn \"claude CLI не настроен\"\n\nSANDBOX_BIN=\"$BIN_DIR/sandbox_exec\"\nif [[ ! -f \"$SANDBOX_BIN\" ]]; then\n  cat <<'SANDBOX' > \"$SANDBOX_BIN\"\n#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\n# Простая обёртка: если доступен bubblewrap, используем его для изоляции,\n# иначе запускаем команду напрямую.\nif command -v bwrap >/dev/null 2>&1; then\n  WORK_DIR=\"${SANDBOX_WORK:-/tmp/sandbox-work}\"\n  mkdir -p \"$WORK_DIR\"\n  exec bwrap \\\n    --dev-bind / / \\\n    --proc /proc \\\n    --tmpfs /tmp \\\n    --dir /tmp/work \\\n    --chdir \"$PWD\" \\\n    \""}
{"id": "scripts/agents/install.sh:145-165", "path": "scripts/agents/install.sh", "start": 4000, "end": 4408, "start_line": 145, "end_line": 165, "weights": {"tmp": 0.3872492798578766, "work_dir": 0.29371219583140207, "proc": 0.2789592690390031, "work": 0.26751600999724867, "sandbox": 0.2270822992093374, "exec": 0.21117691827067897, "fi": 0.15152815879346457, "log": 0.14742340455379604, "sandbox_work": 0.14685609791570103, "bwrap": 0.14685609791570103, "bind": 0.14685609791570103, "tmpfs": 0.14685609791570103, "chdir": 0.14685609791570103, "sandbox_bin": 0.14685609791570103, "dir": 0.13947963451950154, "sandbox_exec": 0.13947963451950154, "chmod": 0.13375800499862434, "sz": 0.11598500036888218, "log_dir": 0.10558845913533949, "dt": 0.10237914777754446, "timestamp": 0.09952720841574383, "printf": 0.09696096588864173, "cli": 0.09696096588864173, "date": 0.09462835619105898, "install": 0.088684725061384, "mkdir": 0.08537160374138385, "pwd": 0.08386287297156503, "dev": 0.08108816567309753, "else": 0.062347460325846454, "then": 0.061414956629157344}, "norm": 0.9065514999850105, "snippet": "; then WORK_DIR=\"${SANDBOX_WORK:-/tmp/sandbox-work}\" mkdir -p \"$WORK_DIR\" exec bwrap \\ --dev-bind / / \\ --proc /proc \\ --tmpfs /tmp \\ --dir /tmp/work \\ --chdir \"$PWD\" \\ \"$@\" else exec \"$@\" fi SANDBOX chmod +x \"$SANDBOX_BIN\" log \"sandbox_exec настроен\" fi printf '%s\\n' \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\" >…", "text": "; then\n  WORK_DIR=\"${SANDBOX_WORK:-/tmp/sandbox-work}\"\n  mkdir -p \"$WORK_DIR\"\n  exec bwrap \\\n    --dev-bind / / \\\n    --proc /proc \\\n    --tmpfs /tmp \\\n    --dir /tmp/work \\\n    --chdir \"$PWD\" \\\n    \"$@\"\nelse\n  exec \"$@\"\nfi\nSANDBOX\n  chmod +x \"$SANDBOX_BIN\"\n  log \"sandbox_exec настроен\"\nfi\n\nprintf '%s\\n' \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\" > \"$LOG_DIR/install.timestamp\"\nlog \"Установка CLI агентов завершена\"\n"}
{"id": "scripts/agents/workflow.py:1-45", "path": "scripts/agents/workflow.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 45, "weights": {"import": 0.19980910704772922, "workflows": 0.19151882901143163, "optional": 0.13023837748770822, "path": 0.11179616397470947, "str": 0.1083760873924773, "name": 0.10430206105941824, "override": 0.09978121355264129, "dict": 0.08164815887471909, "default_config_path": 0.07403295056106464, "cfg": 0.07344468851280817, "assign_agent": 0.07176602879889907, "workflow": 0.06980233184853844, "os": 0.06812493725949446, "dataclass": 0.061572687908311635, "root": 0.059892490658981015, "get": 0.05605938769271545, "fh": 0.0556099657302504, "isinstance": 0.053646268779889775, "object": 0.05304594533106249, "json": 0.04552557733638296, "etc": 0.04509450681485665, "run": 0.04314970307749741, "agents": 0.04285260444047506, "runner_path": 0.042113145725826036, "pick_workflow": 0.042113145725826036, "wf_cfg": 0.042113145725826036, "def": 0.04094529723098051, "if": 0.04082119995462514, "return": 0.03715448273995126, "review_role": 0.03701647528053232, "agents_config_path": 0.03701647528053232, "assign_role": 0.035883014399449534, "review_agent": 0.035883014399449534, "else": 0.03575810224570605, "dataclasses": 0.033260404517547096, "none": 0.03265926354988763, "resolve_config_path": 0.031919804835238604, "expanduser": 0.031919804835238604, "class": 0.030786343954155818, "assign": 0.02980449547897551, "load": 0.029358726200913485, "typing": 0.028938443746207982, "__file__": 0.028938443746207982, "__future__": 0.028540890648632425, "annotations": 0.028540890648632425, "load_config": 0.02746292392663334, "resolve": 0.027136072731259564, "review": 0.026522972665531244, "subprocess": 0.026522972665531244, "open": 0.026234585068815944, "argparse": 0.025182372983222755, "config": 0.025182372983222755, "default": 0.025182372983222755, "environ": 0.02448156283760272, "pathlib": 0.02426205575561977, "parents": 0.02426205575561977, "is": 0.02344422020333871, "as": 0.022039402285965848, "py": 0.02172646394465117, "usr": 0.02128069466658915, "scripts": 0.020860412211883644, "env": 0.020085702537929042, "python3": 0.020085702537929042, "sys": 0.020085702537929042}, "norm": 0.48546918007177814, "snippet": "#!/usr/bin/env python3 \"\"\"Run agent workflows (assign, review, etc.).\"\"\" from __future__ import annotations import argparse import json import os import subprocess import sys from dataclasses import dataclass from pathlib import Path from typing import Dict, Optional ROOT = Path(__file__).resolve().parents[2]…", "text": "#!/usr/bin/env python3\n\"\"\"Run agent workflows (assign, review, etc.).\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Dict, Optional\n\nROOT = Path(__file__).resolve().parents[2]\nDEFAULT_CONFIG_PATH = ROOT / \"config\" / \"agents.json\"\nRUNNER_PATH = ROOT / \"scripts\" / \"agents\" / \"run.py\"\n\n\n@dataclass\nclass Workflow:\n    name: str\n    assign_agent: str\n    assign_role: Optional[str]\n    review_agent: Optional[str]\n    review_role: Optional[str]\n\n\ndef resolve_config_path() -> Path:\n    override = os.environ.get(\"AGENTS_CONFIG_PATH\")\n    if override:\n        return Path(override).expanduser()\n    return DEFAULT_CONFIG_PATH\n\n\ndef load_config(path: Path) -> Dict[str, object]:\n    with path.open(\"r\", encoding=\"utf-8\") as fh:\n        return json.load(fh)\n\n\ndef pick_workflow(cfg: Dict[str, object], name: str | None) -> Workflow:\n    workflows = cfg.get(\"workflows\", {}) if isinstance(cfg.get(\"workflows\"), dict) else {}\n    if name is None:\n        name = \"default\"\n    wf_cfg = workflows.get(name, {}) if isinstance(workflows, dict) else {}\n    assign_agent = os.e"}
{"id": "scripts/agents/workflow.py:41-68", "path": "scripts/agents/workflow.py", "start": 1000, "end": 2200, "start_line": 41, "end_line": 68, "weights": {"review_role": 0.21422300587882534, "assign_role": 0.2076634024819207, "review_agent": 0.2076634024819207, "wf_cfg": 0.20309885881958656, "assign_agent": 0.1730528354016006, "get": 0.14869653189415305, "or": 0.14308851144262585, "str": 0.13066620465759676, "role": 0.12561999530729304, "name": 0.10060340641192114, "none": 0.09450340091031315, "environ": 0.09445368924578638, "workflows": 0.0923636905870734, "args": 0.09198528138792454, "os": 0.0876122124566548, "else": 0.08622521108893659, "if": 0.07874727934509247, "extend": 0.0641619150976795, "task": 0.05469958318949046, "agent": 0.05309078227859827, "isinstance": 0.05174391882315609, "subprocess": 0.05116488343989006, "result": 0.04766332205079041, "cfg": 0.04722684462289319, "default_agent": 0.04061977176391731, "runner_path": 0.04061977176391731, "run_agent": 0.038579473377734465, "executable": 0.038579473377734465, "command": 0.03761152960971366, "completedprocess": 0.0369968949996195, "workflow": 0.03366353592695471, "capture_output": 0.03366353592695471, "true": 0.033154095569479576, "dict": 0.031501133636771046, "optional": 0.03140499882682326, "def": 0.026328890890843257, "default": 0.024289381033463085, "return": 0.023891298594011214, "text": 0.022996320346981135, "is": 0.02261286487697918, "run": 0.020809785881346268, "sys": 0.01937344358268333, "codex": 0.019256214490830773}, "norm": 0.6190761398286083, "snippet": "{}) if isinstance(cfg.get(\"workflows\"), dict) else {} if name is None: name = \"default\" wf_cfg = workflows.get(name, {}) if isinstance(workflows, dict) else {} assign_agent = os.environ.get(\"ASSIGN_AGENT\") or wf_cfg.get(\"assign_agent\") or cfg.get(\"default_agent\") or \"codex\" assign_role = os.environ.get(\"ASSIGN_ROLE\")…", "text": " {}) if isinstance(cfg.get(\"workflows\"), dict) else {}\n    if name is None:\n        name = \"default\"\n    wf_cfg = workflows.get(name, {}) if isinstance(workflows, dict) else {}\n    assign_agent = os.environ.get(\"ASSIGN_AGENT\") or wf_cfg.get(\"assign_agent\") or cfg.get(\"default_agent\") or \"codex\"\n    assign_role = os.environ.get(\"ASSIGN_ROLE\") or wf_cfg.get(\"assign_role\")\n    review_agent = os.environ.get(\"REVIEW_AGENT\") or wf_cfg.get(\"review_agent\") or None\n    review_role = os.environ.get(\"REVIEW_ROLE\") or wf_cfg.get(\"review_role\") or None\n    return Workflow(\n        name=name,\n        assign_agent=str(assign_agent),\n        assign_role=str(assign_role) if assign_role else None,\n        review_agent=str(review_agent) if review_agent else None,\n        review_role=str(review_role) if review_role else None,\n    )\n\n\ndef run_agent(command: str, agent: str, task: str, role: Optional[str]) -> subprocess.CompletedProcess[str]:\n    args = [sys.executable, str(RUNNER_PATH), command, \"--agent\", agent]\n    if task:\n        args.extend([\"--task\", task])\n    if role:\n        args.extend([\"--role\", role])\n    result = subprocess.run(args, text=True, capture_output=True)\n    return result\n\n\ndef "}
{"id": "scripts/agents/workflow.py:59-93", "path": "scripts/agents/workflow.py", "start": 2000, "end": 3200, "start_line": 59, "end_line": 93, "weights": {"workflow": 0.40918608325005296, "assign_result": 0.3172165306976123, "review_result": 0.29624419751960385, "returncode": 0.15269327015800274, "print_step": 0.14812209875980192, "stderr": 0.12879164324214257, "stdout": 0.12879164324214257, "review_agent": 0.12620922306013282, "task_id": 0.12579125093215532, "role": 0.11451995261850205, "print": 0.11048794096289376, "strip": 0.10649415479645111, "run_agent": 0.09378803010794069, "assign_agent": 0.08413948204008856, "args": 0.08385727161011224, "dry_run": 0.07980647465593502, "extend": 0.07798991404114491, "via": 0.07634663507900137, "return": 0.07260071339990477, "if": 0.07178900681675456, "assign": 0.0698864031920805, "write": 0.0698864031920805, "result": 0.05793558973415041, "task": 0.04986621484731566, "def": 0.048004831236321974, "str": 0.04764810738807192, "sys": 0.04709750939928189, "analysis": 0.046894015053970346, "assign_only": 0.046894015053970346, "work": 0.044970363749537494, "review_role": 0.043398626190968924, "assign_role": 0.04206974102004428, "capture_output": 0.04091860832500529, "true": 0.040299374787039835, "title": 0.03794874644993412, "pipeline": 0.03346173386391388, "subprocess": 0.031095898987174565, "review": 0.031095898987174565, "text": 0.027952423870037414, "bool": 0.02748632713494883, "run": 0.025294653528188136, "agent": 0.021510920405983784, "int": 0.02128699379905912, "none": 0.019145085529244474}, "norm": 0.7733094704794691, "snippet": "agent] if task: args.extend([\"--task\", task]) if role: args.extend([\"--role\", role]) result = subprocess.run(args, text=True, capture_output=True) return result def print_step(title: str) -> None: print(f\"\\n== {title} ==\") def pipeline(task_id: str, workflow: Workflow, dry_run: bool) -> int: print_step(f\"Assign via…", "text": " agent]\n    if task:\n        args.extend([\"--task\", task])\n    if role:\n        args.extend([\"--role\", role])\n    result = subprocess.run(args, text=True, capture_output=True)\n    return result\n\n\ndef print_step(title: str) -> None:\n    print(f\"\\n== {title} ==\")\n\n\ndef pipeline(task_id: str, workflow: Workflow, dry_run: bool) -> int:\n    print_step(f\"Assign via {workflow.assign_agent}\")\n    assign_result = run_agent(\"assign\", workflow.assign_agent, task_id, workflow.assign_role)\n    if assign_result.returncode != 0:\n        sys.stderr.write(assign_result.stderr)\n        print(assign_result.stdout.strip())\n        return assign_result.returncode\n    print(assign_result.stdout.strip())\n    if dry_run:\n        return 0\n    if workflow.review_agent:\n        print_step(f\"Review via {workflow.review_agent}\")\n        review_result = run_agent(\"analysis\", workflow.review_agent, task_id, workflow.review_role)\n        if review_result.returncode != 0:\n            sys.stderr.write(review_result.stderr)\n            print(review_result.stdout.strip())\n            return review_result.returncode\n        print(review_result.stdout.strip())\n    return 0\n\n\ndef assign_only(task_id: str, workflow: Work"}
{"id": "scripts/agents/workflow.py:86-119", "path": "scripts/agents/workflow.py", "start": 3000, "end": 4200, "start_line": 86, "end_line": 119, "weights": {"workflow": 0.4668746130197325, "result": 0.27543149217874785, "returncode": 0.18147970633533111, "stderr": 0.15307203500090713, "review_result": 0.14083740537817233, "stdout": 0.12245762800072572, "review_agent": 0.12000221208996237, "task_id": 0.11960479596827885, "print": 0.10505410780078421, "strip": 0.10125673734744532, "print_step": 0.09389160358544822, "shared": 0.09389160358544822, "run_agent": 0.08917550403705836, "assign_agent": 0.08000147472664158, "via": 0.07259188253413246, "return": 0.06903018651138486, "argumentparser": 0.068638406192872, "required": 0.068638406192872, "sys": 0.06717185766782827, "assign": 0.06644936696951917, "write": 0.06644936696951917, "parser": 0.06122881400036286, "int": 0.06072027739403749, "review": 0.059133184959217204, "argparse": 0.056144306978988444, "add_help": 0.04694580179272411, "def": 0.04564393789683073, "assign_only": 0.04458775201852918, "review_only": 0.04458775201852918, "analysis": 0.04458775201852918, "false": 0.041566240430033756, "err": 0.04126426752583931, "review_role": 0.04126426752583931, "agent": 0.04090601257531343, "assign_role": 0.04000073736332079, "add_subparsers": 0.03890621775164438, "workflows": 0.03558273325895451, "sub": 0.034926645491138636, "dest": 0.034319203096436, "mode": 0.034319203096436, "if": 0.03412919996206364, "description": 0.033224683484759585, "add_argument": 0.031395637982184095, "str": 0.030203171896264164, "file": 0.028350035060606363, "main": 0.02657771449937984, "run": 0.02405065417434282, "true": 0.019158719161051725, "not": 0.016573598874157325, "task": 0.01580459268384868}, "norm": 0.7389556655100378, "snippet": "err) print(review_result.stdout.strip()) return review_result.returncode print(review_result.stdout.strip()) return 0 def assign_only(task_id: str, workflow: Workflow) -> int: print_step(f\"Assign via {workflow.assign_agent}\") result = run_agent(\"assign\", workflow.assign_agent, task_id, workflow.assign_role) if…", "text": "err)\n            print(review_result.stdout.strip())\n            return review_result.returncode\n        print(review_result.stdout.strip())\n    return 0\n\n\ndef assign_only(task_id: str, workflow: Workflow) -> int:\n    print_step(f\"Assign via {workflow.assign_agent}\")\n    result = run_agent(\"assign\", workflow.assign_agent, task_id, workflow.assign_role)\n    if result.returncode != 0:\n        sys.stderr.write(result.stderr)\n    print(result.stdout.strip())\n    return result.returncode\n\n\ndef review_only(task_id: str, workflow: Workflow) -> int:\n    if not workflow.review_agent:\n        print(\"Review agent не задан в workflow\", file=sys.stderr)\n        return 1\n    print_step(f\"Review via {workflow.review_agent}\")\n    result = run_agent(\"analysis\", workflow.review_agent, task_id, workflow.review_role)\n    if result.returncode != 0:\n        sys.stderr.write(result.stderr)\n    print(result.stdout.strip())\n    return result.returncode\n\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"Run agent workflows\")\n    sub = parser.add_subparsers(dest=\"mode\", required=True)\n\n    shared = argparse.ArgumentParser(add_help=False)\n    shared.add_argument(\"--task\", required=False, d"}
{"id": "scripts/agents/workflow.py:115-140", "path": "scripts/agents/workflow.py", "start": 4000, "end": 5200, "start_line": 115, "end_line": 140, "weights": {"shared": 0.2545505697205485, "wf": 0.16970037981369898, "args": 0.1681286532034843, "help": 0.1621309456458891, "workflow": 0.14063877231705524, "dry_run": 0.13714890459390314, "review": 0.1335971956486018, "sub": 0.126253355553153, "mode": 0.1240575637856353, "assign": 0.12010107807824205, "step": 0.1159236043321411, "task_id": 0.1080872970972594, "add_parser": 0.09840232965737954, "required": 0.09304317283922647, "pipeline_parser": 0.0908570803973408, "wf_name": 0.0908570803973408, "run": 0.0869386610154022, "pipeline": 0.08625691396031133, "add_argument": 0.08511706297392131, "default": 0.07610672723818433, "only": 0.0745813427874429, "environ": 0.07398872324253267, "parents": 0.07332532406142864, "os": 0.0686295664243796, "task": 0.05713067577569004, "false": 0.0563453481384902, "or": 0.05604300031502846, "parser": 0.055332705985513105, "return": 0.04990626817415676, "cfg": 0.04932581549502178, "identifier": 0.0454285401986704, "add_help": 0.042425094953424745, "pick_workflow": 0.042425094953424745, "get": 0.042355981812273895, "assign_only": 0.04029411663896711, "review_only": 0.04029411663896711, "dry": 0.036148814506112126, "add_subparsers": 0.03515969307926381, "workflows": 0.03215624783401815, "resolve_config_path": 0.03215624783401815, "skip": 0.03156333888828825, "dest": 0.031014390946408826, "argumentparser": 0.031014390946408826, "store_true": 0.031014390946408826, "if": 0.03084268441016122, "parse_args": 0.030503332639098078, "description": 0.030025269519560513, "load_config": 0.027666352992756552, "action": 0.02642891532858495, "argparse": 0.025368909079394777, "name": 0.021014933783823526, "agent": 0.018483457534030513, "then": 0.017742098581756568, "true": 0.017313805464061558}, "norm": 0.634445502744639, "snippet": "description=\"Run agent workflows\") sub = parser.add_subparsers(dest=\"mode\", required=True) shared = argparse.ArgumentParser(add_help=False) shared.add_argument(\"--task\", required=False, default=\"\", help=\"Task identifier\") shared.add_argument(\"--workflow\", required=False, help=\"Workflow name (default=default)\")…", "text": "description=\"Run agent workflows\")\n    sub = parser.add_subparsers(dest=\"mode\", required=True)\n\n    shared = argparse.ArgumentParser(add_help=False)\n    shared.add_argument(\"--task\", required=False, default=\"\", help=\"Task identifier\")\n    shared.add_argument(\"--workflow\", required=False, help=\"Workflow name (default=default)\")\n\n    sub.add_parser(\"assign\", parents=[shared], help=\"Run only the assign step\")\n    sub.add_parser(\"review\", parents=[shared], help=\"Run only the review step\")\n    pipeline_parser = sub.add_parser(\"pipeline\", parents=[shared], help=\"Assign then review\")\n    pipeline_parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Skip review step\")\n\n    args = parser.parse_args()\n    cfg = load_config(resolve_config_path())\n    task_id = args.task or os.environ.get(\"TASK\", \"\")\n    wf_name = args.workflow or os.environ.get(\"WORKFLOW\")\n    wf = pick_workflow(cfg, wf_name)\n\n    if args.mode == \"assign\":\n        return assign_only(task_id, wf)\n    if args.mode == \"review\":\n        return review_only(task_id, wf)\n    if args.mode == \"pipeline\":\n        dry_run = args.dry_run or os.environ.get(\"DRY_RUN\") == \"1\"\n        return pipeline(task_id, wf, dry_run)\n    return 1"}
{"id": "scripts/agents/workflow.py:135-145", "path": "scripts/agents/workflow.py", "start": 5000, "end": 5259, "start_line": 135, "end_line": 145, "weights": {"dry_run": 0.6612536471491758, "wf": 0.40909912990802433, "pipeline": 0.2772543663010007, "task_id": 0.26056759121660744, "args": 0.23160579778030999, "review_only": 0.19427520522359143, "return": 0.18046463045119182, "mode": 0.1495336706344711, "__name__": 0.1333913447865048, "__main__": 0.1333913447865048, "environ": 0.11891044806835607, "systemexit": 0.11891044806835607, "main": 0.11580289889015499, "os": 0.11029751746775292, "raise": 0.11029751746775292, "if": 0.0991371998898039, "or": 0.09006910764915288, "get": 0.06807211362686875}, "norm": 1.009889879134723, "snippet": "\": return review_only(task_id, wf) if args.mode == \"pipeline\": dry_run = args.dry_run or os.environ.get(\"DRY_RUN\") == \"1\" return pipeline(task_id, wf, dry_run) return 1 if __name__ == \"__main__\": raise SystemExit(main())", "text": "\":\n        return review_only(task_id, wf)\n    if args.mode == \"pipeline\":\n        dry_run = args.dry_run or os.environ.get(\"DRY_RUN\") == \"1\"\n        return pipeline(task_id, wf, dry_run)\n    return 1\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n"}
{"id": "scripts/agents/heart_check.sh:1-46", "path": "scripts/agents/heart_check.sh", "start": 0, "end": 1141, "start_line": 1, "end_line": 46, "weights": {"heart": 0.18438581669902568, "heart_cmd": 0.1830702366215076, "sync": 0.1533493757784311, "heart_manifest": 0.1373026774661307, "max_age_sec": 0.1373026774661307, "age": 0.1373026774661307, "running": 0.128225100418933, "stamp": 0.128225100418933, "echo": 0.10127048539671055, "manifest": 0.08581362354623949, "value": 0.07743367785210394, "exit": 0.07522979562494157, "datetime": 0.07080086107277918, "import": 0.06759711084201783, "fi": 0.06615221857774387, "path": 0.06483700767829632, "root": 0.06078640843001057, "dt": 0.059593832288421404, "timestamp": 0.05793374818229865, "then": 0.05362350690754783, "now": 0.051622451901402626, "replace": 0.051116458592810374, "timezone": 0.04881570217747815, "json": 0.04620506356528419, "data": 0.046094484911896744, "heart_max_age_sec": 0.0457675591553769, "86400": 0.0457675591553769, "unreadable": 0.0457675591553769, "older": 0.0457675591553769, "seconds": 0.0457675591553769, "00": 0.04441570903985659, "py": 0.04410147905182924, "tzinfo": 0.04274170013964433, "than": 0.04274170013964433, "if": 0.04143047159573895, "fromisoformat": 0.04059481900194448, "print": 0.0382585109005841, "exception": 0.036418581778545796, "valueerror": 0.034543100970479336, "found": 0.03375682846557018, "utf": 0.033296720257400894, "not": 0.03017879197980886, "context": 0.029796916144210702, "eq": 0.029796916144210702, "loads": 0.029370360817046904, "date": 0.027541088742173887, "generated_at": 0.02722347967934705, "utc": 0.0266261460399923, "lc_all": 0.025558229296405187, "eeuo": 0.02507659854164719, "pipefail": 0.02507659854164719, "dirname": 0.02484695929786545, "bash_source": 0.02484695929786545, "cd": 0.024624175990778274, "pathlib": 0.024624175990778274, "bash": 0.024407851088739076, "pwd": 0.024407851088739076, "ifs": 0.02419762066361448, "read_text": 0.02419762066361448, "sh": 0.02322707493041897, "raise": 0.023047242455948372, "set": 0.022871641729006627, "except": 0.022700078160165588, "try": 0.022532370280672613}, "norm": 0.5440956583170776, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\" HEART_MANIFEST=\"$ROOT/context/heart/manifest.json\" HEART_CMD=\"$ROOT/scripts/agents/heart.sh\" MAX_AGE_SEC=${HEART_MAX_AGE_SEC:-86400} if [[ ! -f \"$HEART_MANIFEST\" ]]; then echo \"[Heart] manifest…", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\n\nROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\"\nHEART_MANIFEST=\"$ROOT/context/heart/manifest.json\"\nHEART_CMD=\"$ROOT/scripts/agents/heart.sh\"\nMAX_AGE_SEC=${HEART_MAX_AGE_SEC:-86400}\n\nif [[ ! -f \"$HEART_MANIFEST\" ]]; then\n  echo \"[Heart] manifest not found — running heart sync\" >&2\n  \"$HEART_CMD\" sync\n  exit 0\nfi\n\nNOW=$(date -u +%s)\nSTAMP=$(python3 <<'PY'\nimport json\nfrom datetime import datetime, timezone\nfrom pathlib import Path\npath = Path(r\"$HEART_MANIFEST\")\ntry:\n    data = json.loads(path.read_text(encoding=\"utf-8\"))\n    value = data.get(\"generated_at\")\n    if not value:\n        raise ValueError\n    dt = datetime.fromisoformat(value.replace(\"Z\", \"+00:00\"))\n    print(int(dt.replace(tzinfo=timezone.utc).timestamp()))\nexcept Exception:\n    print(0)\nPY\n)\nif [[ \"$STAMP\" -eq 0 ]]; then\n  echo \"[Heart] manifest timestamp unreadable — running sync\" >&2\n  \"$HEART_CMD\" sync\n  exit 0\nfi\nAGE=$(( NOW - STAMP ))\nif (( AGE > MAX_AGE_SEC )); then\n  echo \"[Heart] manifest older than $MAX_AGE_SEC seconds ($AGE) — running sync\" >&2\n  \"$HEART_CMD\" sync\nfi\n\nexit 0\n"}
{"id": "scripts/agents/logout.sh:1-8", "path": "scripts/agents/logout.sh", "start": 0, "end": 190, "start_line": 1, "end_line": 8, "weights": {"python": 0.48137033366756093, "script_dir": 0.2949576437300264, "logout": 0.2268070519541891, "exec": 0.17904130027296697, "lc_all": 0.14890446633557802, "eeuo": 0.14609844367742278, "pipefail": 0.14609844367742278, "dirname": 0.14476054547452044, "bash_source": 0.14476054547452044, "cd": 0.14346259055496907, "bash": 0.14220226286482768, "pwd": 0.14220226286482768, "ifs": 0.14097744212714522, "set": 0.13325217355160382, "py": 0.12846952593358954, "usr": 0.12583367281113586, "env": 0.1187676323981891, "python3": 0.1187676323981891, "bin": 0.11528751467325274, "utf": 0.09699479379329827}, "norm": 0.8311993832577169, "snippet": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/logout.py\"", "text": "#!/usr/bin/env bash\nset -Eeuo pipefail\nIFS=$'\\n\\t'\nLC_ALL=C.UTF-8\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPYTHON=${PYTHON:-python3}\nexec \"$PYTHON\" \"$SCRIPT_DIR/logout.py\"\n"}
{"id": "scripts/lib/sdklib/__init__.py:1-12", "path": "scripts/lib/sdklib/__init__.py", "start": 0, "end": 329, "start_line": 1, "end_line": 12, "weights": {"task_main": 0.6455634659811057, "argv": 0.353712021534813, "main": 0.34131380725519367, "runpy": 0.32278173299055285, "__all__": 0.30144146414275474, "task_cli": 0.30144146414275474, "none": 0.23377157067287987, "cli": 0.1990251405082646, "import": 0.15891250619000685, "sdk": 0.13641545277806266, "int": 0.12996269898372936, "list": 0.12543941320474386, "def": 0.09769404251602366, "str": 0.09696807819326915, "return": 0.08864929215146265}, "norm": 1.068566774892683, "snippet": "\"\"\"Внутренняя библиотека SDK для высокопроизводительных операций.\"\"\" __all__ = [\"task_main\"] def task_main(argv: list[str] | None = None) -> int: \"\"\"Ленивая прокладка к основному CLI (для удобства импорта).\"\"\" from .task_cli import main # локальный импорт, чтобы избежать предупреждений runpy return main(argv)", "text": "\"\"\"Внутренняя библиотека SDK для высокопроизводительных операций.\"\"\"\n\n__all__ = [\"task_main\"]\n\n\ndef task_main(argv: list[str] | None = None) -> int:\n    \"\"\"Ленивая прокладка к основному CLI (для удобства импорта).\"\"\"\n\n    from .task_cli import main  # локальный импорт, чтобы избежать предупреждений runpy\n\n    return main(argv)\n"}
{"id": "scripts/lib/sdklib/task_cli.py:1-40", "path": "scripts/lib/sdklib/task_cli.py", "start": 0, "end": 1200, "start_line": 1, "end_line": 40, "weights": {"import": 0.3659803172860764, "sdk_root": 0.16815618918757425, "posix": 0.12389601872364657, "detect_sdk_root": 0.11570480441843113, "env": 0.11036992101649898, "fcntl": 0.10989304537900123, "path": 0.08775918211001725, "ignore": 0.0818870986897105, "resolve": 0.07455567457477376, "datetime": 0.06388764568183443, "json": 0.06254018704796042, "os": 0.062390514931254186, "contextlib": 0.061948009361823285, "modulenotfounderror": 0.061948009361823285, "non": 0.061948009361823285, "sdk_roo": 0.061948009361823285, "timedelta": 0.057852402209215566, "type": 0.057313455774064166, "collections": 0.054946522689500614, "deque": 0.054946522689500614, "contextmanager": 0.054946522689500614, "lock_path": 0.054946522689500614, "field": 0.052692547423700505, "task_events": 0.052692547423700505, "task_state": 0.05085091553689289, "defaultdict": 0.04929383796288017, "journal": 0.04929383796288017, "jsonl": 0.04929383796288017, "counter": 0.04794503601717792, "pragma": 0.04675530838428516, "board_path": 0.04675530838428516, "dataclasses": 0.045691060751377834, "state_path": 0.045691060751377834, "cover": 0.0438494288645702, "dataclass": 0.04229235129055749, "log_path": 0.04229235129055749, "any": 0.04033117942751752, "no": 0.04033117942751752, "typing": 0.039753821711962484, "__file__": 0.039753821711962484, "__future__": 0.03920768816377788, "annotations": 0.03920768816377788, "cli": 0.038196744137949774, "iterable": 0.03727783728738688, "argparse": 0.03459396692644743, "return": 0.03402700102783415, "environ": 0.03363123783751485, "pathlib": 0.03332969275519484, "parents": 0.03332969275519484, "board": 0.03332969275519484, "timezone": 0.03303688935243471, "state": 0.03168808740673247, "sh": 0.03143866707753679, "data": 0.031195257465627093, "except": 0.030725358317799892, "try": 0.030498359773839703, "usr": 0.02923408560258712, "python3": 0.027592480254124745, "sys": 0.027592480254124745, "tasks": 0.027261269922579382, "bin": 0.026783968055402157, "sdk": 0.026180743462456475, "none": 0.02243262546860969, "task": 0.019476366741712516}, "norm": 0.5859955183288967, "snippet": "#!/usr/bin/env python3 \"\"\"Высокопроизводительный CLI для управления доской задач SDK. Переосмысленная реализация task.sh: добавляет блокировки, кэширование, расширенные метрики и устойчивость для работы с десятками и сотнями агентов. \"\"\" from __future__ import annotations import argparse import json import os import…", "text": "#!/usr/bin/env python3\n\"\"\"Высокопроизводительный CLI для управления доской задач SDK.\n\nПереосмысленная реализация task.sh: добавляет блокировки, кэширование,\nрасширенные метрики и устойчивость для работы с десятками и сотнями агентов.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom contextlib import contextmanager\nfrom dataclasses import dataclass, field\nfrom datetime import datetime, timedelta, timezone\nfrom pathlib import Path\nfrom typing import Any, Iterable\n\ntry:  # POSIX-ориентированная блокировка файлов\n    import fcntl  # type: ignore\nexcept ModuleNotFoundError:  # pragma: no cover - ожидаемо на non-POSIX\n    fcntl = None  # type: ignore\n\n\n# --- Путь окружения -----------------------------------------------------\n\ndef detect_sdk_root() -> Path:\n    env = os.environ.get(\"SDK_ROOT\")\n    if env:\n        return Path(env).resolve()\n    return Path(__file__).resolve().parents[3]\n\n\nSDK_ROOT = detect_sdk_root()\nBOARD_PATH = SDK_ROOT / \"data\" / \"tasks.board.json\"\nSTATE_PATH = SDK_ROOT / \"state\" / \"task_state.json\"\nLOG_PATH = SDK_ROOT / \"journal\" / \"task_events.jsonl\"\nLOCK_PATH = SDK_ROO"}
{"id": "scripts/lib/sdklib/task_cli.py:36-89", "path": "scripts/lib/sdklib/task_cli.py", "start": 1000, "end": 2200, "start_line": 36, "end_line": 89, "weights": {"blocked": 0.19286564708517628, "ready": 0.18087889406635208, "backlog": 0.16889214104752787, "review": 0.15029684510467706, "done": 0.15029684510467706, "sdk_root": 0.13872885607974875, "in_progress": 0.11031760129300379, "value": 0.10808450866856176, "priority_rank": 0.10166854079844034, "datetime": 0.09882620191408761, "none": 0.09253458005801496, "return": 0.07018068961990793, "state": 0.0653566802763857, "dic": 0.06388388465438025, "00": 0.06199692720146649, "ot": 0.05966028977825355, "detect_sdk_root": 0.05966028977825355, "def": 0.05800583774388905, "lock_path": 0.0566636015235475, "p3": 0.0566636015235475, "75": 0.0566636015235475, "parse_time": 0.0566636015235475, "fromisoformat": 0.0566636015235475, "task_events": 0.05433918953069114, "status_progress": 0.05433918953069114, "task_state": 0.05244000664742078, "status_titles": 0.05244000664742078, "now_iso": 0.05244000664742078, "journal": 0.05083427039922017, "jsonl": 0.05083427039922017, "status_order": 0.04944331839271472, "board_path": 0.04821641177129407, "valueerror": 0.04821641177129407, "state_path": 0.047118906399858385, "p2": 0.04521972351658802, "default_owner": 0.04438594531165535, "log_path": 0.0436139872683874, "json": 0.04299637859547279, "lock": 0.04043292841889593, "unassigned": 0.0389058088960639, "isoformat": 0.0389058088960639, "str": 0.03838319761816904, "utc": 0.03716566218082258, "p1": 0.03602816955618725, "now": 0.03602816955618725, "replace": 0.035675028392898905, "progress": 0.035333467738492746, "board": 0.03437124565379467, "p0": 0.03437124565379467, "timezone": 0.034069292144698296, "data": 0.03217010926142794, "except": 0.031685525765231135, "try": 0.03145143351677219, "tasks": 0.028113184607659984, "sdk": 0.026998891695658236, "not": 0.021062281902574934, "task": 0.020085003202391028, "in": 0.01766772283809767, "if": 0.01445750831726307}, "norm": 0.5634860306014124, "snippet": "OT = detect_sdk_root() BOARD_PATH = SDK_ROOT / \"data\" / \"tasks.board.json\" STATE_PATH = SDK_ROOT / \"state\" / \"task_state.json\" LOG_PATH = SDK_ROOT / \"journal\" / \"task_events.jsonl\" LOCK_PATH = SDK_ROOT / \"state\" / \".sdk.lock\" # --- Константы ----------------------------------------------------------- STATUS_ORDER = […", "text": "OT = detect_sdk_root()\nBOARD_PATH = SDK_ROOT / \"data\" / \"tasks.board.json\"\nSTATE_PATH = SDK_ROOT / \"state\" / \"task_state.json\"\nLOG_PATH = SDK_ROOT / \"journal\" / \"task_events.jsonl\"\nLOCK_PATH = SDK_ROOT / \"state\" / \".sdk.lock\"\n\n\n# --- Константы -----------------------------------------------------------\n\nSTATUS_ORDER = [\n    \"in_progress\",\n    \"review\",\n    \"ready\",\n    \"backlog\",\n    \"blocked\",\n    \"done\",\n]\nSTATUS_TITLES = {\n    \"in_progress\": \"In Progress\",\n    \"review\": \"Review\",\n    \"ready\": \"Ready\",\n    \"backlog\": \"Backlog\",\n    \"blocked\": \"Blocked\",\n    \"done\": \"Done\",\n}\nPRIORITY_RANK = {\"P0\": 0, \"P1\": 1, \"P2\": 2, \"P3\": 3}\nSTATUS_PROGRESS = {\n    \"done\": 1.0,\n    \"review\": 0.9,\n    \"ready\": 0.75,\n    \"in_progress\": 0.5,\n    \"backlog\": 0.0,\n    \"blocked\": 0.0,\n}\nDEFAULT_OWNER = \"unassigned\"\n\n\n# --- Вспомогательные структуры -----------------------------------------\n\n\ndef now_iso() -> str:\n    return datetime.now(timezone.utc).isoformat()\n\n\ndef parse_time(value: str | None) -> datetime | None:\n    if not value:\n        return None\n    try:\n        return datetime.fromisoformat(value.replace(\"Z\", \"+00:00\"))\n    except ValueError:\n        return None\n\n\ndef priority_rank(task: dic"}
{"id": "scripts/lib/sdklib/task_cli.py:80-122", "path": "scripts/lib/sdklib/task_cli.py", "start": 2000, "end": 3200, "start_line": 80, "end_line": 122, "weights": {"fcntl": 0.25498620685596374, "attr": 0.1342356520010705, "defined": 0.12749310342798187, "return": 0.11842991373359466, "lock_file": 0.11799001495669677, "ignore": 0.09500182933923443, "try": 0.09435430055031657, "flock": 0.08949043466738033, "none": 0.08675116880438902, "99": 0.08499540228532125, "lock_path": 0.08499540228532125, "exclusive": 0.07866000997113118, "priority_rank": 0.07625140559883026, "valueerror": 0.0723246176569411, "yield": 0.0723246176569411, "type": 0.06649256392537913, "mode": 0.06542098090258111, "any": 0.06238729317694116, "task": 0.06025500960717309, "def": 0.05800583774388905, "value": 0.05404225433428088, "default": 0.05351254258934836, "path": 0.05090718180991235, "lock_ex": 0.04791291349078519, "lock_sh": 0.04791291349078519, "except": 0.0475282886478467, "00": 0.04649769540109987, "global_lock": 0.04474521733369016, "lock_un": 0.04474521733369016, "get": 0.04467232456763262, "if": 0.04337252495178921, "fromisoformat": 0.042497701142660625, "p3": 0.042497701142660625, "status_rank": 0.042497701142660625, "contextmanager": 0.042497701142660625, "finally": 0.042497701142660625, "read_json": 0.040754392148018355, "time": 0.03933000498556559, "int": 0.03858267626079466, "status_order": 0.037082488794536045, "true": 0.03652130840075485, "pragma": 0.03616230882847055, "dict": 0.03470046752175561, "fallback": 0.034594569020172494, "cover": 0.033914792637441016, "parent": 0.032710490451290555, "index": 0.03217148364279875, "backlog": 0.03166727644641148, "not": 0.0315934228538624, "no": 0.03119364658847058, "loads": 0.03074709648034598, "exist_ok": 0.02992396745176921, "iterable": 0.028832077276963287, "open": 0.02787424663561694, "replace": 0.02675627129467418, "mkdir": 0.026011660514952892, "parents": 0.025778434240346006, "bool": 0.024909483966047377, "is": 0.024909483966047377, "datetime": 0.024706550478521903, "as": 0.023416864928838713, "exists": 0.022459034287492366, "encoding": 0.019702617298252192, "priority": 0.01929133813039733}, "norm": 0.5272711551930356, "snippet": "time | None: if not value: return None try: return datetime.fromisoformat(value.replace(\"Z\", \"+00:00\")) except ValueError: return None def priority_rank(task: dict) -> int: return PRIORITY_RANK.get(task.get(\"priority\", \"P3\"), 99) def status_rank(task: dict) -> int: try: return STATUS_ORDER.index(task.get(\"status\",…", "text": "time | None:\n    if not value:\n        return None\n    try:\n        return datetime.fromisoformat(value.replace(\"Z\", \"+00:00\"))\n    except ValueError:\n        return None\n\n\ndef priority_rank(task: dict) -> int:\n    return PRIORITY_RANK.get(task.get(\"priority\", \"P3\"), 99)\n\n\ndef status_rank(task: dict) -> int:\n    try:\n        return STATUS_ORDER.index(task.get(\"status\", \"backlog\"))\n    except ValueError:\n        return 99\n\n\n@contextmanager\ndef global_lock(*, exclusive: bool) -> Iterable[None]:\n    \"\"\"Глобальная блокировка для синхронизации сотен агентов.\"\"\"\n\n    if fcntl is None:  # pragma: no cover - fallback без блокировок\n        yield\n        return\n\n    LOCK_PATH.parent.mkdir(parents=True, exist_ok=True)\n    with open(LOCK_PATH, \"w\", encoding=\"utf-8\") as lock_file:\n        mode = fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH  # type: ignore[attr-defined]\n        fcntl.flock(lock_file, mode)  # type: ignore[attr-defined]\n        try:\n            yield\n        finally:\n            fcntl.flock(lock_file, fcntl.LOCK_UN)  # type: ignore[attr-defined]\n\n\ndef read_json(path: Path, default: Any) -> Any:\n    if not path.exists():\n        return default\n    try:\n        return json.loads("}
{"id": "scripts/lib/sdklib/task_cli.py:115-153", "path": "scripts/lib/sdklib/task_cli.py", "start": 3000, "end": 4200, "start_line": 115, "end_line": 153, "weights": {"setdefault": 0.3600053639062834, "path": 0.21364325480881247, "task": 0.18965511220618414, "tmp": 0.16505707010335724, "any": 0.09818328106535001, "default": 0.08421646046848266, "true": 0.05747615748315517, "none": 0.054610571837517025, "data": 0.05062836867372266, "ntl": 0.050269286285413974, "getpid": 0.050269286285413974, "defau": 0.050269286285413974, "flock": 0.04694580179272411, "lock_un": 0.04694580179272411, "attr": 0.04694580179272411, "with_suffix": 0.04694580179272411, "def": 0.04564393789683073, "fcntl": 0.04458775201852918, "defined": 0.04458775201852918, "write_json_atomic": 0.04458775201852918, "normalize_task": 0.04458775201852918, "read_json": 0.04275870651595368, "field": 0.04275870651595368, "return": 0.041418111906830916, "encoding": 0.04134319695370952, "lock_file": 0.04126426752583931, "slots": 0.04126426752583931, "exception": 0.04000073736332079, "suffix": 0.04000073736332079, "board_path": 0.03794078303314943, "utf": 0.036571807495833775, "p2": 0.03558273325895451, "default_owner": 0.034926645491138636, "parent": 0.034319203096436, "dataclass": 0.034319203096436, "class": 0.034319203096436, "json": 0.033833215943978596, "ignore": 0.033224683484759585, "backlog": 0.033224683484759585, "tasksession": 0.033224683484759585, "loads": 0.03225924876626464, "exist_ok": 0.031395637982184095, "write_text": 0.028935764273574766, "failure_criteria": 0.028935764273574766, "success_criteria": 0.028637668829551204, "indent": 0.028350035060606363, "replace": 0.028072153489494222, "comments": 0.028072153489494222, "blockers": 0.02780338444996151, "mkdir": 0.02729092250749156, "parents": 0.027046226088231876, "ensure_ascii": 0.027046226088231876, "big_task": 0.027046226088231876, "conflicts": 0.02680862332697571, "read_text": 0.02657771449937984, "dumps": 0.02657771449937984, "os": 0.02531418433686133, "except": 0.02493287273329663, "try": 0.02474866899680435, "owner": 0.024568514023699636, "exists": 0.02356357695736904, "type": 0.02325423000668997, "root": 0.022255133141042126, "false": 0.020783120215016878}, "norm": 0.57849803877995, "snippet": "ntl.flock(lock_file, fcntl.LOCK_UN) # type: ignore[attr-defined] def read_json(path: Path, default: Any) -> Any: if not path.exists(): return default try: return json.loads(path.read_text(encoding=\"utf-8\")) except Exception: return default def write_json_atomic(path: Path, data: Any) -> None:…", "text": "ntl.flock(lock_file, fcntl.LOCK_UN)  # type: ignore[attr-defined]\n\n\ndef read_json(path: Path, default: Any) -> Any:\n    if not path.exists():\n        return default\n    try:\n        return json.loads(path.read_text(encoding=\"utf-8\"))\n    except Exception:\n        return default\n\n\ndef write_json_atomic(path: Path, data: Any) -> None:\n    path.parent.mkdir(parents=True, exist_ok=True)\n    tmp = path.with_suffix(path.suffix + f\".{os.getpid()}.tmp\")\n    tmp.write_text(json.dumps(data, ensure_ascii=False, indent=2) + \"\\n\", encoding=\"utf-8\")\n    tmp.replace(path)\n\n\ndef normalize_task(task: dict) -> None:\n    task.setdefault(\"priority\", \"P2\")\n    task.setdefault(\"size_points\", 5)\n    task.setdefault(\"status\", \"backlog\")\n    task.setdefault(\"owner\", DEFAULT_OWNER)\n    task.setdefault(\"big_task\", None)\n    task.setdefault(\"success_criteria\", [])\n    task.setdefault(\"failure_criteria\", [])\n    task.setdefault(\"blockers\", [])\n    task.setdefault(\"dependencies\", [])\n    task.setdefault(\"conflicts\", [])\n    task.setdefault(\"comments\", [])\n\n\n@dataclass(slots=True)\nclass TaskSession:\n    \"\"\"Снимок доски задач внутри заблокированного контекста.\"\"\"\n\n    root: Path\n    board_path: Path = field(defau"}
{"id": "scripts/lib/sdklib/task_cli.py:144-171", "path": "scripts/lib/sdklib/task_cli.py", "start": 4000, "end": 5200, "start_line": 144, "end_line": 171, "weights": {"field": 0.38169967280095235, "init": 0.34730916334394735, "self": 0.26342624967731393, "false": 0.22675566933782643, "raw_assignments": 0.1396923858222522, "default": 0.13921962299667864, "board": 0.1341316903562719, "assignments": 0.13181825642733885, "dict": 0.1263886947133863, "board_path": 0.11289696414742027, "state_path": 0.11032719547283915, "default_factory": 0.09972118580195943, "setdefault": 0.09738504300790815, "read_json": 0.08482214951132276, "v1": 0.08185757135207147, "str": 0.07489404413301276, "path": 0.07063543925928219, "log_path": 0.06808037037016572, "tasks": 0.06582599322769168, "any": 0.06492336200527211, "task": 0.06270440024161103, "version": 0.05865242735792276, "bool": 0.05184412923014739, "__post_init__": 0.04986059290097972, "_board_dirty": 0.04656412860741741, "valid_ids": 0.04656412860741741, "_tasks_map": 0.044225249969598056, "_events": 0.044225249969598056, "_state_dirty": 0.044225249969598056, "normalize_task": 0.044225249969598056, "slots": 0.04092878567603574, "list": 0.0387536398518721, "dataclass": 0.03404018518508286, "class": 0.03404018518508286, "tasksession": 0.03295456410683471, "get": 0.03099218181385895, "isinstance": 0.029658099813272398, "comments": 0.027843924599335733, "root": 0.022074197099245036, "else": 0.019768706932585464, "true": 0.019002957216652933, "none": 0.01805552781619804, "def": 0.015090949656946746, "in": 0.013789442215100626, "if": 0.011283908930546788}, "norm": 0.7716231980128639, "snippet": ", []) task.setdefault(\"comments\", []) @dataclass(slots=True) class TaskSession: \"\"\"Снимок доски задач внутри заблокированного контекста.\"\"\" root: Path board_path: Path = field(default=BOARD_PATH, init=False) state_path: Path = field(default=STATE_PATH, init=False) log_path: Path = field(default=LOG_PATH, init=False)…", "text": ", [])\n    task.setdefault(\"comments\", [])\n\n\n@dataclass(slots=True)\nclass TaskSession:\n    \"\"\"Снимок доски задач внутри заблокированного контекста.\"\"\"\n\n    root: Path\n    board_path: Path = field(default=BOARD_PATH, init=False)\n    state_path: Path = field(default=STATE_PATH, init=False)\n    log_path: Path = field(default=LOG_PATH, init=False)\n    board: dict[str, Any] = field(init=False)\n    assignments: dict[str, str] = field(init=False)\n    _tasks_map: dict[str, dict] = field(init=False, default_factory=dict)\n    _events: list[dict[str, Any]] = field(init=False, default_factory=list)\n    _board_dirty: bool = field(init=False, default=False)\n    _state_dirty: bool = field(init=False, default=False)\n\n    def __post_init__(self) -> None:\n        self.board = read_json(self.board_path, {\"version\": \"v1\", \"tasks\": []})\n        self.board.setdefault(\"version\", \"v1\")\n        self.board.setdefault(\"tasks\", [])\n        for task in self.board[\"tasks\"]:\n            normalize_task(task)\n        raw_assignments = read_json(self.state_path, {\"assignments\": {}})\n        assignments = raw_assignments.get(\"assignments\", {}) if isinstance(raw_assignments, dict) else {}\n        valid_ids = {task.get"}
{"id": "scripts/lib/sdklib/task_cli.py:169-199", "path": "scripts/lib/sdklib/task_cli.py", "start": 5000, "end": 6200, "start_line": 169, "end_line": 199, "weights": {"self": 0.9257551060088463, "assignments": 0.2467293886607364, "_tasks_map": 0.14190536729375372, "board": 0.11477007244397526, "raw_assignments": 0.0996067446732581, "valid_ids": 0.0996067446732581, "_board_dirty": 0.0996067446732581, "task_id": 0.09516381592258708, "_state_dirty": 0.09460357819583583, "_events": 0.09460357819583583, "write_json_atomic": 0.09460357819583583, "task": 0.08383305684476255, "def": 0.08070377425236737, "state_path": 0.07866808720672008, "dict": 0.0772462581353864, "none": 0.0772462581353864, "event": 0.07701051886229703, "if": 0.07241325904994372, "get": 0.06629631935834175, "in": 0.05899483104199571, "aw_assignments": 0.05332915588539569, "owner": 0.05212797758071922, "mark_state_dirty": 0.04980337233662905, "add_event": 0.04980337233662905, "commit": 0.047301789097917914, "tasks": 0.04693679517104972, "read_json": 0.04536141039083782, "mark_board_dirty": 0.043776005549151266, "now_iso": 0.043776005549151266, "true": 0.04064980413301409, "board_path": 0.04025022200038462, "mapping": 0.03705261521668621, "id": 0.036192486591603484, "any": 0.0347198848984716, "str": 0.032041625837775894, "isinstance": 0.03172127197419569, "items": 0.03007568936864327, "updated_at": 0.023899675334562876, "append": 0.021697971887774947, "else": 0.021143921327895755, "not": 0.017582426631714727, "return": 0.014646404790241657}, "norm": 1.049073328946152, "snippet": "aw_assignments = read_json(self.state_path, {\"assignments\": {}}) assignments = raw_assignments.get(\"assignments\", {}) if isinstance(raw_assignments, dict) else {} valid_ids = {task.get(\"id\") for task in self.board[\"tasks\"]} self.assignments = { task_id: owner for task_id, owner in assignments.items() if task_id in…", "text": "aw_assignments = read_json(self.state_path, {\"assignments\": {}})\n        assignments = raw_assignments.get(\"assignments\", {}) if isinstance(raw_assignments, dict) else {}\n        valid_ids = {task.get(\"id\") for task in self.board[\"tasks\"]}\n        self.assignments = {\n            task_id: owner for task_id, owner in assignments.items() if task_id in valid_ids\n        }\n\n    # -- внутренняя механика -------------------------------------------------\n\n    def mapping(self) -> dict[str, dict]:\n        if not self._tasks_map:\n            self._tasks_map = {task.get(\"id\"): task for task in self.board.get(\"tasks\", [])}\n        return self._tasks_map\n\n    def mark_board_dirty(self) -> None:\n        self._board_dirty = True\n        self.board[\"updated_at\"] = now_iso()\n\n    def mark_state_dirty(self) -> None:\n        self._state_dirty = True\n\n    def add_event(self, event: dict[str, Any]) -> None:\n        self._events.append(event)\n\n    def commit(self) -> None:\n        if self._board_dirty:\n            write_json_atomic(self.board_path, self.board)\n        if self._state_dirty:\n            write_json_atomic(self.state_path, {\"assignments\": self.assignments})\n        if self._events:\n       "}
{"id": "scripts/lib/sdklib/task_cli.py:195-230", "path": "scripts/lib/sdklib/task_cli.py", "start": 6000, "end": 7200, "start_line": 195, "end_line": 230, "weights": {"self": 0.7121193123144971, "task_id": 0.2104584390595676, "assignments": 0.15590043789002575, "str": 0.14172257582093187, "event": 0.12773379330525228, "none": 0.10677066929770958, "write_json_atomic": 0.10460972588962617, "_events": 0.10460972588962617, "action": 0.10292029526997025, "owner": 0.0864622705064814, "log_path": 0.0805181303416383, "task": 0.07416001182421303, "fh": 0.0727207244164813, "mark_state_dirty": 0.055071036718387895, "def": 0.05354385022512836, "if": 0.05338156917143288, "_state_dirty": 0.05230486294481308, "update_assignment": 0.05230486294481308, "pop": 0.05230486294481308, "ensure_task": 0.048406159982234576, "append_log_event": 0.048406159982234576, "previous_owner": 0.048406159982234576, "true": 0.04494930264708289, "board_path": 0.04450745701965607, "state_path": 0.04349437513833082, "mapping": 0.0409716418261434, "default_owner": 0.0409716418261434, "parent": 0.04025906517081915, "write": 0.03897510947250644, "note": 0.03784258028350275, "exist_ok": 0.036829498402177495, "open": 0.03430676508999008, "mkdir": 0.03201435140301895, "systemexit": 0.03201435140301895, "board": 0.03172730368042585, "parents": 0.03172730368042585, "ensure_ascii": 0.03172730368042585, "dumps": 0.031177703547349424, "raise": 0.029695485472087328, "as": 0.028820756835493802, "false": 0.0243801987137698, "encoding": 0.024249375136310394, "agent": 0.0239929496835973, "else": 0.02338029762219242, "utf": 0.02145077170428712, "dict": 0.021354133859541914, "json": 0.01984448242867975, "not": 0.01944210637160763, "get": 0.018327107514926205, "in": 0.016308667235167083, "return": 0.016195543758440293}, "norm": 0.8565580354015409, "snippet": "write_json_atomic(self.board_path, self.board) if self._state_dirty: write_json_atomic(self.state_path, {\"assignments\": self.assignments}) if self._events: self.log_path.parent.mkdir(parents=True, exist_ok=True) with self.log_path.open(\"a\", encoding=\"utf-8\") as fh: for event in self._events: fh.write(json.dumps(event,…", "text": "         write_json_atomic(self.board_path, self.board)\n        if self._state_dirty:\n            write_json_atomic(self.state_path, {\"assignments\": self.assignments})\n        if self._events:\n            self.log_path.parent.mkdir(parents=True, exist_ok=True)\n            with self.log_path.open(\"a\", encoding=\"utf-8\") as fh:\n                for event in self._events:\n                    fh.write(json.dumps(event, ensure_ascii=False) + \"\\n\")\n\n    # -- операции ------------------------------------------------------------\n\n    def ensure_task(self, task_id: str) -> dict:\n        task = self.mapping().get(task_id)\n        if not task:\n            raise SystemExit(f\"Задача {task_id} не найдена\")\n        return task\n\n    def update_assignment(self, task_id: str, owner: str) -> None:\n        if owner == DEFAULT_OWNER:\n            self.assignments.pop(task_id, None)\n        else:\n            self.assignments[task_id] = owner\n        self.mark_state_dirty()\n\n    def append_log_event(\n        self,\n        action: str,\n        *,\n        task: str,\n        agent: str,\n        note: str,\n        previous_owner: str | None = None,\n    ) -> None:\n        event = {\n            \"action\": action,\n"}
{"id": "scripts/lib/sdklib/task_cli.py:220-265", "path": "scripts/lib/sdklib/task_cli.py", "start": 7000, "end": 8200, "start_line": 220, "end_line": 265, "weights": {"rendered": 0.21212547476712373, "dep_id": 0.19320600722023515, "previous_owner": 0.18645335696860724, "exclusive": 0.1398400177264554, "deps": 0.1398400177264554, "str": 0.1364735915312677, "dep": 0.12565041706628902, "task": 0.12497335325932195, "event": 0.12300291207172442, "note": 0.10932300970789681, "session": 0.10374882372283706, "action": 0.09910843248219356, "none": 0.08225296005156885, "dict": 0.08225296005156885, "tasksession": 0.07506317379890128, "tasks_map": 0.07506317379890128, "get": 0.0705933030204565, "agent": 0.0693129657526144, "blocke": 0.056785675248338004, "not": 0.056166085073533156, "add_event": 0.053031368691780933, "global_lock": 0.053031368691780933, "dependency_status": 0.053031368691780933, "def": 0.05156074466123471, "lf": 0.050367645798708886, "contextmanager": 0.050367645798708886, "finally": 0.050367645798708886, "commit": 0.050367645798708886, "depends": 0.050367645798708886, "blockers_status": 0.050367645798708886, "task_session": 0.04830150180505879, "now_iso": 0.04661333924215181, "append": 0.04620864383507627, "self": 0.042859032685594725, "yield": 0.042859032685594725, "unknown": 0.042859032685594725, "missing": 0.039454173610360306, "if": 0.03855335551270152, "timestamp": 0.03594038081679638, "iterable": 0.0341713508467713, "blockers": 0.03140752687866022, "return": 0.03119141760884797, "sdk_root": 0.030828634684388612, "is": 0.02952235136716726, "bool": 0.02952235136716726, "join": 0.02837777770080452, "try": 0.02795682979268639, "continue": 0.02795682979268639, "dependencies": 0.022745854212161375, "status": 0.016153664281444324, "in": 0.015704642522753488}, "norm": 0.5889689109311483, "snippet": "lf, action: str, *, task: str, agent: str, note: str, previous_owner: str | None = None, ) -> None: event = { \"action\": action, \"task\": task, \"agent\": agent, \"note\": note, \"timestamp\": now_iso(), } if previous_owner is not None: event[\"previous_owner\"] = previous_owner self.add_event(event) @contextmanager def…", "text": "lf,\n        action: str,\n        *,\n        task: str,\n        agent: str,\n        note: str,\n        previous_owner: str | None = None,\n    ) -> None:\n        event = {\n            \"action\": action,\n            \"task\": task,\n            \"agent\": agent,\n            \"note\": note,\n            \"timestamp\": now_iso(),\n        }\n        if previous_owner is not None:\n            event[\"previous_owner\"] = previous_owner\n        self.add_event(event)\n\n\n@contextmanager\ndef task_session(*, exclusive: bool) -> Iterable[TaskSession]:\n    with global_lock(exclusive=exclusive):\n        session = TaskSession(SDK_ROOT)\n        try:\n            yield session\n        finally:\n            session.commit()\n\n\ndef dependency_status(task: dict, tasks_map: dict[str, dict]) -> str:\n    deps = task.get(\"dependencies\", [])\n    if not deps:\n        return \"\"\n    rendered = []\n    for dep_id in deps:\n        dep = tasks_map.get(dep_id)\n        if not dep:\n            rendered.append(f\"{dep_id}(missing)\")\n            continue\n        rendered.append(f\"{dep_id}({dep.get('status', 'unknown')})\")\n    return \"Depends: \" + \", \".join(rendered)\n\n\ndef blockers_status(task: dict) -> str:\n    blockers = task.get(\"blocke"}
{"id": "scripts/lib/sdklib/task_cli.py:259-300", "path": "scripts/lib/sdklib/task_cli.py", "start": 8000, "end": 9200, "start_line": 259, "end_line": 300, "weights": {"crit": 0.19165165396314077, "last": 0.18541244397268022, "task": 0.15063752401793273, "blockers": 0.13250050401934782, "return": 0.1315887930373274, "conflicts": 0.1277598455426186, "limit": 0.10848692648541167, "comments": 0.10702508517869672, "dict": 0.10410140256526683, "rendered": 0.08949043466738033, "get": 0.08934464913526524, "def": 0.08700875661583357, "str": 0.08636219464088035, "deque": 0.08499540228532125, "join": 0.07183124980516144, "path": 0.06787624241321646, "fh": 0.05908558858839105, "list": 0.05585973869273751, "conflicts_status": 0.04474521733369016, "success_lines": 0.04474521733369016, "failure_lines": 0.04474521733369016, "last_comment_line": 0.04474521733369016, "maxlen": 0.04474521733369016, "if": 0.04337252495178921, "depends": 0.042497701142660625, "blockers_status": 0.042497701142660625, "dep_id": 0.040754392148018355, "read_history": 0.040754392148018355, "in": 0.03975237638571977, "failure": 0.037082488794536045, "author": 0.037082488794536045, "tail": 0.037082488794536045, "unknown": 0.03616230882847055, "comment": 0.03616230882847055, "dep": 0.03533917979989379, "errors": 0.03533917979989379, "success": 0.034594569020172494, "message": 0.03166727644641148, "ignore": 0.03166727644641148, "not": 0.0315934228538624, "timestamp": 0.03032469631417195, "line": 0.03032469631417195, "open": 0.02787424663561694, "failure_criteria": 0.027579400323250947, "success_criteria": 0.02729527810316599, "continue": 0.023588575137579143, "as": 0.023416864928838713, "exists": 0.022459034287492366, "or": 0.019702617298252192, "encoding": 0.019702617298252192, "append": 0.019494271617922804, "int": 0.01929133813039733, "utf": 0.017428752009733282, "status": 0.01362965423746865}, "norm": 0.5246636255565337, "snippet": "continue rendered.append(f\"{dep_id}({dep.get('status', 'unknown')})\") return \"Depends: \" + \", \".join(rendered) def blockers_status(task: dict) -> str: blockers = task.get(\"blockers\", []) if blockers: return \"Blockers: \" + \", \".join(blockers) return \"\" def conflicts_status(task: dict) -> str: conflicts =…", "text": "    continue\n        rendered.append(f\"{dep_id}({dep.get('status', 'unknown')})\")\n    return \"Depends: \" + \", \".join(rendered)\n\n\ndef blockers_status(task: dict) -> str:\n    blockers = task.get(\"blockers\", [])\n    if blockers:\n        return \"Blockers: \" + \", \".join(blockers)\n    return \"\"\n\n\ndef conflicts_status(task: dict) -> str:\n    conflicts = task.get(\"conflicts\", [])\n    if conflicts:\n        return \"Conflicts: \" + \", \".join(conflicts)\n    return \"\"\n\n\ndef success_lines(task: dict) -> list[str]:\n    return [\"Success> \" + crit for crit in task.get(\"success_criteria\", [])]\n\n\ndef failure_lines(task: dict) -> list[str]:\n    return [\"Failure> \" + crit for crit in task.get(\"failure_criteria\", [])]\n\n\ndef last_comment_line(task: dict) -> str:\n    comments = task.get(\"comments\", [])\n    if not comments:\n        return \"\"\n    last = comments[-1]\n    return f\"Last comment: [{last['timestamp']}] {last['author']}: {last['message']}\"\n\n\ndef read_history(path: Path, limit: int) -> list[dict]:\n    if not path.exists() or limit <= 0:\n        return []\n    tail: deque[str] = deque(maxlen=limit)\n    with path.open(\"r\", encoding=\"utf-8\", errors=\"ignore\") as fh:\n        for line in fh:\n            t"}
{"id": "scripts/lib/sdklib/task_cli.py:295-329", "path": "scripts/lib/sdklib/task_cli.py", "start": 9000, "end": 10200, "start_line": 295, "end_line": 329, "weights": {"session": 0.25108959018636196, "raw": 0.18605482498244033, "events": 0.1555890934468649, "tail": 0.11966114031178018, "counts": 0.11403567263159005, "get": 0.1121187753854309, "assignments": 0.10218684164220175, "history_limit": 0.09625861880188807, "deque": 0.09142362598757243, "tasks": 0.09071817554068433, "in": 0.08551771726675848, "board": 0.08318419116212493, "limit": 0.07779454672343245, "status": 0.07330234211747846, "line": 0.0652363214825884, "fh": 0.06355424654885759, "continue": 0.050745170043867735, "maxlen": 0.04812930940094404, "updated_at": 0.046192649806297996, "compute_summary": 0.04383665710038949, "board_version": 0.04383665710038949, "read_history": 0.04383665710038949, "jsondecodeerror": 0.042304543177751223, "now_iso": 0.042304543177751223, "candidates": 0.042304543177751223, "append": 0.041937256589817125, "counter": 0.03988704677059339, "status_order": 0.03988704677059339, "unknown": 0.03889727336171622, "errors": 0.038011890877196676, "copy": 0.038011890877196676, "dict": 0.03732487262844301, "path": 0.03650486986929289, "ready": 0.0364797769545584, "mapping": 0.03580714915898246, "log_path": 0.03518439309046379, "if": 0.034989599961107266, "json": 0.03468615416105368, "ignore": 0.034062280547400584, "tasksession": 0.034062280547400584, "tasks_map": 0.034062280547400584, "backlog": 0.034062280547400584, "not": 0.03398284138902846, "loads": 0.0330725071385234, "task": 0.03240605558705107, "generated_at": 0.030655010731365583, "version": 0.030311968760607138, "open": 0.02998238293578965, "summary": 0.028779854837968865, "return": 0.028308177325677152, "10": 0.028237514324207763, "strip": 0.025952357051235983, "except": 0.025561432550102427, "try": 0.025372585021933867, "as": 0.02518788832681811, "exists": 0.02415761671259683, "or": 0.021192731211565383, "encoding": 0.021192731211565383, "int": 0.020750346896561835, "list": 0.020028141604118768, "utf": 0.018746892918032436, "def": 0.015598208468944955, "str": 0.015482298198925328}, "norm": 0.5360941607517347, "snippet": "if not path.exists() or limit <= 0: return [] tail: deque[str] = deque(maxlen=limit) with path.open(\"r\", encoding=\"utf-8\", errors=\"ignore\") as fh: for line in fh: tail.append(line) events: list[dict] = [] for raw in tail: raw = raw.strip() if not raw: continue try: events.append(json.loads(raw)) except…", "text": "if not path.exists() or limit <= 0:\n        return []\n    tail: deque[str] = deque(maxlen=limit)\n    with path.open(\"r\", encoding=\"utf-8\", errors=\"ignore\") as fh:\n        for line in fh:\n            tail.append(line)\n    events: list[dict] = []\n    for raw in tail:\n        raw = raw.strip()\n        if not raw:\n            continue\n        try:\n            events.append(json.loads(raw))\n        except json.JSONDecodeError:\n            continue\n    return events\n\n\ndef compute_summary(session: TaskSession, *, history_limit: int = 10) -> dict:\n    tasks = session.board.get(\"tasks\", [])\n    counts = Counter(task.get(\"status\", \"unknown\") for task in tasks)\n    summary = {\n        \"generated_at\": now_iso(),\n        \"board_version\": session.board.get(\"version\", \"n/a\"),\n        \"updated_at\": session.board.get(\"updated_at\"),\n        \"counts\": {status: counts.get(status, 0) for status in STATUS_ORDER},\n        \"events\": read_history(session.log_path, history_limit),\n        \"assignments\": session.assignments.copy(),\n    }\n    tasks_map = session.mapping()\n    candidates = [\n        t\n        for t in tasks\n        if t.get(\"status\") in {\"ready\", \"backlog\"}\n        and session.assignments.get("}
{"id": "scripts/lib/sdklib/task_cli.py:322-353", "path": "scripts/lib/sdklib/task_cli.py", "start": 10000, "end": 11200, "start_line": 322, "end_line": 353, "weights": {"get": 0.2242375507708618, "session": 0.18831719263977148, "tasks_map": 0.13624912218960233, "conf": 0.12691362953325366, "dep": 0.11403567263159005, "in": 0.11402362302234464, "task": 0.11342119455467875, "tasks": 0.11339771942585541, "ordered": 0.09625861880188807, "summary": 0.08633956451390659, "candidates": 0.08460908635550245, "deps": 0.08460908635550245, "conflicts": 0.08245341292162277, "mapping": 0.07161429831796493, "default_owner": 0.07161429831796493, "assignments": 0.06812456109480117, "review": 0.060623937521214276, "id": 0.05246389863068572, "compute_metrics": 0.04812930940094404, "history_limit": 0.04812930940094404, "if": 0.04665279994814302, "status_rank": 0.04571181299378622, "status": 0.04398140527048707, "next_task": 0.04383665710038949, "compute_summary": 0.04383665710038949, "break": 0.042304543177751223, "wip_by_agent": 0.042304543177751223, "ready_unassigned": 0.042304543177751223, "priority": 0.04150069379312367, "priority_rank": 0.041009159313656604, "defaultdict": 0.041009159313656604, "list": 0.040056283208237536, "copy": 0.038011890877196676, "dict": 0.03732487262844301, "lambda": 0.03721096499648806, "title": 0.036992055362961, "ready": 0.0364797769545584, "sorted": 0.03518439309046379, "index": 0.03460462106116168, "backlog": 0.034062280547400584, "tasksession": 0.034062280547400584, "100": 0.032187124654003856, "str": 0.030964596397850656, "done": 0.030311968760607138, "in_progress": 0.02966523732248841, "key": 0.029064741826840136, "board": 0.02772806372070831, "continue": 0.025372585021933867, "owner": 0.02518788832681811, "or": 0.021192731211565383, "dependencies": 0.02064329625977671, "not": 0.01699142069451423, "def": 0.015598208468944955, "return": 0.014154088662838576}, "norm": 0.5272708675894595, "snippet": ".assignments.copy(), } tasks_map = session.mapping() candidates = [ t for t in tasks if t.get(\"status\") in {\"ready\", \"backlog\"} and session.assignments.get(t.get(\"id\"), t.get(\"owner\", DEFAULT_OWNER)) == DEFAULT_OWNER ] ordered = sorted(candidates, key=lambda t: (priority_rank(t), status_rank(t), tasks.index(t))) for…", "text": ".assignments.copy(),\n    }\n    tasks_map = session.mapping()\n    candidates = [\n        t\n        for t in tasks\n        if t.get(\"status\") in {\"ready\", \"backlog\"}\n        and session.assignments.get(t.get(\"id\"), t.get(\"owner\", DEFAULT_OWNER)) == DEFAULT_OWNER\n    ]\n    ordered = sorted(candidates, key=lambda t: (priority_rank(t), status_rank(t), tasks.index(t)))\n    for task in ordered:\n        deps = [dep for dep in task.get(\"dependencies\", []) if tasks_map.get(dep, {}).get(\"status\") not in {\"done\", \"review\"}]\n        conflicts = [conf for conf in task.get(\"conflicts\", []) if tasks_map.get(conf, {}).get(\"status\") in {\"in_progress\", \"review\"}]\n        if deps or conflicts:\n            continue\n        summary[\"next_task\"] = {\n            \"id\": task.get(\"id\"),\n            \"title\": task.get(\"title\"),\n            \"priority\": task.get(\"priority\"),\n        }\n        break\n    return summary\n\n\ndef compute_metrics(session: TaskSession) -> dict:\n    summary = compute_summary(session, history_limit=100)\n    tasks = session.board.get(\"tasks\", [])\n    tasks_map = session.mapping()\n    wip_by_agent: dict[str, list[str]] = defaultdict(list)\n    ready_unassigned = 0\n    for task in tasks:\n     "}
{"id": "scripts/lib/sdklib/task_cli.py:347-372", "path": "scripts/lib/sdklib/task_cli.py", "start": 11000, "end": 12200, "start_line": 347, "end_line": 372, "weights": {"get": 0.19510432567071045, "conf": 0.11891907019257626, "owner": 0.11800624846028958, "session": 0.11763646154400423, "dep": 0.10685232317448201, "in": 0.10684103259574027, "task": 0.10627655237800608, "event": 0.10460090160430108, "default_owner": 0.10065474212406883, "tasks_map": 0.09574987523954337, "task_id": 0.08617195929998042, "review": 0.08520766021682478, "wip_by_agent": 0.07927938012838417, "ready_unassigned": 0.07927938012838417, "deps": 0.07927938012838417, "conflicts": 0.07725949714703235, "ts": 0.07685181036732498, "if": 0.0764995715685101, "events": 0.07289410283534221, "tasks": 0.06375273359847304, "not": 0.06368437992589586, "list": 0.056299579154885045, "in_progress": 0.05559312191143498, "status": 0.05494789739829881, "now": 0.05446778389596813, "datetime": 0.04980218049213864, "500": 0.048290180526145705, "assign_times": 0.04509754187962473, "cycle_durations": 0.04509754187962473, "str": 0.043521105960758595, "parse_time": 0.04283232871071307, "read_history": 0.0410752928735933, "throughput_24h": 0.0410752928735933, "defaultdict": 0.03842590518366249, "limit": 0.03644705141767111, "dict": 0.03497369954948597, "ready": 0.03418183824875945, "mapping": 0.03355158070802294, "log_path": 0.032968053368229853, "assignments": 0.03191662507984779, "backlog": 0.03191662507984779, "float": 0.030989199602238466, "timestamp": 0.030563473450504013, "100": 0.030159589242728022, "done": 0.028402553405608263, "utc": 0.028093728892590302, "board": 0.025981414037514083, "timezone": 0.025753165715677453, "continue": 0.023774311949686065, "append": 0.01964776981963873, "dependencies": 0.019342931141050616, "id": 0.01638636203950551}, "norm": 0.504033282398159, "snippet": "limit=100) tasks = session.board.get(\"tasks\", []) tasks_map = session.mapping() wip_by_agent: dict[str, list[str]] = defaultdict(list) ready_unassigned = 0 for task in tasks: task_id = task.get(\"id\") owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER)) if task.get(\"status\") in {\"in_progress\",…", "text": "limit=100)\n    tasks = session.board.get(\"tasks\", [])\n    tasks_map = session.mapping()\n    wip_by_agent: dict[str, list[str]] = defaultdict(list)\n    ready_unassigned = 0\n    for task in tasks:\n        task_id = task.get(\"id\")\n        owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER))\n        if task.get(\"status\") in {\"in_progress\", \"review\"} and owner != DEFAULT_OWNER:\n            wip_by_agent[owner].append(task_id)\n        if task.get(\"status\") in {\"ready\", \"backlog\"} and owner == DEFAULT_OWNER:\n            deps = [dep for dep in task.get(\"dependencies\", []) if tasks_map.get(dep, {}).get(\"status\") not in {\"done\", \"review\"}]\n            conflicts = [conf for conf in task.get(\"conflicts\", []) if tasks_map.get(conf, {}).get(\"status\") in {\"in_progress\", \"review\"}]\n            if not deps and not conflicts:\n                ready_unassigned += 1\n\n    events = read_history(session.log_path, 500)\n    now = datetime.now(timezone.utc)\n    assign_times: dict[str, datetime] = {}\n    cycle_durations: list[float] = []\n    throughput_24h = 0\n    for event in events:\n        ts = parse_time(event.get(\"timestamp\"))\n        if not ts:\n            continue\n        if event."}
{"id": "scripts/lib/sdklib/task_cli.py:365-393", "path": "scripts/lib/sdklib/task_cli.py", "start": 12000, "end": 13200, "start_line": 365, "end_line": 393, "weights": {"event": 0.3310732586603424, "ts": 0.27364990420514784, "cycle_durations": 0.26763494479964206, "throughput_24h": 0.19501167083911586, "assign_times": 0.16058096687978526, "get": 0.16031937041094324, "start": 0.14712629343866487, "summary": 0.12803000843806708, "avg_cycle": 0.10167674292075812, "action": 0.10003467951473742, "next_task": 0.09750583541955793, "ready_unassigned": 0.09409795585331579, "wip_by_agent": 0.09409795585331579, "ids": 0.09409795585331579, "counts": 0.08454981335301691, "sorted": 0.07826061266850824, "assign": 0.07576469878767605, "elif": 0.06981229259854456, "generated_at": 0.06818591172023372, "if": 0.06485611207744181, "hours": 0.05731638249364957, "total_seconds": 0.05731638249364957, "3600": 0.05731638249364957, "task": 0.05406056936718333, "me": 0.05352698895992841, "timedelta": 0.05352698895992841, "parse_time": 0.05083837146037906, "pop": 0.05083837146037906, "avg_cycle_time_hours": 0.05083837146037906, "in": 0.047554244648337664, "24": 0.047048977926657895, "agent": 0.046640500319516234, "grab": 0.04436036042710854, "complete": 0.04436036042710854, "events": 0.043259584392936735, "sum": 0.043259584392936735, "none": 0.041510839652193626, "assignments": 0.03788234939383803, "float": 0.03678157335966622, "timestamp": 0.03627627222629915, "release": 0.03579689564323793, "now": 0.03232433904106519, "items": 0.03232433904106519, "len": 0.02931888460996742, "continue": 0.028218108575795608, "append": 0.023320250159758117, "else": 0.02272477525895338, "list": 0.022274288326076013, "not": 0.01889700058548779, "return": 0.015741463092315798}, "norm": 0.7255640017425985, "snippet": "me] = {} cycle_durations: list[float] = [] throughput_24h = 0 for event in events: ts = parse_time(event.get(\"timestamp\")) if not ts: continue if event.get(\"action\") in {\"assign\", \"grab\"}: assign_times[event.get(\"task\", \"\")] = ts elif event.get(\"action\") == \"release\": assign_times.pop(event.get(\"task\", \"\"), None) elif…", "text": "me] = {}\n    cycle_durations: list[float] = []\n    throughput_24h = 0\n    for event in events:\n        ts = parse_time(event.get(\"timestamp\"))\n        if not ts:\n            continue\n        if event.get(\"action\") in {\"assign\", \"grab\"}:\n            assign_times[event.get(\"task\", \"\")] = ts\n        elif event.get(\"action\") == \"release\":\n            assign_times.pop(event.get(\"task\", \"\"), None)\n        elif event.get(\"action\") == \"complete\":\n            if ts >= now - timedelta(hours=24):\n                throughput_24h += 1\n            start = assign_times.get(event.get(\"task\", \"\"))\n            if start and ts >= start:\n                cycle_durations.append((ts - start).total_seconds() / 3600)\n\n    avg_cycle = sum(cycle_durations) / len(cycle_durations) if cycle_durations else None\n\n    return {\n        \"generated_at\": summary[\"generated_at\"],\n        \"counts\": summary[\"counts\"],\n        \"next_task\": summary.get(\"next_task\"),\n        \"ready_unassigned\": ready_unassigned,\n        \"throughput_24h\": throughput_24h,\n        \"avg_cycle_time_hours\": avg_cycle,\n        \"wip_by_agent\": {agent: sorted(ids) for agent, ids in sorted(wip_by_agent.items())},\n        \"assignments\": summary[\"assign"}
{"id": "scripts/lib/sdklib/task_cli.py:390-421", "path": "scripts/lib/sdklib/task_cli.py", "start": 13000, "end": 14200, "start_line": 390, "end_line": 421, "weights": {"summary": 0.21405017035739343, "session": 0.166739180983131, "items": 0.15440644095508824, "groups": 0.14570640391769357, "status": 0.14019072929967755, "get": 0.11912619884702033, "print": 0.11443393885442567, "sorted": 0.11215025297585332, "assignments": 0.10857351924483935, "counts_line": 0.09315289633832766, "wip_by_agent": 0.08989715425272134, "ids": 0.08989715425272134, "status_titles": 0.08989715425272134, "board": 0.08838320310975774, "task": 0.08607858515310442, "status_order": 0.08475997438751096, "in": 0.07571881216327575, "put_24h": 0.054757615418040216, "print_task_list": 0.05113739123850304, "updated_at": 0.049079690419191614, "avg_cycle_time_hours": 0.04856880130589786, "avg_cycle": 0.04856880130589786, "throughput_24h": 0.04657644816916383, "compute_summary": 0.04657644816916383, "board_version": 0.04657644816916383, "agent": 0.04455833512668069, "defaultdict": 0.043572231770760146, "priority_rank": 0.043572231770760146, "list": 0.04255980090875239, "counts": 0.04038763405702147, "dict": 0.039657677167720694, "compact": 0.039536650308768566, "lambda": 0.039536650308768566, "title": 0.039304058823146054, "mapping": 0.03804509598141887, "tasksession": 0.03619117308161312, "backlog": 0.03619117308161312, "tasks_map": 0.03619117308161312, "generated_at": 0.03257094890207593, "version": 0.03220646680814508, "key": 0.030881288191017642, "bool": 0.028467981675482715, "len": 0.02801000583273673, "join": 0.0273642856400615, "continue": 0.026958371585804733, "owner": 0.026762131347244242, "tasks": 0.024097015377994274, "append": 0.022279167563340346, "none": 0.019828838583860347, "id": 0.018580964098367857, "not": 0.018053384487921372, "def": 0.016573096498254013, "str": 0.01644994183635816, "if": 0.012392149986225488}, "norm": 0.5484796662919053, "snippet": "put_24h\": throughput_24h, \"avg_cycle_time_hours\": avg_cycle, \"wip_by_agent\": {agent: sorted(ids) for agent, ids in sorted(wip_by_agent.items())}, \"assignments\": summary[\"assignments\"], } def print_task_list(session: TaskSession, *, compact: bool) -> None: summary = compute_summary(session) counts_line = \" | \".join(…", "text": "put_24h\": throughput_24h,\n        \"avg_cycle_time_hours\": avg_cycle,\n        \"wip_by_agent\": {agent: sorted(ids) for agent, ids in sorted(wip_by_agent.items())},\n        \"assignments\": summary[\"assignments\"],\n    }\n\n\ndef print_task_list(session: TaskSession, *, compact: bool) -> None:\n    summary = compute_summary(session)\n    counts_line = \" | \".join(\n        f\"{STATUS_TITLES.get(status, status)}={summary['counts'].get(status, 0)}\"\n        for status in STATUS_ORDER\n    )\n    print(f\"Task Board — {summary['generated_at']}\")\n    print(f\"Board version: {summary['board_version']} (updated_at {summary['updated_at']})\")\n    print(\"Summary: \" + counts_line)\n    print()\n\n    groups: dict[str, list[dict]] = defaultdict(list)\n    for task in session.board.get(\"tasks\", []):\n        groups[task.get(\"status\", \"backlog\")].append(task)\n\n    tasks_map = session.mapping()\n\n    for status in STATUS_ORDER:\n        items = groups.get(status, [])\n        if not items:\n            continue\n        title = STATUS_TITLES.get(status, status)\n        print(f\"{title} ({len(items)}):\")\n        for task in sorted(items, key=lambda t: (priority_rank(t), t.get(\"id\"))):\n            owner = session.assignments.g"}
{"id": "scripts/lib/sdklib/task_cli.py:418-449", "path": "scripts/lib/sdklib/task_cli.py", "start": 14000, "end": 15200, "start_line": 418, "end_line": 449, "weights": {"extra_line": 0.255535538617521, "task": 0.2209350352263013, "print": 0.2136100191949279, "events": 0.19286564708517628, "extra": 0.17898086933476065, "last": 0.14832995517814418, "get": 0.13898056532152372, "owner": 0.1248899462871398, "line": 0.1212987852566878, "compact": 0.09225218405379332, "in": 0.08833861419048837, "if": 0.08674504990357843, "items": 0.0720563391123745, "id": 0.0650333743442875, "dependency_status": 0.05966028977825355, "conflicts_status": 0.05966028977825355, "success_lines": 0.05966028977825355, "failure_lines": 0.05966028977825355, "last_comment_line": 0.05966028977825355, "p3": 0.0566636015235475, "blockers_status": 0.0566636015235475, "recent": 0.0566636015235475, "status": 0.0545186169498746, "focus": 0.05433918953069114, "status_titles": 0.05244000664742078, "priority_rank": 0.05083427039922017, "blocked": 0.04821641177129407, "lambda": 0.04612609202689666, "event": 0.04612609202689666, "default_owner": 0.04438594531165535, "sorted": 0.0436139872683874, "assignments": 0.04222303526188197, "tasks_map": 0.04222303526188197, "session": 0.0389058088960639, "review": 0.037574211276169264, "in_progress": 0.03677253376433459, "key": 0.03602816955618725, "summary": 0.035675028392898905, "len": 0.03267834013819285, "continue": 0.03145143351677219, "priority": 0.025721784173863105, "title": 0.0229273676468352, "return": 0.017545172404976984}, "norm": 0.6300527994881274, "snippet": "STATUS_TITLES.get(status, status) print(f\"{title} ({len(items)}):\") for task in sorted(items, key=lambda t: (priority_rank(t), t.get(\"id\"))): owner = session.assignments.get(task.get(\"id\"), task.get(\"owner\", DEFAULT_OWNER)) line = f\" - {task['id']} [{task.get('priority','P3')}] owner={owner}\" if status in…", "text": " STATUS_TITLES.get(status, status)\n        print(f\"{title} ({len(items)}):\")\n        for task in sorted(items, key=lambda t: (priority_rank(t), t.get(\"id\"))):\n            owner = session.assignments.get(task.get(\"id\"), task.get(\"owner\", DEFAULT_OWNER))\n            line = f\"  - {task['id']} [{task.get('priority','P3')}] owner={owner}\"\n            if status in {\"in_progress\", \"blocked\", \"review\"}:\n                line += \" *focus\"\n            print(line)\n            if compact:\n                continue\n            for extra in (\n                dependency_status(task, tasks_map),\n                blockers_status(task),\n                conflicts_status(task),\n            ):\n                if extra:\n                    print(f\"      {extra}\")\n            for extra_line in success_lines(task):\n                print(f\"      {extra_line}\")\n            for extra_line in failure_lines(task):\n                print(f\"      {extra_line}\")\n            last = last_comment_line(task)\n            if last:\n                print(f\"      {last}\")\n        print()\n\n    if compact:\n        return\n    events = summary.get(\"events\", [])[-5:]\n    if events:\n        print(\"Recent events:\")\n        for event"}
{"id": "scripts/lib/sdklib/task_cli.py:440-473", "path": "scripts/lib/sdklib/task_cli.py", "start": 15000, "end": 16200, "start_line": 440, "end_line": 473, "weights": {"event": 0.23935701808551782, "get": 0.2232274717133354, "events": 0.20850340225424463, "session": 0.20188960292011537, "conflicts": 0.14732666873383046, "task": 0.13896650864357035, "print": 0.1385578502886019, "ids": 0.13606055778790258, "task_id": 0.09859314262250013, "board": 0.08917944818281862, "dep": 0.08150297323218747, "in": 0.07640096362420615, "tasksession": 0.07303443937190394, "tasks": 0.07294231681987456, "target": 0.06901383484371998, "if": 0.06251895488546193, "none": 0.0600224303079016, "systemexit": 0.0599908566831346, "len": 0.05652469645525251, "id": 0.056245080513978384, "raise": 0.05564559439814562, "ast": 0.055250927268653195, "map": 0.055250927268653195, "print_conflicts": 0.05159808845686793, "validate_board": 0.05159808845686793, "recent": 0.04900635807441946, "last": 0.04276178888018571, "compact": 0.0398928363475863, "mapping": 0.03838784459386409, "assign": 0.03651721968595197, "tasks_map": 0.03651721968595197, "note": 0.035456111256615186, "timestamp": 0.034969019173099185, "def": 0.03344480734782792, "action": 0.03214327539963034, "summary": 0.03085407861007473, "join": 0.02761081073591791, "set": 0.02761081073591791, "agent": 0.0224798807846317, "dependencies": 0.022131101395616474, "else": 0.021905864438810915, "return": 0.015174203161061176}, "norm": 0.6053305570233001, "snippet": "ast: print(f\" {last}\") print() if compact: return events = summary.get(\"events\", [])[-5:] if events: print(\"Recent events:\") for event in events: print( f\"- {event.get('timestamp', '?')} — {event.get('agent', '?')} -> {event.get('task', '?')} \" f\"[{event.get('action', 'assign')}] {event.get('note', '')}\" ) def…", "text": "ast:\n                print(f\"      {last}\")\n        print()\n\n    if compact:\n        return\n    events = summary.get(\"events\", [])[-5:]\n    if events:\n        print(\"Recent events:\")\n        for event in events:\n            print(\n                f\"- {event.get('timestamp', '?')} — {event.get('agent', '?')} -> {event.get('task', '?')} \"\n                f\"[{event.get('action', 'assign')}] {event.get('note', '')}\"\n            )\n\n\ndef print_conflicts(session: TaskSession) -> None:\n    print(\"Task Conflicts Map:\")\n    for task in session.board.get(\"tasks\", []):\n        conflicts = task.get(\"conflicts\", [])\n        target = \", \".join(conflicts) if conflicts else \"none\"\n        print(f\"- {task['id']} -> {target}\")\n\n\ndef validate_board(session: TaskSession) -> None:\n    ids = [t.get(\"id\") for t in session.board.get(\"tasks\", [])]\n    if len(ids) != len(set(ids)):\n        raise SystemExit(\"Обнаружены дублирующиеся идентификаторы задач\")\n    tasks_map = session.mapping()\n    for task in session.board.get(\"tasks\", []):\n        task_id = task.get(\"id\")\n        for dep in task.get(\"dependencies\", []):\n            if dep == task_id:\n                raise SystemExit(f\"Задача {task_id} зависит сам"}
{"id": "scripts/lib/sdklib/task_cli.py:469-491", "path": "scripts/lib/sdklib/task_cli.py", "start": 16000, "end": 17200, "start_line": 469, "end_line": 491, "weights": {"task_id": 0.3068366027410518, "blocker": 0.2292655299745983, "systemexit": 0.18670051659330675, "raise": 0.1731774106035747, "dep": 0.16909962670603382, "task": 0.16218170810155, "tasks_map": 0.1515293975753521, "conflict": 0.1462587531293369, "get": 0.14250610703194955, "session": 0.10471843889781685, "in": 0.09510848929667533, "blockers": 0.0951031655017375, "not": 0.09448500292743896, "blocked": 0.08651916878587347, "force": 0.08454981335301691, "if": 0.07782733449293018, "str": 0.06887452282886407, "board": 0.06167550621989325, "passed": 0.05731638249364957, "task_i": 0.05731638249364957, "validation": 0.05352698895992841, "assign_task": 0.048752917709778965, "ensure_task": 0.047048977926657895, "mapping": 0.03982290420484966, "tasksession": 0.03788234939383803, "note": 0.03678157335966622, "done": 0.03371144189263784, "action": 0.03334489317157914, "status": 0.03260926621300911, "conflicts": 0.030566841550383517, "bool": 0.029798261193028634, "tasks": 0.025223044133975314, "print": 0.023956263834945184, "agent": 0.023320250159758117, "dependencies": 0.022958432288910546, "none": 0.020755419826096813, "id": 0.01944923344875888, "def": 0.017347540259854667}, "norm": 0.6521230685411876, "snippet": "board.get(\"tasks\", []): task_id = task.get(\"id\") for dep in task.get(\"dependencies\", []): if dep == task_id: raise SystemExit(f\"Задача {task_id} зависит сама от себя\") if dep not in tasks_map: raise SystemExit(f\"Задача {task_id} зависит от отсутствующей задачи {dep}\") for blocker in task.get(\"blockers\", []): if…", "text": "board.get(\"tasks\", []):\n        task_id = task.get(\"id\")\n        for dep in task.get(\"dependencies\", []):\n            if dep == task_id:\n                raise SystemExit(f\"Задача {task_id} зависит сама от себя\")\n            if dep not in tasks_map:\n                raise SystemExit(f\"Задача {task_id} зависит от отсутствующей задачи {dep}\")\n        for blocker in task.get(\"blockers\", []):\n            if blocker not in tasks_map:\n                raise SystemExit(f\"Задача {task_id} ссылается на отсутствующий blocker {blocker}\")\n        for conflict in task.get(\"conflicts\", []):\n            if conflict not in tasks_map:\n                raise SystemExit(f\"Задача {task_id} конфликтует с отсутствующей задачей {conflict}\")\n        if task.get(\"status\") == \"blocked\" and not task.get(\"blockers\"):\n            raise SystemExit(f\"Задача {task_id} помечена blocked без blockers\")\n    print(\"Task board validation passed\")\n\n\ndef assign_task(session: TaskSession, task_id: str, agent: str, note: str, *, action: str, force: bool) -> None:\n    task = session.ensure_task(task_id)\n    tasks_map = session.mapping()\n    if task.get(\"status\") == \"done\" and not force:\n        raise SystemExit(f\"Задача {task_i"}
{"id": "scripts/lib/sdklib/task_cli.py:487-507", "path": "scripts/lib/sdklib/task_cli.py", "start": 17000, "end": 18200, "start_line": 487, "end_line": 507, "weights": {"force": 0.2380744744413897, "dep_id": 0.2287965874976469, "conflict_id": 0.2151878219937019, "get": 0.2006335980581395, "conflict": 0.1830372699981175, "session": 0.16381393219395324, "dep": 0.1587163162942598, "conflicts": 0.14344965113557176, "not": 0.1241566091099154, "systemexit": 0.11682429985663052, "raise": 0.108362473301652, "tasks_map": 0.10666872066159655, "assignments": 0.10666872066159655, "owner": 0.1051704810839072, "in": 0.08926849433986192, "status": 0.07651735712263101, "default_owner": 0.0747552763143669, "if": 0.07304846307669761, "task": 0.06765474762910662, "task_id": 0.06399905749179832, "done": 0.06328288214933771, "review": 0.06328288214933771, "ction": 0.053796955498425475, "task_": 0.053796955498425475, "ensure_task": 0.044160005597828025, "previous_owner": 0.044160005597828025, "agent": 0.04377660994901963, "none": 0.03896192844547998, "mapping": 0.03737763815718345, "in_progress": 0.030966344222597555, "bool": 0.027968543400474246, "join": 0.026884210453393752, "append": 0.021888304974509814, "dependencies": 0.021548703990468668, "str": 0.01616134636554486}, "norm": 0.6602536982823038, "snippet": "ction: str, force: bool) -> None: task = session.ensure_task(task_id) tasks_map = session.mapping() if task.get(\"status\") == \"done\" and not force: raise SystemExit(f\"Задача {task_id} уже завершена; используйте FORCE=1\") conflicts = [] for conflict_id in task.get(\"conflicts\", []): conflict = tasks_map.get(conflict_id)…", "text": "ction: str, force: bool) -> None:\n    task = session.ensure_task(task_id)\n    tasks_map = session.mapping()\n    if task.get(\"status\") == \"done\" and not force:\n        raise SystemExit(f\"Задача {task_id} уже завершена; используйте FORCE=1\")\n    conflicts = []\n    for conflict_id in task.get(\"conflicts\", []):\n        conflict = tasks_map.get(conflict_id)\n        if conflict and conflict.get(\"status\") in {\"in_progress\", \"review\"}:\n            owner = session.assignments.get(conflict_id, conflict.get(\"owner\", DEFAULT_OWNER))\n            if owner not in {None, DEFAULT_OWNER, agent}:\n                conflicts.append(f\"{conflict_id} ({owner})\")\n    if conflicts and not force:\n        raise SystemExit(f\"Конфликты: {', '.join(conflicts)} — укажите FORCE=1\")\n    for dep_id in task.get(\"dependencies\", []):\n        dep = tasks_map.get(dep_id)\n        if not dep:\n            raise SystemExit(f\"Несуществующая зависимость {dep_id}\")\n        if dep.get(\"status\") not in {\"done\", \"review\"} and session.assignments.get(dep_id) not in {agent} and not force:\n            raise SystemExit(f\"Зависимость {dep_id} ещё не готова (status {dep.get('status')})\")\n    previous_owner = session.assignments.get(task_"}
{"id": "scripts/lib/sdklib/task_cli.py:505-526", "path": "scripts/lib/sdklib/task_cli.py", "start": 18000, "end": 19200, "start_line": 505, "end_line": 526, "weights": {"session": 0.3305272260196579, "task_id": 0.32282710416216853, "previous_owner": 0.2673048126452599, "default_owner": 0.1885420685804829, "task": 0.18769702107721173, "note": 0.1741428473223135, "agent": 0.1545740475191047, "get": 0.13493941108335047, "owner": 0.13262649163236084, "update_assignment": 0.09627797780992141, "status": 0.09263340225111437, "dep_id": 0.0923285344238292, "mark_board_dirty": 0.08910160421508664, "append_log_event": 0.08910160421508664, "ready": 0.07683351252376018, "assignments": 0.07174179442726848, "in_progress": 0.06248076533409064, "ssignments": 0.054273034750623936, "defaul": 0.054273034750623936, "release_task": 0.050684847953206554, "print": 0.04536849965202008, "ensure_task": 0.04455080210754332, "blocked": 0.04096261531012593, "force": 0.04003022136625137, "dep": 0.04003022136625137, "backlog": 0.03587089721363424, "tasksession": 0.03587089721363424, "not": 0.035787240046852985, "release": 0.033896175520588136, "str": 0.032608734259683435, "action": 0.03157436787043335, "in": 0.030019493671811975, "systemexit": 0.029464535804548407, "raise": 0.027330358310593647, "if": 0.0245649698841992, "or": 0.022318008975011332, "none": 0.019653362136215567, "def": 0.016426431927473006}, "norm": 0.7291388785001248, "snippet": "ssignments.get(dep_id) not in {agent} and not force: raise SystemExit(f\"Зависимость {dep_id} ещё не готова (status {dep.get('status')})\") previous_owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER)) session.update_assignment(task_id, agent) task[\"owner\"] = agent if task.get(\"status\") in…", "text": "ssignments.get(dep_id) not in {agent} and not force:\n            raise SystemExit(f\"Зависимость {dep_id} ещё не готова (status {dep.get('status')})\")\n    previous_owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER))\n    session.update_assignment(task_id, agent)\n    task[\"owner\"] = agent\n    if task.get(\"status\") in {\"backlog\", \"ready\", \"blocked\"}:\n        task[\"status\"] = \"in_progress\"\n    session.mark_board_dirty()\n    session.append_log_event(action, task=task_id, agent=agent, note=note, previous_owner=previous_owner)\n    print(f\"Задача {task_id} назначена на {agent}. Предыдущий владелец: {previous_owner}\")\n\n\ndef release_task(session: TaskSession, task_id: str, note: str) -> None:\n    task = session.ensure_task(task_id)\n    previous_owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER))\n    session.update_assignment(task_id, DEFAULT_OWNER)\n    task[\"owner\"] = DEFAULT_OWNER\n    if task.get(\"status\") == \"in_progress\":\n        task[\"status\"] = \"ready\"\n    session.mark_board_dirty()\n    session.append_log_event(\"release\", task=task_id, agent=previous_owner or DEFAULT_OWNER, note=note)\n    print(f\"Задача {task_id} освобождена (owner -> {DEFAUL"}
{"id": "scripts/lib/sdklib/task_cli.py:523-553", "path": "scripts/lib/sdklib/task_cli.py", "start": 19000, "end": 20200, "start_line": 523, "end_line": 553, "weights": {"session": 0.40744992589332374, "task_id": 0.3979577756762732, "note": 0.21467063724459737, "previous_owner": 0.18306329593281437, "author": 0.1726021296618405, "task": 0.15775857060787135, "default_owner": 0.1549472999970514, "message": 0.14739677764147888, "mark_board_dirty": 0.13729747194961078, "append_log_event": 0.13729747194961078, "agent": 0.13610546002331556, "str": 0.10049419012756985, "ensure_task": 0.09153164796640718, "owner": 0.08174614666067333, "tasksession": 0.07369838882073944, "print": 0.06990873355470367, "entry": 0.06710010711729637, "sess": 0.055753208425640945, "complete_task": 0.052067161988294, "comment_task": 0.052067161988294, "def": 0.050623276576484987, "update_assignment": 0.04945187042055054, "grab_task": 0.04945187042055054, "now_iso": 0.04576582398320359, "complete": 0.04315053241546012, "comment": 0.04207977754585664, "none": 0.040378725843497436, "ready": 0.03946448597811318, "assignments": 0.03684919441036972, "setdefault": 0.03629806148476576, "timestamp": 0.03528691934740009, "release": 0.03482061667114963, "get": 0.034654894210042274, "done": 0.032792038931929536, "comments": 0.03113457023380268, "or": 0.022926681947057097, "append": 0.022684243337219263, "status": 0.015859961294508975}, "norm": 0.7969764000536178, "snippet": "ready\" session.mark_board_dirty() session.append_log_event(\"release\", task=task_id, agent=previous_owner or DEFAULT_OWNER, note=note) print(f\"Задача {task_id} освобождена (owner -> {DEFAULT_OWNER})\") def complete_task(session: TaskSession, task_id: str, agent: str, note: str) -> None: task =…", "text": "ready\"\n    session.mark_board_dirty()\n    session.append_log_event(\"release\", task=task_id, agent=previous_owner or DEFAULT_OWNER, note=note)\n    print(f\"Задача {task_id} освобождена (owner -> {DEFAULT_OWNER})\")\n\n\ndef complete_task(session: TaskSession, task_id: str, agent: str, note: str) -> None:\n    task = session.ensure_task(task_id)\n    previous_owner = session.assignments.get(task_id, task.get(\"owner\", DEFAULT_OWNER))\n    session.update_assignment(task_id, DEFAULT_OWNER)\n    task[\"owner\"] = agent\n    task[\"status\"] = \"done\"\n    session.mark_board_dirty()\n    session.append_log_event(\"complete\", task=task_id, agent=agent, note=note, previous_owner=previous_owner)\n    print(f\"Задача {task_id} отмечена как завершённая\")\n\n\ndef comment_task(session: TaskSession, task_id: str, author: str, message: str) -> None:\n    task = session.ensure_task(task_id)\n    entry = {\n        \"author\": author,\n        \"timestamp\": now_iso(),\n        \"message\": message,\n    }\n    task.setdefault(\"comments\", []).append(entry)\n    session.mark_board_dirty()\n    session.append_log_event(\"comment\", task=task_id, agent=author, note=message)\n    print(f\"Комментарий добавлен к {task_id}\")\n\n\ndef grab_task(sess"}
{"id": "scripts/lib/sdklib/task_cli.py:547-573", "path": "scripts/lib/sdklib/task_cli.py", "start": 20000, "end": 21200, "start_line": 547, "end_line": 573, "weights": {"session": 0.24693934902625683, "get": 0.1890266956911397, "force": 0.1495343806408729, "conf": 0.12481588359055526, "dep": 0.11215078548065467, "deps_blocking": 0.10136946986480173, "tasks_map": 0.10049780293737197, "in": 0.09812156815869122, "note": 0.09757756238390791, "ordered": 0.09466756725144365, "tasks": 0.08921870156480526, "candidates": 0.08321058906037017, "conflicts": 0.08109054659233975, "task": 0.0796760457615512, "default_owner": 0.07043059090775064, "agent": 0.06186611819241617, "task_id": 0.060296632678223216, "review": 0.05962188896714462, "tasksessio": 0.05068473493240087, "if": 0.04588167928784313, "grab_task": 0.04495624583686413, "status_rank": 0.04495624583686413, "add_task": 0.04495624583686413, "status": 0.043254439894115385, "assign_task": 0.043112084255754954, "print": 0.04236892942709314, "mark_board_dirty": 0.041605294530185084, "append_log_event": 0.041605294530185084, "priority_rank": 0.04033132196962923, "author": 0.039227756741327384, "grab": 0.039227756741327384, "comment": 0.03825434322350604, "lambda": 0.036595907723818835, "ready": 0.03587680543464835, "mapping": 0.03521529545387532, "sorted": 0.034602832874092486, "id": 0.03439781783499504, "index": 0.03403264385353918, "message": 0.033499267645790656, "tasksession": 0.033499267645790656, "backlog": 0.033499267645790656, "assignments": 0.033499267645790656, "not": 0.03342114153135858, "def": 0.03068077368271818, "entry": 0.030500048689680172, "str": 0.03045278488714238, "done": 0.02981094448357231, "action": 0.029486806358338582, "in_progress": 0.02917490282129026, "key": 0.028584332871024597, "board": 0.027269748617886686, "bool": 0.026350528493008795, "continue": 0.024953203451323392, "owner": 0.024771559594143434, "or": 0.02084243813368827, "append": 0.020622039397472057, "dependencies": 0.02030208475135065, "none": 0.018353966292498837, "return": 0.013920136784113971}, "norm": 0.537685140909572, "snippet": ", []).append(entry) session.mark_board_dirty() session.append_log_event(\"comment\", task=task_id, agent=author, note=message) print(f\"Комментарий добавлен к {task_id}\") def grab_task(session: TaskSession, agent: str, note: str, *, force: bool) -> None: tasks = session.board.get(\"tasks\", []) tasks_map =…", "text": ", []).append(entry)\n    session.mark_board_dirty()\n    session.append_log_event(\"comment\", task=task_id, agent=author, note=message)\n    print(f\"Комментарий добавлен к {task_id}\")\n\n\ndef grab_task(session: TaskSession, agent: str, note: str, *, force: bool) -> None:\n    tasks = session.board.get(\"tasks\", [])\n    tasks_map = session.mapping()\n    candidates = [\n        t\n        for t in tasks\n        if t.get(\"status\") in {\"ready\", \"backlog\"}\n        and session.assignments.get(t.get(\"id\"), t.get(\"owner\", DEFAULT_OWNER)) == DEFAULT_OWNER\n    ]\n    ordered = sorted(candidates, key=lambda t: (priority_rank(t), status_rank(t), tasks.index(t)))\n    for task in ordered:\n        deps_blocking = [dep for dep in task.get(\"dependencies\", []) if tasks_map.get(dep, {}).get(\"status\") not in {\"done\", \"review\"}]\n        conflicts = [conf for conf in task.get(\"conflicts\", []) if tasks_map.get(conf, {}).get(\"status\") in {\"in_progress\", \"review\"}]\n        if (deps_blocking or conflicts) and not force:\n            continue\n        assign_task(session, task.get(\"id\"), agent, note, action=\"grab\", force=force)\n        return\n    print(\"Нет доступных задач для захвата\")\n\n\ndef add_task(session: TaskSessio"}
{"id": "scripts/lib/sdklib/task_cli.py:567-599", "path": "scripts/lib/sdklib/task_cli.py", "start": 21000, "end": 22200, "start_line": 567, "end_line": 599, "weights": {"args": 0.3333391855903527, "next_id": 0.32116193375957053, "max_num": 0.2292655299745983, "id": 0.13614463414131214, "tid": 0.11463276498729914, "session": 0.10471843889781685, "tasks": 0.10089217653590125, "get": 0.08906631689496847, "existing": 0.08651916878587347, "force": 0.08454981335301691, "blockers": 0.06340211033449165, "03d": 0.05731638249364957, "ar": 0.05731638249364957, "continue": 0.056436217151591216, "new_task": 0.05352698895992841, "add_task": 0.05083837146037906, "assign_task": 0.048752917709778965, "in": 0.047554244648337664, "priority": 0.04615497720917492, "dependencies": 0.04591686457782109, "namespace": 0.04560831736752464, "exception": 0.04560831736752464, "size": 0.04560831736752464, "grab": 0.04436036042710854, "failure": 0.04436036042710854, "epic": 0.0439002484654625, "max": 0.0413841573325428, "success": 0.0413841573325428, "title": 0.04114069708590989, "startswith": 0.03982290420484966, "default_owner": 0.03982290420484966, "split": 0.03913030633425412, "if": 0.03891366724646509, "tasksession": 0.03788234939383803, "setdefault": 0.03731576414321714, "any": 0.03731576414321714, "note": 0.03678157335966622, "isinstance": 0.03409295586011686, "action": 0.03334489317157914, "failure_criteria": 0.03299217982594506, "success_criteria": 0.03265229530098361, "status": 0.03260926621300911, "argparse": 0.03200750210951677, "systemexit": 0.03111675276555112, "board": 0.030837753109946624, "conflicts": 0.030566841550383517, "raise": 0.028862901767262448, "except": 0.028428135266001762, "try": 0.028218108575795608, "owner": 0.028012698232629488, "print": 0.023956263834945184, "agent": 0.023320250159758117, "int": 0.02307748860458746, "size_points": 0.02272477525895338, "none": 0.020755419826096813, "not": 0.01889700058548779, "task": 0.01802018978906111, "def": 0.017347540259854667, "str": 0.017218630707216017, "return": 0.015741463092315798}, "norm": 0.6450123489489205, "snippet": "continue assign_task(session, task.get(\"id\"), agent, note, action=\"grab\", force=force) return print(\"Нет доступных задач для захвата\") def add_task(session: TaskSession, args: argparse.Namespace) -> None: tasks = session.board.setdefault(\"tasks\", []) next_id = args.id if not next_id: existing = [t.get(\"id\") for t in…", "text": "           continue\n        assign_task(session, task.get(\"id\"), agent, note, action=\"grab\", force=force)\n        return\n    print(\"Нет доступных задач для захвата\")\n\n\ndef add_task(session: TaskSession, args: argparse.Namespace) -> None:\n    tasks = session.board.setdefault(\"tasks\", [])\n    next_id = args.id\n    if not next_id:\n        existing = [t.get(\"id\") for t in tasks if isinstance(t.get(\"id\"), str) and t.get(\"id\", \"\").startswith(\"T-\")]\n        max_num = 0\n        for tid in existing:\n            try:\n                max_num = max(max_num, int(tid.split(\"-\", 1)[1]))\n            except Exception:\n                continue\n        next_id = f\"T-{max_num + 1:03d}\"\n    if any(t.get(\"id\") == next_id for t in tasks):\n        raise SystemExit(f\"Задача {next_id} уже существует\")\n    new_task = {\n        \"id\": next_id,\n        \"title\": args.title,\n        \"epic\": args.epic,\n        \"status\": args.status,\n        \"priority\": args.priority,\n        \"size_points\": args.size,\n        \"owner\": DEFAULT_OWNER,\n        \"success_criteria\": args.success,\n        \"failure_criteria\": args.failure,\n        \"blockers\": args.blockers,\n        \"dependencies\": args.dependencies,\n        \"conflicts\": ar"}
{"id": "scripts/lib/sdklib/task_cli.py:594-632", "path": "scripts/lib/sdklib/task_cli.py", "start": 22000, "end": 23200, "start_line": 594, "end_line": 632, "weights": {"value": 0.24130494958562623, "args": 0.22621961643658187, "str": 0.1285390803957289, "session": 0.11581264043479486, "or": 0.0977494191541194, "item": 0.09576627689019164, "note": 0.09152624068568105, "new_task": 0.08879671036763319, "next_id": 0.08879671036763319, "task_id": 0.08483595993098848, "environ": 0.07743005920730163, "def": 0.07194522510869959, "os": 0.07182163928132748, "none": 0.06886294329898787, "return": 0.06528436243712367, "task": 0.05978791650944306, "agent": 0.05802945969986323, "default": 0.05309771667780302, "blockers": 0.05258934733171014, "big_task": 0.05115720283355486, "conflicts": 0.05070778365722537, "strip": 0.04788109285421832, "get": 0.04432602747796105, "normalize_task": 0.04216826159891907, "_tasks_map": 0.04216826159891907, "ensure_task_arg": 0.04216826159891907, "pick_note": 0.04216826159891907, "parse_csv": 0.04216826159891907, "history_command": 0.04216826159891907, "ensure_agent": 0.04043846662749108, "json_output": 0.04043846662749108, "mark_board_dirty": 0.03902512122598756, "append_log_event": 0.03902512122598756, "dependencies": 0.03808608147152602, "failure": 0.03679502764109003, "limit": 0.03588198085305605, "success": 0.034326394066527745, "add": 0.034326394066527745, "default_owner": 0.03303140116216212, "split": 0.0324569207578697, "if": 0.03227722787109895, "tasksession": 0.031421793683261, "not": 0.0313485125991813, "failure_criteria": 0.027365606522295513, "success_criteria": 0.027083686800040672, "comments": 0.02654885833890151, "systemexit": 0.02581001973576721, "bool": 0.024716387191116778, "raise": 0.02394054642710916, "gpt": 0.02213727282037464, "codex": 0.02104749025741968, "tasks": 0.020921439708026037, "print": 0.019870699459993292, "append": 0.01934315323328774, "int": 0.019141792873572545, "list": 0.018475572487520416, "title": 0.017062227086016894, "id": 0.016132309914862017, "in": 0.013148072809747106}, "norm": 0.5224123532827885, "snippet": "DEFAULT_OWNER, \"success_criteria\": args.success, \"failure_criteria\": args.failure, \"blockers\": args.blockers, \"dependencies\": args.dependencies, \"conflicts\": args.conflicts, \"big_task\": args.big_task, \"comments\": [], } normalize_task(new_task) tasks.append(new_task) session._tasks_map = {} # сброс кэша…", "text": "DEFAULT_OWNER,\n        \"success_criteria\": args.success,\n        \"failure_criteria\": args.failure,\n        \"blockers\": args.blockers,\n        \"dependencies\": args.dependencies,\n        \"conflicts\": args.conflicts,\n        \"big_task\": args.big_task,\n        \"comments\": [],\n    }\n    normalize_task(new_task)\n    tasks.append(new_task)\n    session._tasks_map = {}  # сброс кэша\n    session.mark_board_dirty()\n    session.append_log_event(\"add\", task=next_id, agent=args.agent, note=args.note)\n    print(f\"Добавлена задача {next_id}: {args.title}\")\n\n\ndef ensure_task_arg(value: str | None) -> str:\n    task_id = value or os.environ.get(\"TASK\")\n    if not task_id:\n        raise SystemExit(\"Укажите TASK=<id> или аргумент --task\")\n    return task_id\n\n\ndef ensure_agent(value: str | None) -> str:\n    return value or os.environ.get(\"AGENT\") or \"gpt-5-codex\"\n\n\ndef pick_note(value: str | None, default: str) -> str:\n    return value or os.environ.get(\"NOTE\") or default\n\n\ndef parse_csv(value: str | None) -> list[str]:\n    if not value:\n        return []\n    return [item.strip() for item in value.split(\",\") if item.strip()]\n\n\ndef history_command(session: TaskSession, *, limit: int, json_output: bool) -"}
{"id": "scripts/lib/sdklib/task_cli.py:626-658", "path": "scripts/lib/sdklib/task_cli.py", "start": 23000, "end": 24200, "start_line": 626, "end_line": 658, "weights": {"event": 0.2310315565868911, "summary": 0.20846625286980927, "json_output": 0.18144564156335127, "events": 0.16100088800153847, "print": 0.15602818793368647, "session": 0.12991157057468294, "get": 0.11601855887709807, "item": 0.10742478016378018, "counts_line": 0.09072282078167564, "limit": 0.08050044400076924, "tasksession": 0.07049411104592468, "status": 0.06068159103986043, "if": 0.06034438254161977, "value": 0.06015137873728654, "ensure_ascii": 0.05738503622198763, "board": 0.05738503622198763, "dumps": 0.05639097685085809, "bool": 0.05545067735050547, "strip": 0.05371009546255795, "empty": 0.05332915588539569, "summary_command": 0.04980337233662905, "updated_at": 0.04779935066912575, "history_command": 0.047301789097917914, "read_history": 0.04536141039083782, "history": 0.04536141039083782, "compute_summary": 0.04536141039083782, "board_version": 0.04536141039083782, "in": 0.04424612328149678, "false": 0.04409635941273146, "return": 0.04393921437072497, "status_titles": 0.043776005549151266, "status_order": 0.04127442231044012, "counts": 0.03933404360336004, "none": 0.0386231290676932, "max": 0.03850525943114851, "split": 0.0364081980675234, "log_path": 0.0364081980675234, "json": 0.03589262908839468, "assign": 0.03524705552296234, "not": 0.035164853263429455, "note": 0.03422285521290683, "timestamp": 0.03375270546273052, "task": 0.03353322273790502, "def": 0.03228150970094695, "generated_at": 0.03172127197419569, "version": 0.03136629810880217, "action": 0.03102524842920842, "is": 0.027725338675252734, "join": 0.026650434710320765, "agent": 0.021697971887774947, "int": 0.021472098092963986, "else": 0.021143921327895755, "list": 0.020724772616435946, "str": 0.016020812918887947}, "norm": 0.5636410419408342, "snippet": "-> list[str]: if not value: return [] return [item.strip() for item in value.split(\",\") if item.strip()] def history_command(session: TaskSession, *, limit: int, json_output: bool) -> None: events = read_history(session.log_path, max(1, limit)) if json_output: print(json.dumps(events, ensure_ascii=False)) else: if not…", "text": "-> list[str]:\n    if not value:\n        return []\n    return [item.strip() for item in value.split(\",\") if item.strip()]\n\n\ndef history_command(session: TaskSession, *, limit: int, json_output: bool) -> None:\n    events = read_history(session.log_path, max(1, limit))\n    if json_output:\n        print(json.dumps(events, ensure_ascii=False))\n    else:\n        if not events:\n            print(\"History is empty\")\n        for event in events:\n            print(\n                f\"- {event.get('timestamp', '?')} — {event.get('agent', '?')} -> {event.get('task', '?')} \"\n                f\"[{event.get('action', 'assign')}] {event.get('note', '')}\"\n            )\n\n\ndef summary_command(session: TaskSession, *, json_output: bool) -> None:\n    summary = compute_summary(session)\n    if json_output:\n        print(json.dumps(summary, ensure_ascii=False))\n        return\n    counts_line = \" | \".join(\n        f\"{STATUS_TITLES.get(status, status)}={summary['counts'].get(status, 0)}\"\n        for status in STATUS_ORDER\n    )\n    print(f\"Task Board — {summary['generated_at']}\")\n    print(f\"Board version: {summary['board_version']} (updated_at {summary['updated_at']})\")\n    print(\"Summary: \" + counts_line)\n "}
{"id": "scripts/lib/sdklib/task_cli.py:653-683", "path": "scripts/lib/sdklib/task_cli.py", "start": 24000, "end": 25200, "start_line": 653, "end_line": 683, "weights": {"print": 0.2610789123493563, "event": 0.24600582414344885, "summary": 0.22197795444470428, "events": 0.21429516342797364, "nt": 0.20147058319483555, "get": 0.1588349317960271, "counts_line": 0.14490450541517635, "metrics": 0.14480513345579688, "next_task": 0.09660300361011757, "json_output": 0.09660300361011757, "counts": 0.08376694471085934, "session": 0.06916588248189137, "generated_at": 0.06755456068578712, "status": 0.0646146571257773, "board": 0.061104436717857195, "tus_order": 0.056785675248338004, "thro": 0.056785675248338004, "task": 0.05356000853970941, "metrics_command": 0.053031368691780933, "compute_metrics": 0.053031368691780933, "updated_at": 0.05089745673101353, "recent": 0.050367645798708886, "board_version": 0.04830150180505879, "next": 0.04830150180505879, "status_titles": 0.04661333924215181, "ready_unassigned": 0.04661333924215181, "status_order": 0.043949616349079755, "ready": 0.040195309792522685, "if": 0.03855335551270152, "assign": 0.03753158689945064, "tasksession": 0.03753158689945064, "note": 0.0364410032359656, "timestamp": 0.03594038081679638, "unassigned": 0.034582941240945686, "version": 0.03339929891215045, "action": 0.03303614416073119, "in": 0.031409285045506975, "ensure_ascii": 0.030552218358928598, "dumps": 0.03002297378633648, "bool": 0.02952235136716726, "join": 0.02837777770080452, "false": 0.023477228391037584, "agent": 0.023104321917538136, "priority": 0.022863808154544984, "none": 0.02056324001289221, "title": 0.0203798823527424, "id": 0.019269147953862965, "json": 0.019109501597987907, "def": 0.01718691488707824, "return": 0.015595708804423986}, "norm": 0.6525138241084205, "snippet": "TUS_ORDER ) print(f\"Task Board — {summary['generated_at']}\") print(f\"Board version: {summary['board_version']} (updated_at {summary['updated_at']})\") print(\"Summary: \" + counts_line) if summary.get(\"next_task\"): nt = summary[\"next_task\"] print(f\"Next task: {nt['id']} ({nt['priority']}) — {nt['title']}\") events =…", "text": "TUS_ORDER\n    )\n    print(f\"Task Board — {summary['generated_at']}\")\n    print(f\"Board version: {summary['board_version']} (updated_at {summary['updated_at']})\")\n    print(\"Summary: \" + counts_line)\n    if summary.get(\"next_task\"):\n        nt = summary[\"next_task\"]\n        print(f\"Next task: {nt['id']} ({nt['priority']}) — {nt['title']}\")\n    events = summary.get(\"events\", [])[-5:]\n    if events:\n        print(\"Recent events:\")\n        for event in events:\n            print(\n                f\"- {event.get('timestamp', '?')} — {event.get('agent', '?')} -> {event.get('task', '?')} \"\n                f\"[{event.get('action', 'assign')}] {event.get('note', '')}\"\n            )\n\n\ndef metrics_command(session: TaskSession, *, json_output: bool) -> None:\n    metrics = compute_metrics(session)\n    if json_output:\n        print(json.dumps(metrics, ensure_ascii=False))\n        return\n    print(f\"Metrics — {metrics['generated_at']}\")\n    counts_line = \" | \".join(\n        f\"{STATUS_TITLES.get(status, status)}={metrics['counts'].get(status, 0)}\"\n        for status in STATUS_ORDER\n    )\n    print(\"Counts: \" + counts_line)\n    print(f\"Ready unassigned: {metrics['ready_unassigned']}\")\n    print(f\"Thro"}
{"id": "scripts/lib/sdklib/task_cli.py:678-706", "path": "scripts/lib/sdklib/task_cli.py", "start": 25000, "end": 26200, "start_line": 678, "end_line": 706, "weights": {"next_task": 0.2769856032714876, "metrics": 0.1614641311100036, "print": 0.1587897487820703, "avg_cycle": 0.14441696671488213, "ids": 0.13365240632262995, "sub": 0.11312524114828974, "list_parser": 0.10854606950124787, "status_parser": 0.10136969590641311, "wip_by_agent": 0.08910160421508664, "counts": 0.08006044273250273, "add_parser": 0.07837353689525804, "compact": 0.07837353689525804, "argumentparser": 0.07410518190734851, "store_true": 0.07410518190734851, "add_argument": 0.06779235104117627, "agent": 0.06624602036533059, "parser": 0.06610544520393158, "help": 0.0645654208324337, "action": 0.0631487357408667, "status": 0.06175560150074291, "argparse": 0.0606159774463415, "throughput": 0.054273034750623936, "24h": 0.054273034750623936, "avg": 0.054273034750623936, "2f": 0.054273034750623936, "wip": 0.054273034750623936, "summar": 0.054273034750623936, "task": 0.051190096657421386, "prog": 0.050684847953206554, "get": 0.050602279156256424, "avg_cycle_time_hours": 0.048138988904960704, "counts_line": 0.0461642672119146, "throughput_24h": 0.0461642672119146, "cycle": 0.0461642672119146, "next": 0.0461642672119146, "ready_unassigned": 0.04455080210754332, "time": 0.04455080210754332, "build_parser": 0.04318663679933749, "list": 0.04218316550248024, "status_order": 0.042004943059297466, "add_subparsers": 0.042004943059297466, "ready": 0.03841675626188009, "by": 0.03841675626188009, "dest": 0.037052590953674254, "required": 0.037052590953674254, "if": 0.0368474548262988, "plane": 0.036442034568833985, "description": 0.03587089721363424, "control": 0.0348285694644627, "unassigned": 0.03305272260196579, "items": 0.03060800245481395, "in": 0.030019493671811975, "board": 0.029200350289949457, "is": 0.028216052634106762, "len": 0.027762129674924904, "join": 0.027122123820237945, "command": 0.02346560033172401, "priority": 0.02185213522735273, "true": 0.020684634846445223, "none": 0.019653362136215567, "title": 0.019478117646868843, "id": 0.018416530787762835, "not": 0.017893620023426492, "def": 0.016426431927473006}, "norm": 0.5794166341844837, "snippet": "status)}={metrics['counts'].get(status, 0)}\" for status in STATUS_ORDER ) print(\"Counts: \" + counts_line) print(f\"Ready unassigned: {metrics['ready_unassigned']}\") print(f\"Throughput 24h: {metrics['throughput_24h']}\") avg_cycle = metrics.get(\"avg_cycle_time_hours\") if avg_cycle is not None: print(f\"Avg cycle time (h):…", "text": "status)}={metrics['counts'].get(status, 0)}\"\n        for status in STATUS_ORDER\n    )\n    print(\"Counts: \" + counts_line)\n    print(f\"Ready unassigned: {metrics['ready_unassigned']}\")\n    print(f\"Throughput 24h: {metrics['throughput_24h']}\")\n    avg_cycle = metrics.get(\"avg_cycle_time_hours\")\n    if avg_cycle is not None:\n        print(f\"Avg cycle time (h): {avg_cycle:.2f}\")\n    next_task = metrics.get(\"next_task\")\n    if next_task:\n        print(f\"Next task: {next_task['id']} ({next_task['priority']}) — {next_task['title']}\")\n    if metrics[\"wip_by_agent\"]:\n        print(\"WIP by agent:\")\n        for agent, ids in metrics[\"wip_by_agent\"].items():\n            print(f\"  - {agent}: {len(ids)} -> {', '.join(ids)}\")\n\n\ndef build_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(prog=\"task\", description=\"Task board control plane\")\n    sub = parser.add_subparsers(dest=\"command\", required=True)\n\n    list_parser = sub.add_parser(\"list\", help=\"Показать доску задач\")\n    list_parser.add_argument(\"--compact\", action=\"store_true\")\n\n    status_parser = sub.add_parser(\"status\", help=\"Синоним list\")\n    status_parser.add_argument(\"--compact\", action=\"store_true\")\n\n    summar"}
{"id": "scripts/lib/sdklib/task_cli.py:701-728", "path": "scripts/lib/sdklib/task_cli.py", "start": 26000, "end": 27200, "start_line": 701, "end_line": 728, "weights": {"add_argument": 0.5958194408174492, "add_parser": 0.3444081538008284, "assign_parser": 0.34071405149002804, "select_parser": 0.34071405149002804, "sub": 0.3314150583270266, "help": 0.2837291548803059, "store_true": 0.2791295185176794, "action": 0.23786023795726455, "grab_parser": 0.19091292729041137, "summary_parser": 0.1362856205960112, "metrics_parser": 0.1362856205960112, "status_parser": 0.12727528486027426, "force": 0.10052033365303123, "compact": 0.09840232965737954, "assign": 0.09007580855868154, "note": 0.08745840776631746, "agent": 0.0831755589031373, "st_parser": 0.0681428102980056, "select": 0.060441174958450666, "grab": 0.05273953961889571, "json": 0.04586280383517098, "task": 0.04284800683176753, "summary": 0.038053363619092166, "conflicts": 0.036340578287678185, "metrics": 0.028961026691159377, "list": 0.026481653898779264, "not": 0.022466434029413264, "status": 0.019384397137733194}, "norm": 1.0876984427698762, "snippet": "st_parser.add_argument(\"--compact\", action=\"store_true\") status_parser = sub.add_parser(\"status\", help=\"Синоним list\") status_parser.add_argument(\"--compact\", action=\"store_true\") summary_parser = sub.add_parser(\"summary\", help=\"Краткое резюме доски\") summary_parser.add_argument(\"--json\", action=\"store_true\")…", "text": "st_parser.add_argument(\"--compact\", action=\"store_true\")\n\n    status_parser = sub.add_parser(\"status\", help=\"Синоним list\")\n    status_parser.add_argument(\"--compact\", action=\"store_true\")\n\n    summary_parser = sub.add_parser(\"summary\", help=\"Краткое резюме доски\")\n    summary_parser.add_argument(\"--json\", action=\"store_true\")\n\n    metrics_parser = sub.add_parser(\"metrics\", help=\"Метрики эффективности\")\n    metrics_parser.add_argument(\"--json\", action=\"store_true\")\n\n    sub.add_parser(\"conflicts\", help=\"Карта конфликтов\")\n\n    assign_parser = sub.add_parser(\"assign\", help=\"Назначить задачу агенту\")\n    assign_parser.add_argument(\"--task\")\n    assign_parser.add_argument(\"--agent\")\n    assign_parser.add_argument(\"--note\")\n    assign_parser.add_argument(\"--force\", action=\"store_true\")\n\n    select_parser = sub.add_parser(\"select\", help=\"Алиас assign\")\n    select_parser.add_argument(\"--task\")\n    select_parser.add_argument(\"--agent\")\n    select_parser.add_argument(\"--note\")\n    select_parser.add_argument(\"--force\", action=\"store_true\")\n\n    grab_parser = sub.add_parser(\"grab\", help=\"Автозахват доступной задачи\")\n    grab_parser.add_argument(\"--agent\")\n    grab_parser.add_argument(\"--not"}
{"id": "scripts/lib/sdklib/task_cli.py:724-752", "path": "scripts/lib/sdklib/task_cli.py", "start": 27000, "end": 28200, "start_line": 724, "end_line": 752, "weights": {"add_argument": 0.6025140412760722, "add_parser": 0.34827790833791633, "sub": 0.28726184830914026, "complete_parser": 0.2756338394076631, "comment_parser": 0.2756338394076631, "grab_parser": 0.2574106884814535, "help": 0.24592896249657334, "release_parser": 0.20672537955574735, "history_parser": 0.19305801636109013, "store_true": 0.14113290262129857, "validate_parser": 0.13781691970383156, "note": 0.13266162975789725, "action": 0.1202664124503023, "limit": 0.10401742764144338, "force": 0.10164977560418888, "task": 0.06499416766616423, "set_defaults": 0.06112028928382651, "validate": 0.0586130583701837, "history": 0.0586130583701837, "agent": 0.05607341049649705, "int": 0.055489691700918164, "grab": 0.05333211871573723, "complete": 0.05333211871573723, "author": 0.05333211871573723, "comment": 0.05200871382072169, "message": 0.04554394814764797, "release": 0.04303671723400516, "default": 0.03848092950245275, "10": 0.0377557775795587, "environ": 0.03741002860577494, "os": 0.034700342574124514, "type": 0.03187658495299074, "json": 0.023189058118906675, "get": 0.021415945860138487}, "norm": 1.030244868248457, "snippet": "r.add_argument(\"--force\", action=\"store_true\") grab_parser = sub.add_parser(\"grab\", help=\"Автозахват доступной задачи\") grab_parser.add_argument(\"--agent\") grab_parser.add_argument(\"--note\") grab_parser.add_argument(\"--force\", action=\"store_true\") release_parser = sub.add_parser(\"release\", help=\"Освободить задачу\")…", "text": "r.add_argument(\"--force\", action=\"store_true\")\n\n    grab_parser = sub.add_parser(\"grab\", help=\"Автозахват доступной задачи\")\n    grab_parser.add_argument(\"--agent\")\n    grab_parser.add_argument(\"--note\")\n    grab_parser.add_argument(\"--force\", action=\"store_true\")\n\n    release_parser = sub.add_parser(\"release\", help=\"Освободить задачу\")\n    release_parser.add_argument(\"--task\")\n    release_parser.add_argument(\"--note\")\n\n    complete_parser = sub.add_parser(\"complete\", help=\"Завершить задачу\")\n    complete_parser.add_argument(\"--task\")\n    complete_parser.add_argument(\"--agent\")\n    complete_parser.add_argument(\"--note\")\n\n    comment_parser = sub.add_parser(\"comment\", help=\"Добавить комментарий\")\n    comment_parser.add_argument(\"--task\")\n    comment_parser.add_argument(\"--author\")\n    comment_parser.add_argument(\"--message\")\n\n    validate_parser = sub.add_parser(\"validate\", help=\"Проверить целостность\")\n    validate_parser.set_defaults()\n\n    history_parser = sub.add_parser(\"history\", help=\"История событий\")\n    history_parser.add_argument(\"--limit\", type=int, default=int(os.environ.get(\"LIMIT\", \"10\")))\n    history_parser.add_argument(\"--json\", action=\"store_true\")\n\n    add_parser ="}
{"id": "scripts/lib/sdklib/task_cli.py:748-780", "path": "scripts/lib/sdklib/task_cli.py", "start": 28000, "end": 29200, "start_line": 748, "end_line": 780, "weights": {"add_parser": 0.6269882951620643, "add_argument": 0.5423388083294102, "argv": 0.17842110820782603, "history_parser": 0.10136969590641311, "parser": 0.09915816780589737, "command": 0.09386240132689604, "limit": 0.08192523062025187, "int": 0.06555640568205819, "none": 0.0589600864086467, "conflicts": 0.05788764682992985, "args": 0.05738904723759894, "elp": 0.054273034750623936, "type": 0.050212673642764175, "history": 0.0461642672119146, "task_session": 0.0461642672119146, "exclusive": 0.04455080210754332, "size": 0.04318663679933749, "build_parser": 0.04318663679933749, "list": 0.04218316550248024, "failure": 0.042004943059297466, "add": 0.03918676844762902, "success": 0.03918676844762902, "sub": 0.03770841371609658, "store_true": 0.037052590953674254, "if": 0.0368474548262988, "parse_args": 0.036442034568833985, "float": 0.0348285694644627, "note": 0.0348285694644627, "session": 0.03305272260196579, "help": 0.03228271041621685, "action": 0.03157436787043335, "status": 0.030877800750371456, "default": 0.03030798872317075, "summary": 0.03030798872317075, "blockers": 0.030017813299958444, "10": 0.029736851367971006, "environ": 0.029464535804548407, "big": 0.02869452361879947, "main": 0.02869452361879947, "is": 0.028216052634106762, "os": 0.027330358310593647, "as": 0.02652529832647217, "sys": 0.02417394287750752, "metrics": 0.02306630444428623, "false": 0.022438412975504946, "agent": 0.02208200678844353, "priority": 0.02185213522735273, "dependencies": 0.021739400485959542, "else": 0.021518150023964705, "epic": 0.020784630910639326, "title": 0.019478117646868843, "id": 0.018416530787762835, "json": 0.018263948429935346, "not": 0.017893620023426492, "task": 0.017063365552473793, "get": 0.01686742638541881, "def": 0.016426431927473006, "str": 0.016304367129841717, "in": 0.015009746835905988, "return": 0.014905633193608766}, "norm": 0.9046805877916037, "snippet": "elp=\"История событий\") history_parser.add_argument(\"--limit\", type=int, default=int(os.environ.get(\"LIMIT\", \"10\"))) history_parser.add_argument(\"--json\", action=\"store_true\") add_parser = sub.add_parser(\"add\", help=\"Добавить задачу\") add_parser.add_argument(\"--title\") add_parser.add_argument(\"--epic\")…", "text": "elp=\"История событий\")\n    history_parser.add_argument(\"--limit\", type=int, default=int(os.environ.get(\"LIMIT\", \"10\")))\n    history_parser.add_argument(\"--json\", action=\"store_true\")\n\n    add_parser = sub.add_parser(\"add\", help=\"Добавить задачу\")\n    add_parser.add_argument(\"--title\")\n    add_parser.add_argument(\"--epic\")\n    add_parser.add_argument(\"--priority\")\n    add_parser.add_argument(\"--size\", type=float)\n    add_parser.add_argument(\"--status\")\n    add_parser.add_argument(\"--blockers\")\n    add_parser.add_argument(\"--dependencies\")\n    add_parser.add_argument(\"--conflicts\")\n    add_parser.add_argument(\"--success\")\n    add_parser.add_argument(\"--failure\")\n    add_parser.add_argument(\"--big-task\")\n    add_parser.add_argument(\"--id\")\n    add_parser.add_argument(\"--agent\")\n    add_parser.add_argument(\"--note\")\n\n    return parser\n\n\ndef main(argv: list[str] | None = None) -> int:\n    argv = argv if argv is not None else sys.argv[1:]\n    parser = build_parser()\n    args = parser.parse_args(argv)\n\n    command = args.command\n\n    if command in {\"list\", \"status\", \"summary\", \"conflicts\", \"history\", \"metrics\"}:\n        with task_session(exclusive=False) as session:\n            if command"}
{"id": "scripts/lib/sdklib/task_cli.py:774-801", "path": "scripts/lib/sdklib/task_cli.py", "start": 29000, "end": 30200, "start_line": 774, "end_line": 801, "weights": {"session": 0.3112464711685112, "command": 0.2700716778919717, "json_output": 0.24150750902529394, "args": 0.1801378427180189, "task_session": 0.14490450541517635, "exclusive": 0.1398400177264554, "elif": 0.13833176496378274, "select": 0.10073529159741777, "history": 0.09660300361011757, "limit": 0.08571806537118945, "as": 0.08325996419142653, "compact": 0.0820019413811496, "in": 0.07852321261376743, "json": 0.07643800639195163, "assign": 0.07506317379890128, "false": 0.07043168517311274, "if": 0.0642555925211692, "summary": 0.06342227269848694, "conflicts": 0.06056763047946363, "rgs": 0.056785675248338004, "getattr": 0.056785675248338004, "print_task_list": 0.053031368691780933, "summary_command": 0.053031368691780933, "metrics_command": 0.053031368691780933, "print_conflicts": 0.053031368691780933, "yes": 0.053031368691780933, "validate_board": 0.053031368691780933, "history_command": 0.050367645798708886, "validate": 0.04830150180505879, "metrics": 0.04826837781859896, "list": 0.04413608983129877, "grab": 0.043949616349079755, "complete": 0.043949616349079755, "true": 0.043284513660153894, "comment": 0.042859032685594725, "lower": 0.04188347235542967, "add": 0.0410009706905748, "on": 0.038767988683011026, "release": 0.035465442905800545, "task_id": 0.03377728034289356, "status": 0.03230732856288865, "return": 0.03119141760884797, "argv": 0.031113557449821517, "environ": 0.030828634684388612, "os": 0.02859565267682483, "or": 0.023351250131261856, "get": 0.017648325755114123}, "norm": 0.6694588356485871, "snippet": "rgs(argv) command = args.command if command in {\"list\", \"status\", \"summary\", \"conflicts\", \"history\", \"metrics\"}: with task_session(exclusive=False) as session: if command in {\"list\", \"status\"}: print_task_list(session, compact=getattr(args, \"compact\", False)) elif command == \"summary\": summary_command(session,…", "text": "rgs(argv)\n\n    command = args.command\n\n    if command in {\"list\", \"status\", \"summary\", \"conflicts\", \"history\", \"metrics\"}:\n        with task_session(exclusive=False) as session:\n            if command in {\"list\", \"status\"}:\n                print_task_list(session, compact=getattr(args, \"compact\", False))\n            elif command == \"summary\":\n                summary_command(session, json_output=args.json)\n            elif command == \"metrics\":\n                metrics_command(session, json_output=args.json)\n            elif command == \"conflicts\":\n                print_conflicts(session)\n            elif command == \"history\":\n                json_output = args.json or os.environ.get(\"JSON\", \"0\").lower() in {\"1\", \"true\", \"yes\", \"on\"}\n                history_command(session, limit=args.limit, json_output=json_output)\n        return 0\n\n    if command == \"validate\":\n        with task_session(exclusive=False) as session:\n            validate_board(session)\n        return 0\n\n    if command in {\"assign\", \"select\", \"grab\", \"release\", \"complete\", \"comment\", \"add\"}:\n        with task_session(exclusive=True) as session:\n            if command in {\"assign\", \"select\"}:\n                task_id = "}
{"id": "scripts/lib/sdklib/task_cli.py:798-819", "path": "scripts/lib/sdklib/task_cli.py", "start": 30000, "end": 31200, "start_line": 798, "end_line": 819, "weights": {"force": 0.40030221366251373, "note": 0.3831142641090897, "args": 0.34433428342559363, "pick_note": 0.19255595561984282, "agent": 0.17665605430754824, "task_id": 0.16141355208108427, "ensure_task_arg": 0.14441696671488213, "assign": 0.14348358885453696, "ensure_agent": 0.1384928016357438, "session": 0.13221089040786316, "grab": 0.1260148291778924, "complete": 0.1260148291778924, "release": 0.1016885265617644, "elif": 0.09915816780589737, "select": 0.09627797780992141, "command": 0.09386240132689604, "environ": 0.058929071609096814, "os": 0.054660716621187294, "task": 0.051190096657421386, "yes": 0.050684847953206554, "release_task": 0.050684847953206554, "auto": 0.048138988904960704, "grab_task": 0.048138988904960704, "task_session": 0.0461642672119146, "manual": 0.0461642672119146, "assign_task": 0.0461642672119146, "or": 0.044636017950022665, "exclusive": 0.04455080210754332, "true": 0.04136926969289045, "comment": 0.04096261531012593, "lower": 0.04003022136625137, "add": 0.03918676844762902, "on": 0.037052590953674254, "get": 0.03373485277083762, "action": 0.03157436787043335, "in": 0.030019493671811975, "bool": 0.028216052634106762, "as": 0.02652529832647217, "if": 0.0122824849420996}, "norm": 0.8425264455427698, "snippet": "{\"assign\", \"select\", \"grab\", \"release\", \"complete\", \"comment\", \"add\"}: with task_session(exclusive=True) as session: if command in {\"assign\", \"select\"}: task_id = ensure_task_arg(args.task) agent = ensure_agent(args.agent) note = pick_note(args.note, \"manual assign\") force = args.force or bool(os.environ.get(\"FORCE\"))…", "text": " {\"assign\", \"select\", \"grab\", \"release\", \"complete\", \"comment\", \"add\"}:\n        with task_session(exclusive=True) as session:\n            if command in {\"assign\", \"select\"}:\n                task_id = ensure_task_arg(args.task)\n                agent = ensure_agent(args.agent)\n                note = pick_note(args.note, \"manual assign\")\n                force = args.force or bool(os.environ.get(\"FORCE\"))\n                assign_task(session, task_id, agent, note, action=\"assign\", force=force)\n            elif command == \"grab\":\n                agent = ensure_agent(args.agent)\n                note = pick_note(args.note, \"auto-grab\")\n                force = args.force or os.environ.get(\"FORCE\", \"0\").lower() in {\"1\", \"true\", \"yes\", \"on\"}\n                grab_task(session, agent, note, force=force)\n            elif command == \"release\":\n                task_id = ensure_task_arg(args.task)\n                note = pick_note(args.note, \"release\")\n                release_task(session, task_id, note)\n            elif command == \"complete\":\n                task_id = ensure_task_arg(args.task)\n                agent = ensure_agent(args.agent)\n                note = pick_note(args.note, \"complete\")\n"}
{"id": "scripts/lib/sdklib/task_cli.py:814-835", "path": "scripts/lib/sdklib/task_cli.py", "start": 31000, "end": 32200, "start_line": 814, "end_line": 835, "weights": {"args": 0.39819944179772593, "message": 0.2488936815437253, "environ": 0.1752364497849458, "author": 0.16654591458598644, "os": 0.162543709952478, "title": 0.15445805572604765, "or": 0.1327334217987516, "size": 0.12842341995592463, "task_id": 0.12799811498359664, "note": 0.10356916709169171, "get": 0.10031679902906974, "elif": 0.09828835931637195, "ensure_task_arg": 0.0954334341449221, "complete": 0.08327295729299322, "command": 0.06977928519696876, "agent": 0.06566491492352944, "session": 0.0655255728775813, "priority": 0.06498134949186468, "epic": 0.06180692876058536, "systemexit": 0.05841214992831526, "raise": 0.054181236650826, "not": 0.05320997533282088, "complete_task": 0.05024024402379246, "comment_task": 0.05024024402379246, "size_value": 0.05024024402379246, "pick_note": 0.04771671707246105, "ensure_agent": 0.04575931749952938, "comment": 0.04060329412319501, "add": 0.03884302486475508, "if": 0.03652423153834881, "task": 0.03382737381455331, "p1": 0.030339511205210317, "default": 0.0300421291729675, "is": 0.027968543400474246, "gpt": 0.02505007187568709, "codex": 0.02381689687023806, "else": 0.0213293943220001, "none": 0.01948096422273999}, "norm": 0.6921923062866394, "snippet": ") elif command == \"complete\": task_id = ensure_task_arg(args.task) agent = ensure_agent(args.agent) note = pick_note(args.note, \"complete\") complete_task(session, task_id, agent, note) elif command == \"comment\": task_id = ensure_task_arg(args.task) message = args.message or os.environ.get(\"MESSAGE\") if not message:…", "text": ")\n            elif command == \"complete\":\n                task_id = ensure_task_arg(args.task)\n                agent = ensure_agent(args.agent)\n                note = pick_note(args.note, \"complete\")\n                complete_task(session, task_id, agent, note)\n            elif command == \"comment\":\n                task_id = ensure_task_arg(args.task)\n                message = args.message or os.environ.get(\"MESSAGE\")\n                if not message:\n                    raise SystemExit(\"Укажите MESSAGE=... или аргумент --message\")\n                author = args.author or os.environ.get(\"AUTHOR\") or \"gpt-5-codex\"\n                comment_task(session, task_id, author, message)\n            elif command == \"add\":\n                title = args.title or os.environ.get(\"TITLE\")\n                if not title:\n                    raise SystemExit(\"Укажите --title или переменную TITLE для новой задачи\")\n                args.title = title\n                args.epic = args.epic or os.environ.get(\"EPIC\", \"default\")\n                args.priority = args.priority or os.environ.get(\"PRIORITY\", \"P1\")\n                size_value = args.size if args.size is not None else os.environ.get(\"SIZE\")\n             "}
{"id": "scripts/lib/sdklib/task_cli.py:832-849", "path": "scripts/lib/sdklib/task_cli.py", "start": 32000, "end": 33200, "start_line": 832, "end_line": 849, "weights": {"args": 0.5008710748744916, "size_value": 0.3259489002519218, "environ": 0.24362140579858316, "os": 0.22597540164124988, "parse_csv": 0.22112624984799023, "size": 0.19837764058232263, "or": 0.16402829360496135, "get": 0.13946481816236525, "failure": 0.11576972111464912, "success": 0.10800255694102633, "blockers": 0.08273202202183669, "conflicts": 0.07977200111929357, "exc": 0.06808037037016572, "priority": 0.06022661660221606, "dependencies": 0.059915908656425085, "big_task": 0.053652676142508765, "is": 0.05184412923014739, "big_tas": 0.04986059290097972, "status": 0.04255111566819481, "valueerror": 0.037632321382473424, "pragma": 0.037632321382473424, "none": 0.03611105563239608, "cover": 0.03529344274465407, "if": 0.03385172679164036, "round": 0.03295456410683471, "backlog": 0.03295456410683471, "no": 0.03246168100263606, "float": 0.03199697845109176, "isinstance": 0.029658099813272398, "p1": 0.028119546970682738, "default": 0.027843924599335733, "systemexit": 0.027069045088731467, "raise": 0.02510837796013888, "except": 0.024730166450912108, "try": 0.02454746030577342, "as": 0.024368770007246795, "int": 0.020075538867405353, "else": 0.019768706932585464, "not": 0.016438854167863365, "str": 0.014978808826602555}, "norm": 0.8245060760775526, "snippet": ", \"default\") args.priority = args.priority or os.environ.get(\"PRIORITY\", \"P1\") size_value = args.size if args.size is not None else os.environ.get(\"SIZE\") if isinstance(size_value, str): try: size_value = float(size_value) except ValueError as exc: # pragma: no cover - простая валидация raise SystemExit(\"SIZE должен…", "text": ", \"default\")\n                args.priority = args.priority or os.environ.get(\"PRIORITY\", \"P1\")\n                size_value = args.size if args.size is not None else os.environ.get(\"SIZE\")\n                if isinstance(size_value, str):\n                    try:\n                        size_value = float(size_value)\n                    except ValueError as exc:  # pragma: no cover - простая валидация\n                        raise SystemExit(\"SIZE должен быть числом\") from exc\n                if size_value is None:\n                    size_value = 5\n                args.size = int(round(size_value))\n                args.status = args.status or os.environ.get(\"STATUS\", \"backlog\")\n                args.blockers = parse_csv(args.blockers or os.environ.get(\"BLOCKERS\"))\n                args.dependencies = parse_csv(args.dependencies or os.environ.get(\"DEPENDENCIES\"))\n                args.conflicts = parse_csv(args.conflicts or os.environ.get(\"CONFLICTS\"))\n                args.success = parse_csv(args.success or os.environ.get(\"SUCCESS\"))\n                args.failure = parse_csv(args.failure or os.environ.get(\"FAILURE\"))\n                args.big_task = args.big_task or os.environ.get(\"BIG_TAS"}
{"id": "scripts/lib/sdklib/task_cli.py:847-860", "path": "scripts/lib/sdklib/task_cli.py", "start": 33000, "end": 33566, "start_line": 847, "end_line": 860, "weights": {"args": 0.4988432567575908, "environ": 0.2561148112241516, "os": 0.23756388377669863, "or": 0.23279400130857977, "failure": 0.2190719338015668, "note": 0.18164438536081318, "big_task": 0.15229105766604412, "get": 0.14661686011940964, "success": 0.13624937952560245, "agent": 0.11516615848126703, "parse_csv": 0.08368778071170092, "add_task": 0.08368778071170092, "ensure_agent": 0.0802548029991746, "pragma": 0.07121193123144971, "add": 0.06812468976280123, "cover": 0.06678605319373, "no": 0.06142748866652668, "task": 0.05932800945937043, "session": 0.05746088698495592, "__name__": 0.05746088698495592, "__main__": 0.05746088698495592, "exit": 0.05169637237816498, "systemexit": 0.05122296224483031, "main": 0.04988432567575908, "raise": 0.04751277675533973, "sys": 0.04202546992551307, "command": 0.04079404365361251, "return": 0.025912870013504473, "if": 0.02135262766857315}, "norm": 0.8056000146933016, "snippet": "(args.success or os.environ.get(\"SUCCESS\")) args.failure = parse_csv(args.failure or os.environ.get(\"FAILURE\")) args.big_task = args.big_task or os.environ.get(\"BIG_TASK\") args.agent = ensure_agent(args.agent or os.environ.get(\"AGENT\")) args.note = args.note or os.environ.get(\"NOTE\") or \"add task\" add_task(session,…", "text": "(args.success or os.environ.get(\"SUCCESS\"))\n                args.failure = parse_csv(args.failure or os.environ.get(\"FAILURE\"))\n                args.big_task = args.big_task or os.environ.get(\"BIG_TASK\")\n                args.agent = ensure_agent(args.agent or os.environ.get(\"AGENT\"))\n                args.note = args.note or os.environ.get(\"NOTE\") or \"add task\"\n                add_task(session, args)\n        return 0\n\n    raise SystemExit(f\"Неизвестная команда task: {command}\")\n\n\nif __name__ == \"__main__\":  # pragma: no cover - точка входа\n    sys.exit(main())\n"}
