[
  {
    "path": ".pytest_cache/README.md",
    "summary": "# pytest cache directory # This directory contains data from the pytest's cache plugin, which provides the `--lf` and `--ff` options, as well as the `cache` fixture. **Do not** commit this to version control. See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "config/heart.json",
    "summary": "{ \"index_dir\": \"context/heart\", \"chunk_chars\": 1200, \"chunk_overlap\": 200, \"max_file_bytes\": 524288, \"include_globs\": [ \"**/*.py\", \"**/*.rs\", \"**/*.ts\", \"**/*.tsx\", \"**/*.js\", \"**/*.jsx\", \"**/*.sh\", \"**/*.md\", \"**/*.yaml\", \"**/*.yml\", \"**/*.json\" ], \"exclude_globs\": [ \"vendor/**\", \"scripts/bin/**\",…",
    "first_chunk_lines": "1-34"
  },
  {
    "path": "config/commands.sh",
    "summary": "# Команды SDK для конкретного проекта. # Обновите массивы, чтобы привязать SDK к стеку разрабатываемого решения. SDK_CAPSULE_ROOT=\"agentcontrol\" _ensure_venv_cmd='(cd \"$SDK_CAPSULE_ROOT\" && [ -d .venv ] || python3 -m venv .venv)' _upgrade_cmd='(cd \"$SDK_CAPSULE_ROOT\" && .venv/bin/pip install --upgrade pip)'…",
    "first_chunk_lines": "1-28"
  },
  {
    "path": "config/agents.json",
    "summary": "{ \"default_role\": \"Principal Delivery Engineer\", \"log_dir\": \"reports/agents\", \"context\": { \"max_snippet_chars\": 320, \"top_k_chunks\": 6 }, \"agents\": { \"codex\": { \"command\": [ \"scripts/bin/codex\", \"exec\", \"--sandbox\", \"workspace-write\", \"--ask-for-approval\", \"on-request\" ], \"stdin\": true, \"owner\": \"codex-bot\",…",
    "first_chunk_lines": "1-56"
  },
  {
    "path": "scripts/sync-architecture.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" python3 \"$SCRIPT_DIR/lib/architecture_tool.py\" sync",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "scripts/sdk.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Единый CLI для управления GPT-5 Codex SDK.\"\"\" from __future__ import annotations import argparse import subprocess import sys from pathlib import Path ROOT = Path(__file__).resolve().parents[1] SCRIPTS = ROOT / \"scripts\" def run(command: list[str]) -> int: proc = subprocess.run(command)…",
    "first_chunk_lines": "1-51"
  },
  {
    "path": "scripts/scan-sbom.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" PIP_AUDIT=\"$SDK_ROOT/.venv/bin/pip-audit\" LOCK_FILE=\"$SDK_ROOT/requirements.lock\" REPORT=\"$SDK_ROOT/reports/pip-audit.json\"…",
    "first_chunk_lines": "1-45"
  },
  {
    "path": "scripts/ship.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::log \"INF\" \"Запуск agentcall verify перед ship\" \"$SDK_ROOT/scripts/verify.sh\"…",
    "first_chunk_lines": "1-42"
  },
  {
    "path": "scripts/verify.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" VERIFY_JSON=\"$REPORT_DIR/verify.json\" declare -a…",
    "first_chunk_lines": "1-52"
  },
  {
    "path": "scripts/review.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" REVIEW_JSON=\"$REPORT_DIR/review.json\"…",
    "first_chunk_lines": "1-47"
  },
  {
    "path": "scripts/status.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" export SDK_ROOT sdk::log \"INF\" \"Синхронизация прогресса\" \"$SDK_ROOT/scripts/progress.py\" || sdk::log \"WRN\" \"progress завершился с…",
    "first_chunk_lines": "1-39"
  },
  {
    "path": "scripts/progress.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Пересчёт прогресса программы/эпиков/Big Tasks.\"\"\" from __future__ import annotations import argparse import sys import textwrap from copy import deepcopy from pathlib import Path from typing import Dict, Tuple ROOT = Path(__file__).resolve().parents[1] if str(ROOT) not in sys.path:…",
    "first_chunk_lines": "1-44"
  },
  {
    "path": "scripts/check-architecture-integrity.py",
    "summary": "#!/usr/bin/env python3 import sys from pathlib import Path ROOT = Path(__file__).resolve().parents[1] if str(ROOT) not in sys.path: sys.path.insert(0, str(ROOT)) from scripts.lib.architecture_tool import main as architecture_main if __name__ == \"__main__\": raise SystemExit(architecture_main([\"check\"]))",
    "first_chunk_lines": "1-13"
  },
  {
    "path": "scripts/setup.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" VENV_DIR=\"$SDK_ROOT/.venv\" VENV_BIN=\"$VENV_DIR/bin\" SETUP_STATE_DIR=\"$SDK_ROOT/.sdk/setup\" mkdir -p \"$SETUP_STATE_DIR\" sdk::log…",
    "first_chunk_lines": "1-49"
  },
  {
    "path": "scripts/dev.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::print_quickref sdk::run_command_group \"dev\" SDK_DEV_COMMANDS",
    "first_chunk_lines": "1-13"
  },
  {
    "path": "scripts/update-lock.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" LOCK_SRC=\"$SDK_ROOT/requirements.txt\" LOCK_DST=\"$SDK_ROOT/requirements.lock\" SBOM_DST=\"$SDK_ROOT/sbom/python.json\" if [[ ! -f…",
    "first_chunk_lines": "1-46"
  },
  {
    "path": "scripts/arch.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" MANIFEST=\"$ROOT/architecture/manifest.yaml\" EDIT_MANIFEST=\"$ROOT/architecture/manifest.edit.yaml\" usage() { cat <<USAGE Использование: agentcall run arch-…",
    "first_chunk_lines": "1-40"
  },
  {
    "path": "scripts/init.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::log \"INF\" \"Инициализация SDK рабочего окружения\" CONFIG_FILE=\"$SDK_ROOT/config/commands.sh\"…",
    "first_chunk_lines": "1-34"
  },
  {
    "path": "scripts/generate-sbom.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Generate or verify combined SBOM (Python + system + Go).\"\"\" from __future__ import annotations import argparse import json import shutil import subprocess from dataclasses import asdict, dataclass from importlib import metadata as importlib_metadata from pathlib import Path from typing import…",
    "first_chunk_lines": "1-41"
  },
  {
    "path": "scripts/roadmap-status.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" MODE=\"${1:-full}\" case \"$MODE\" in full|compact|json) shift || true ;; *) MODE=\"full\" ;; esac TODO_FILE=\"$SDK_ROOT/todo.machine.md\"…",
    "first_chunk_lines": "1-57"
  },
  {
    "path": "scripts/install_agentcontrol.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" TARGET=\"${AGENTCONTROL_HOME:-$HOME/.agentcontrol}\" TEMPLATE_SRC=\"$ROOT/src/agentcontrol/templates/0.2.0/project\"…",
    "first_chunk_lines": "1-20"
  },
  {
    "path": "scripts/check-lock.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" VENV_PIP=\"$SDK_ROOT/.venv/bin/pip\" LOCK_SRC=\"$SDK_ROOT/requirements.txt\" LOCK_FILE=\"$SDK_ROOT/requirements.lock\" if [[ ! -x…",
    "first_chunk_lines": "1-49"
  },
  {
    "path": "scripts/task.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" export SDK_ROOT exec python3 -m scripts.lib.sdklib.task_cli \"$@\"",
    "first_chunk_lines": "1-12"
  },
  {
    "path": "scripts/agent-cycle.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/..\" && pwd)\" REPORT_DIR=\"$ROOT/reports/agent_runs\" TIMESTAMP=\"$(date -u +%Y%m%dT%H%M%SZ)\" REPORT_PATH=\"$REPORT_DIR/$TIMESTAMP.yaml\" mkdir -p \"$REPORT_DIR\" python3…",
    "first_chunk_lines": "1-40"
  },
  {
    "path": "scripts/doctor.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands REPORT_DIR=\"$SDK_ROOT/reports\" mkdir -p \"$REPORT_DIR\" REPORT_FILE=\"$REPORT_DIR/doctor.json\" sdk::log \"INF\"…",
    "first_chunk_lines": "1-42"
  },
  {
    "path": "scripts/fix.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" sdk::load_commands sdk::run_command_group \"fix\" SDK_FIX_COMMANDS",
    "first_chunk_lines": "1-12"
  },
  {
    "path": "scripts/sync-roadmap.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" # shellcheck disable=SC1091 source \"$SCRIPT_DIR/lib/common.sh\" TODO_FILE=\"$SDK_ROOT/todo.machine.md\" if [[ ! -f \"$TODO_FILE\" ]]; then sdk::log \"WRN\" \"todo.machine.md не найден — синхронизация…",
    "first_chunk_lines": "1-43"
  },
  {
    "path": "architecture/manifest.yaml",
    "summary": "version: 0.1.0 updated_at: '2025-10-04T23:27:46Z' program: meta: program: v1 updated_at: '2025-10-04T23:27:46Z' program_id: shelldone-core name: Shelldone Terminal Platform objectives: - Maintain benchmark terminal quality with a decade-long horizon - Become the base platform for plugins, themes, automation, and AI…",
    "first_chunk_lines": "1-50"
  },
  {
    "path": "data/tasks.board.json",
    "summary": "{ \"version\": \"0.1.0\", \"updated_at\": \"2025-10-04T23:25:33+00:00\", \"tasks\": [ { \"id\": \"task-qa-orchestrator\", \"title\": \"make verify Orchestrator\", \"epic\": \"epic-qa-hardening\", \"status\": \"done\", \"priority\": \"P0\", \"owner\": \"unassigned\", \"success_criteria\": [], \"failure_criteria\": [], \"blockers\": [], \"dependencies\": [],…",
    "first_chunk_lines": "1-48"
  },
  {
    "path": "docs/adr/index.md",
    "summary": "# Architecture Decision Record Index | ADR | Title | Status | Date | Systems | | --- | --- | --- | --- | --- | | ADR-0001 | Control Plane Manifest as Source of Truth | accepted | 2025-09-29 | control-plane | | ADR-0002 | Deterministic Documentation Assembly | accepted | 2025-09-29 | doc-sync | | ADR-0003 | Manifest-…",
    "first_chunk_lines": "1-8"
  },
  {
    "path": "docs/adr/ADR-0002.md",
    "summary": "# ADR-0002 — Deterministic Documentation Assembly **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context Architecture documentation regularly drifted because Markdown files were edited manually. ## Decision Generate documentation from templates powered by manifest.yaml. ## Consequences Updates…",
    "first_chunk_lines": "1-18"
  },
  {
    "path": "docs/adr/ADR-0003.md",
    "summary": "# ADR-0003 — Manifest-Driven Task Governance **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context Tasks were losing traceability to architecture and systems. ## Decision Drive the task board and roadmap from manifest.yaml with mandatory traceability fields. ## Consequences Drift is detected…",
    "first_chunk_lines": "1-18"
  },
  {
    "path": "docs/adr/ADR-0001.md",
    "summary": "# ADR-0001 — Control Plane Manifest as Source of Truth **Status:** accepted (date: 2025-09-29) **Authors:** gpt-5-codex ## Context The project needs a single source of truth for architecture, documentation, and work orchestration. ## Decision Introduce manifest.yaml describing program structure, epics, tasks, systems,…",
    "first_chunk_lines": "1-18"
  },
  {
    "path": "docs/rfc/index.md",
    "summary": "# Request for Comments Index | RFC | Title | Status | Date | Systems | | --- | --- | --- | --- | --- | | RFC-0001 | Agent Cycle Interface | draft | 2025-09-29 | control-plane, doc-sync |",
    "first_chunk_lines": "1-6"
  },
  {
    "path": "docs/rfc/RFC-0001.md",
    "summary": "# RFC-0001 — Agent Cycle Interface **Status:** draft (date: 2025-09-29) **Authors:** gpt-5-codex ## Summary Define the entrypoint for agentcall run agent-cycle and the mirror REST API consumed by external agents. ## Motivation Hybrid-H pipelines require a unified workflow that orchestrates sync, verification, and…",
    "first_chunk_lines": "1-17"
  },
  {
    "path": "docs/architecture/overview.md",
    "summary": "# Architecture Overview ## Program Snapshot - Program ID: codex-sdk - Name: GPT-5 Codex SDK Toolkit - Version: 0.1.0 - Updated: 2025-10-01T05:17:22Z - Progress: 100% (health: green) ## Systems | ID | Name | Purpose | ADR | RFC | Status | Dependencies | Roadmap Phase | Key Metrics | | --- | --- | --- | --- | --- | ---…",
    "first_chunk_lines": "1-20"
  },
  {
    "path": ".sdk/arch/outputs.json",
    "summary": "{ \"reports/architecture-dashboard.json\": \"13d510fa5bf0f0ba94890172878c81e8833afd6bd692d67a34cde216724424ba\" }",
    "first_chunk_lines": "1-3"
  },
  {
    "path": "scripts/lib/deps_checker.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Проверка окружения и зависимостей для GPT-5 Codex SDK.\"\"\" from __future__ import annotations import json import os import re import shutil import subprocess import sys from dataclasses import dataclass, asdict from datetime import datetime, timezone from importlib import metadata as…",
    "first_chunk_lines": "1-49"
  },
  {
    "path": "scripts/lib/quality_guard.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Realness и secrets-сканирование изменённых строк. Используется в agentcall verify / agentcall review для сигнализации о заглушках и секретах без жёсткой блокировки. \"\"\" from __future__ import annotations import argparse import json import os import re import subprocess import sys from…",
    "first_chunk_lines": "1-36"
  },
  {
    "path": "scripts/lib/progress_utils.py",
    "summary": "\"\"\"Утилиты пересчёта прогресса для SDK.\"\"\" from __future__ import annotations from datetime import datetime, timezone from typing import Dict, Iterable, Mapping STATUS_WEIGHTS: Mapping[str, float] = { \"done\": 1.0, \"review\": 0.9, \"ready\": 0.75, \"in_progress\": 0.5, \"at_risk\": 0.4, \"blocked\": 0.3, \"planned\": 0.0,…",
    "first_chunk_lines": "1-49"
  },
  {
    "path": "scripts/lib/report_summary.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Сводный обзор отчетов verify/review/doctor.\"\"\" from __future__ import annotations import json from dataclasses import dataclass from pathlib import Path from typing import Any, Dict, Optional @dataclass class ReportInfo: path: Path exists: bool data: Optional[Dict[str, Any]] def load(path:…",
    "first_chunk_lines": "1-41"
  },
  {
    "path": "scripts/lib/common.sh",
    "summary": "#!/usr/bin/env bash # Общие утилиты SDK GPT-5 Codex. SDK_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\" readonly SDK_ROOT sdk::log() { local level=\"$1\"; shift printf ' [%s] %s\\n' \"$level\" \"$*\" } sdk::die() { sdk::log \"ERR\" \"$*\" exit 1 } sdk::load_commands() { local file=\"$SDK_ROOT/config/commands.sh\" if [[…",
    "first_chunk_lines": "1-41"
  },
  {
    "path": "scripts/lib/auto_detect.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Автоматическое определение команд для разных стеков. Скрипт печатает shell-скрипт, который дополняет переменные SDK_*_COMMANDS, если в config/commands.sh оставлены значения по умолчанию. \"\"\" from __future__ import annotations import shlex import sys from pathlib import Path __all__ =…",
    "first_chunk_lines": "1-39"
  },
  {
    "path": "scripts/lib/architecture_tool.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Architecture manifest tooling for GPT-5 Codex SDK.\"\"\" from __future__ import annotations import argparse import datetime as dt import hashlib import json import os import sys from dataclasses import dataclass from pathlib import Path from typing import Any, Dict, List, Tuple import yaml…",
    "first_chunk_lines": "1-52"
  },
  {
    "path": "scripts/agents/auth.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Interactive authentication launcher for configured AI agents.\"\"\" from __future__ import annotations import json import os import shutil import subprocess import sys import signal import time from datetime import datetime, timezone from glob import glob from pathlib import Path from string…",
    "first_chunk_lines": "1-43"
  },
  {
    "path": "scripts/agents/logs.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Inspect agent execution logs.\"\"\" from __future__ import annotations import argparse import json import os from dataclasses import dataclass from pathlib import Path from typing import Iterable, List ROOT = Path(__file__).resolve().parents[2] DEFAULT_CONFIG_PATH = ROOT / \"config\" /…",
    "first_chunk_lines": "1-51"
  },
  {
    "path": "scripts/agents/__init__.py",
    "summary": "\"\"\"Agent integration utilities for the SDK.\"\"\"",
    "first_chunk_lines": "1-2"
  },
  {
    "path": "scripts/agents/status.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/status.py\" \"$@\"",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "scripts/agents/run.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} COMMAND=${1:-help} TASK=${2:-} AGENT=${3:-codex} ROLE=${4:-} shift 4 || true exec \"$PYTHON\" \"$SCRIPT_DIR/run.py\" \"$COMMAND\" \"--task\" \"$TASK\" \"--agent\" \"$AGENT\" \"--role\"…",
    "first_chunk_lines": "1-15"
  },
  {
    "path": "scripts/agents/logout.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Remove stored credentials for configured AI agents.\"\"\" from __future__ import annotations import json import os import shutil import sys from datetime import datetime, timezone from pathlib import Path from typing import Dict, Iterable ROOT = Path(__file__).resolve().parents[2]…",
    "first_chunk_lines": "1-40"
  },
  {
    "path": "scripts/agents/heart_engine.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Lightweight local memory index for SDK agents.\"\"\" from __future__ import annotations import argparse import json import math import os import re import subprocess import sys import textwrap from collections import Counter from datetime import datetime, timezone from fnmatch import fnmatch…",
    "first_chunk_lines": "1-49"
  },
  {
    "path": "scripts/agents/status.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Display status information for configured AI agents.\"\"\" from __future__ import annotations import argparse import json import os import shutil from dataclasses import dataclass from datetime import datetime from pathlib import Path from typing import Dict, List ROOT =…",
    "first_chunk_lines": "1-48"
  },
  {
    "path": "scripts/agents/heart.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\" PYTHON=${PYTHON:-python3} COMMAND=${1:-help} shift || true exec \"$PYTHON\" \"$SCRIPT_DIR/heart_engine.py\" \"$COMMAND\" \"$@\"",
    "first_chunk_lines": "1-13"
  },
  {
    "path": "scripts/agents/workflow.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/workflow.py\" \"$@\"",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "scripts/agents/auth.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/auth.py\"",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "scripts/agents/logs.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/logs.py\" \"$@\"",
    "first_chunk_lines": "1-9"
  },
  {
    "path": "scripts/agents/context.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Generate rich context prompts for AI agents.\"\"\" from __future__ import annotations import argparse import json import subprocess import sys import tempfile import textwrap from datetime import datetime, timezone from pathlib import Path from typing import List ROOT =…",
    "first_chunk_lines": "1-44"
  },
  {
    "path": "scripts/agents/run.py",
    "summary": "#!/usr/bin/env python3 \"\"\"High-level AI agent orchestrator.\"\"\" from __future__ import annotations import argparse import json import os import subprocess import sys from datetime import datetime, timezone from pathlib import Path from typing import Dict, List ROOT = Path(__file__).resolve().parents[2] if str(ROOT) not…",
    "first_chunk_lines": "1-43"
  },
  {
    "path": "scripts/agents/install.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\" BIN_DIR=\"$ROOT/scripts/bin\" LOG_DIR=\"$ROOT/reports/agents\" CODEX_SRC=\"$ROOT/vendor/codex/codex-rs\" CLAUDE_DIST=\"$BIN_DIR/claude-dist\" mkdir -p \"$BIN_DIR\"…",
    "first_chunk_lines": "1-48"
  },
  {
    "path": "scripts/agents/workflow.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Run agent workflows (assign, review, etc.).\"\"\" from __future__ import annotations import argparse import json import os import subprocess import sys from dataclasses import dataclass from pathlib import Path from typing import Dict, Optional ROOT = Path(__file__).resolve().parents[2]…",
    "first_chunk_lines": "1-45"
  },
  {
    "path": "scripts/agents/heart_check.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd)\" HEART_MANIFEST=\"$ROOT/context/heart/manifest.json\" HEART_CMD=\"$ROOT/scripts/agents/heart.sh\" MAX_AGE_SEC=${HEART_MAX_AGE_SEC:-86400} if [[ ! -f \"$HEART_MANIFEST\" ]]; then echo \"[Heart] manifest…",
    "first_chunk_lines": "1-46"
  },
  {
    "path": "scripts/agents/logout.sh",
    "summary": "#!/usr/bin/env bash set -Eeuo pipefail IFS=$'\\n\\t' LC_ALL=C.UTF-8 SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\" PYTHON=${PYTHON:-python3} exec \"$PYTHON\" \"$SCRIPT_DIR/logout.py\"",
    "first_chunk_lines": "1-8"
  },
  {
    "path": "scripts/lib/sdklib/__init__.py",
    "summary": "\"\"\"Внутренняя библиотека SDK для высокопроизводительных операций.\"\"\" __all__ = [\"task_main\"] def task_main(argv: list[str] | None = None) -> int: \"\"\"Ленивая прокладка к основному CLI (для удобства импорта).\"\"\" from .task_cli import main # локальный импорт, чтобы избежать предупреждений runpy return main(argv)",
    "first_chunk_lines": "1-12"
  },
  {
    "path": "scripts/lib/sdklib/task_cli.py",
    "summary": "#!/usr/bin/env python3 \"\"\"Высокопроизводительный CLI для управления доской задач SDK. Переосмысленная реализация task.sh: добавляет блокировки, кэширование, расширенные метрики и устойчивость для работы с десятками и сотнями агентов. \"\"\" from __future__ import annotations import argparse import json import os import…",
    "first_chunk_lines": "1-40"
  }
]
